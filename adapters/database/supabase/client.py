# adapters/database/supabase/client.py
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase
–û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π supabase
"""

import asyncio
from typing import Optional, Dict, Any, List, Union
import logging
from supabase import create_client, Client

from config.settings import settings

logger = logging.getLogger(__name__)

class SupabaseClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase"""
    
    def __init__(self):
        self.client: Optional[Client] = None
        self._initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self._initialized:
            return
        
        if not settings.SUPABASE_URL or not settings.SUPABASE_ANON_KEY:
            raise ValueError("SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env")
        
        try:
            self.client = create_client(settings.SUPABASE_URL, settings.SUPABASE_SERVICE_KEY)
            logger.info("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self._initialized = True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
            raise
    
    async def execute_query(
        self,
        table: str,
        operation: str,
        data: Optional[Union[Dict[str, Any], List[Dict[str, Any]]]] = None,
        filters: Optional[Dict[str, Any]] = None,
        single: bool = False,
        limit: Optional[int] = None,
        columns: Optional[List[str]] = None
    ) -> Any:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Supabase
        
        Args:
            table: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (select, insert, update, delete)
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            single: –í–µ—Ä–Ω—É—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞
            limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
            columns: –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
        """
        if not self._initialized:
            await self.initialize()
        
        try:
            query = self.client.table(table)
            
            if operation == "select":
                # –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                if columns:
                    query = query.select(",".join(columns))
                else:
                    query = query.select("*")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if filters:
                    for key, value in filters.items():
                        if isinstance(value, dict):
                            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–∏–ø–∞ {"gte": "2023-01-01"}
                            if "gte" in value:
                                query = query.gte(key, value["gte"])
                            elif "lte" in value:
                                query = query.lte(key, value["lte"])
                            elif "gt" in value:
                                query = query.gt(key, value["gt"])
                            elif "lt" in value:
                                query = query.lt(key, value["lt"])
                            elif "neq" in value:
                                query = query.neq(key, value["neq"])
                        else:
                            query = query.eq(key, value)
                
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                if limit:
                    query = query.limit(limit)
                
                result = query.execute()
                
                if single and result.data:
                    return result.data[0] if result.data else None
                return result.data or []
            
            elif operation == "insert":
                # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                if not data:
                    raise ValueError("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
                
                result = query.insert(data).execute()
                
                if single and result.data:
                    return result.data[0] if result.data else None
                return result.data or []
            
            elif operation == "update":
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                if not data:
                    raise ValueError("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
                
                query = query.update(data)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if filters:
                    for key, value in filters.items():
                        query = query.eq(key, value)
                
                result = query.execute()
                return result.data or []
            
            elif operation == "delete":
                # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                if filters:
                    for key, value in filters.items():
                        query = query.eq(key, value)
                
                result = query.delete().execute()
                return result.data or []
            
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ {table}: {e}")
            raise
    
    async def count_records(self, table: str, filters: Optional[Dict[str, Any]] = None) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            query = self.client.table(table).select("*", count="exact")
            
            if filters:
                for key, value in filters.items():
                    query = query.eq(key, value)
            
            result = query.execute()
            return result.count or 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ {table}: {e}")
            return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
_supabase_client: Optional[SupabaseClient] = None

async def get_supabase_client() -> SupabaseClient:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Supabase"""
    global _supabase_client
    
    if _supabase_client is None:
        _supabase_client = SupabaseClient()
        await _supabase_client.initialize()
    
    return _supabase_client

async def close_supabase_client():
    """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase"""
    global _supabase_client
    
    if _supabase_client:
        # Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        logger.info("üõë Supabase –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
        _supabase_client = None