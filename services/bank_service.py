"""
–°–µ—Ä–≤–∏—Å –±–∞–Ω–∫–∞ (–†—è–±–∞–Ω–∫) –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–æ–º RBTC ‚Üî –†—è–±–∞–∫—Å—ã
—Å –º–µ—Ö–∞–Ω–∏–∫–æ–π DEX (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫—É—Ä—Å)
"""
import logging
from decimal import Decimal
from typing import Tuple, Optional, Dict
from datetime import datetime

from adapters.database.supabase.client import get_supabase_client
from config.global_pools import (
    BANK_POOLS,
    calculate_current_rate,
    calculate_stars_to_ryabucks,
    calculate_buy_rbtc_cost,
    calculate_sell_rbtc_reward,
    TRANSACTION_LIMITS,
    RBTC_EQUIVALENT,
    STARS_PACKAGES
)

logger = logging.getLogger(__name__)


class BankService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–≥—Ä–æ–≤—ã–º –±–∞–Ω–∫–æ–º"""

    def __init__(self):
        self.client = None

    async def _ensure_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase"""
        if not self.client:
            self.client = await get_supabase_client()

    async def get_bank_pools(self) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—É–ª–æ–≤

        Returns:
            Dict —Å rbtc_pool, ryabucks_pool, current_rate, total_invested_golden_eggs
        """
        try:
            await self._ensure_client()

            # –ü–æ–ª—É—á–∏—Ç—å –ø—É–ª—ã –±–∞–Ω–∫–∞ –∏–∑ –ë–î
            pools = await self.client.execute_query(
                table="global_pools",
                operation="select",
                filters={"pool_type": "bank"}
            )

            rbtc_pool = Decimal('0')
            ryabucks_pool = Decimal('0')

            for pool in pools:
                if pool['pool_name'] == 'game_bank_rbtc':
                    rbtc_pool = Decimal(str(pool['rbtc_amount']))
                elif pool['pool_name'] == 'game_bank_ryabucks':
                    ryabucks_pool = Decimal(str(pool['ryabucks_amount']))

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = await self.client.execute_query(
                table="pool_statistics",
                operation="select",
                single=True
            )

            total_invested = stats.get('total_golden_eggs_invested', 0) if stats else 0

            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
            current_rate = calculate_current_rate(rbtc_pool, ryabucks_pool)

            return {
                'rbtc_pool': rbtc_pool,
                'ryabucks_pool': ryabucks_pool,
                'current_rate': current_rate,
                'total_invested_golden_eggs': total_invested
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–æ–≤ –±–∞–Ω–∫–∞: {e}")
            # Fallback –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            return {
                'rbtc_pool': BANK_POOLS['rbtc_pool'],
                'ryabucks_pool': BANK_POOLS['ryabucks_pool'],
                'current_rate': Decimal('100'),
                'total_invested_golden_eggs': 0
            }

    async def calculate_max_buyable_rbtc(self, user_ryabucks: int) -> Tuple[Decimal, int]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ RBTC –¥–ª—è –ø–æ–∫—É–ø–∫–∏

        Args:
            user_ryabucks: –†—è–±–∞–∫—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            (max_rbtc, cost_ryabucks)
        """
        pools = await self.get_bank_pools()
        rbtc_pool = pools['rbtc_pool']
        ryabucks_pool = pools['ryabucks_pool']

        # –ú–∞–∫—Å–∏–º—É–º –ø–æ –¥–µ–Ω—å–≥–∞–º (–ø—Ä–æ—Å—Ç–æ–µ –¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É)
        current_rate = pools['current_rate']
        max_by_money = Decimal(user_ryabucks) / current_rate

        # –ú–∞–∫—Å–∏–º—É–º –ø–æ –ø—É–ª—É (–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ—á—Ç–∏ –≤–µ—Å—å –ø—É–ª, –æ—Å—Ç–∞–≤–ª—è—è –º–∏–Ω–∏–º—É–º)
        max_by_pool = rbtc_pool * Decimal('0.99')  # –º–∞–∫—Å–∏–º—É–º 99% –ø—É–ª–∞

        max_buyable = min(max_by_money, max_by_pool)

        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ AMM
        try:
            cost = calculate_buy_rbtc_cost(max_buyable, rbtc_pool, ryabucks_pool)
        except ValueError:
            cost = int(max_buyable * current_rate)

        return max_buyable, min(cost, user_ryabucks)

    async def buy_rbtc(self, user_id: int, amount: Decimal) -> Tuple[bool, str]:
        """
        –ö—É–ø–∏—Ç—å RBTC –∑–∞ —Ä—è–±–∞–∫—Å—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∫—É—Ä—Å–æ–º (AMM)

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ RBTC –¥–ª—è –ø–æ–∫—É–ø–∫–∏

        Returns:
            (success, message)
        """
        try:
            await self._ensure_client()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if amount < TRANSACTION_LIMITS['min_rbtc_trade']:
                return False, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {TRANSACTION_LIMITS['min_rbtc_trade']} RBTC"

            if amount > TRANSACTION_LIMITS['max_rbtc_trade']:
                return False, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {TRANSACTION_LIMITS['max_rbtc_trade']} RBTC"

            # –ü–æ–ª—É—á–∏—Ç—å –ø—É–ª—ã
            pools = await self.get_bank_pools()
            rbtc_pool = pools['rbtc_pool']
            ryabucks_pool = pools['ryabucks_pool']

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ –ø—É–ª–µ
            if amount >= rbtc_pool:
                return False, f"–í –±–∞–Ω–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RBTC. –î–æ—Å—Ç—É–ø–Ω–æ: {rbtc_pool:.4f}"

            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ AMM
            cost = calculate_buy_rbtc_cost(amount, rbtc_pool, ryabucks_pool)

            # –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.client.execute_query(
                table="users",
                operation="select",
                columns=["ryabucks", "rbtc"],
                filters={"user_id": user_id},
                single=True
            )

            if not user:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

            user_ryabucks = user.get('ryabucks', 0)
            if user_ryabucks < cost:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤. –ù—É–∂–Ω–æ: {cost:,}, –µ—Å—Ç—å: {user_ryabucks:,}"

            # –û–±–Ω–æ–≤–∏—Ç—å –ø—É–ª—ã –±–∞–Ω–∫–∞
            new_rbtc_pool = rbtc_pool - amount
            new_ryabucks_pool = ryabucks_pool + cost

            await self.client.execute_query(
                table="global_pools",
                operation="update",
                data={"rbtc_amount": float(new_rbtc_pool)},
                filters={"pool_name": "game_bank_rbtc"}
            )

            await self.client.execute_query(
                table="global_pools",
                operation="update",
                data={"ryabucks_amount": int(new_ryabucks_pool)},
                filters={"pool_name": "game_bank_ryabucks"}
            )

            # –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user_ryabucks = user_ryabucks - cost
            new_user_rbtc = float(user.get('rbtc', 0)) + float(amount)

            await self.client.execute_query(
                table="users",
                operation="update",
                data={
                    "ryabucks": new_user_ryabucks,
                    "rbtc": new_user_rbtc
                },
                filters={"user_id": user_id}
            )

            # –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            new_rate = calculate_current_rate(new_rbtc_pool, new_ryabucks_pool)
            await self.client.execute_query(
                table="pool_transactions",
                operation="insert",
                data={
                    "pool_name": "game_bank_rbtc",
                    "transaction_type": "buy_rbtc",
                    "rbtc_amount": float(amount),
                    "ryabucks_amount": cost,
                    "user_id": user_id,
                    "description": f"–ü–æ–∫—É–ø–∫–∞ {amount:.4f} RBTC –ø–æ –∫—É—Ä—Å—É {new_rate:.2f}"
                }
            )

            return True, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {amount:.4f} üí† RBTC –∑–∞ {cost:,} üíµ\n\n–ù–æ–≤—ã–π –∫—É—Ä—Å: 1 üí† = {new_rate:.2f} üíµ"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ RBTC –¥–ª—è user {user_id}: {e}")
            return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

    async def sell_rbtc(self, user_id: int, amount: Decimal) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–¥–∞—Ç—å RBTC –∑–∞ —Ä—è–±–∞–∫—Å—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∫—É—Ä—Å–æ–º (AMM)

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ RBTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏

        Returns:
            (success, message)
        """
        try:
            await self._ensure_client()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if amount < TRANSACTION_LIMITS['min_rbtc_trade']:
                return False, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {TRANSACTION_LIMITS['min_rbtc_trade']} RBTC"

            # –ü–æ–ª—É—á–∏—Ç—å –ø—É–ª—ã
            pools = await self.get_bank_pools()
            rbtc_pool = pools['rbtc_pool']
            ryabucks_pool = pools['ryabucks_pool']

            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É –ø–æ AMM
            reward = calculate_sell_rbtc_reward(amount, rbtc_pool, ryabucks_pool)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä—è–±–∞–∫—Å–æ–≤ –≤ –ø—É–ª–µ
            if reward > ryabucks_pool:
                return False, f"–í –±–∞–Ω–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {int(ryabucks_pool):,}"

            # –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.client.execute_query(
                table="users",
                operation="select",
                columns=["ryabucks", "rbtc"],
                filters={"user_id": user_id},
                single=True
            )

            if not user:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

            user_rbtc = Decimal(str(user.get('rbtc', 0)))
            if user_rbtc < amount:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RBTC. –ù—É–∂–Ω–æ: {amount:.4f}, –µ—Å—Ç—å: {user_rbtc:.4f}"

            # –û–±–Ω–æ–≤–∏—Ç—å –ø—É–ª—ã –±–∞–Ω–∫–∞
            new_rbtc_pool = rbtc_pool + amount
            new_ryabucks_pool = ryabucks_pool - reward

            await self.client.execute_query(
                table="global_pools",
                operation="update",
                data={"rbtc_amount": float(new_rbtc_pool)},
                filters={"pool_name": "game_bank_rbtc"}
            )

            await self.client.execute_query(
                table="global_pools",
                operation="update",
                data={"ryabucks_amount": int(new_ryabucks_pool)},
                filters={"pool_name": "game_bank_ryabucks"}
            )

            # –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user_ryabucks = user.get('ryabucks', 0) + reward
            new_user_rbtc = float(user_rbtc) - float(amount)

            await self.client.execute_query(
                table="users",
                operation="update",
                data={
                    "ryabucks": new_user_ryabucks,
                    "rbtc": new_user_rbtc
                },
                filters={"user_id": user_id}
            )

            # –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            new_rate = calculate_current_rate(new_rbtc_pool, new_ryabucks_pool)
            await self.client.execute_query(
                table="pool_transactions",
                operation="insert",
                data={
                    "pool_name": "game_bank_rbtc",
                    "transaction_type": "sell_rbtc",
                    "rbtc_amount": float(amount),
                    "ryabucks_amount": reward,
                    "user_id": user_id,
                    "description": f"–ü—Ä–æ–¥–∞–∂–∞ {amount:.4f} RBTC –ø–æ –∫—É—Ä—Å—É {new_rate:.2f}"
                }
            )

            return True, f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {amount:.4f} üí† RBTC –∑–∞ {reward:,} üíµ\n\n–ù–æ–≤—ã–π –∫—É—Ä—Å: 1 üí† = {new_rate:.2f} üíµ"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ RBTC –¥–ª—è user {user_id}: {e}")
            return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

    async def buy_ryabucks_with_stars(
            self,
            user_id: int,
            stars: int
    ) -> Tuple[bool, str, int]:
        """
        –ö—É–ø–∏—Ç—å —Ä—è–±–∞–∫—Å—ã –∑–∞ Telegram Stars –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stars: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars

        Returns:
            (success, message, ryabucks_amount)
        """
        try:
            await self._ensure_client()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if stars < TRANSACTION_LIMITS['min_stars_purchase']:
                return False, f"–ú–∏–Ω–∏–º—É–º {TRANSACTION_LIMITS['min_stars_purchase']} ‚≠ê", 0

            if stars > TRANSACTION_LIMITS['max_stars_purchase']:
                return False, f"–ú–∞–∫—Å–∏–º—É–º {TRANSACTION_LIMITS['max_stars_purchase']} ‚≠ê", 0

            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
            pools = await self.get_bank_pools()
            current_rate = pools['current_rate']

            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ä—è–±–∞–∫—Å–æ–≤ –ø–æ —Ñ–æ—Ä–º—É–ª–µ
            ryabucks_base = calculate_stars_to_ryabucks(stars, current_rate)

            # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å –µ—Å–ª–∏ –µ—Å—Ç—å
            bonus_percent = 0
            for package in STARS_PACKAGES:
                if stars >= package['stars']:
                    bonus_percent = package['bonus']

            bonus_amount = int(ryabucks_base * bonus_percent / 100)
            total_ryabucks = ryabucks_base + bonus_amount

            # –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.client.execute_query(
                table="users",
                operation="select",
                columns=["ryabucks"],
                filters={"user_id": user_id},
                single=True
            )

            if not user:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 0

            new_ryabucks = user.get('ryabucks', 0) + total_ryabucks

            await self.client.execute_query(
                table="users",
                operation="update",
                data={"ryabucks": new_ryabucks},
                filters={"user_id": user_id}
            )

            # –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await self.client.execute_query(
                table="pool_transactions",
                operation="insert",
                data={
                    "pool_name": "game_bank_ryabucks",
                    "transaction_type": "buy_ryabucks_stars",
                    "rbtc_amount": 0,
                    "ryabucks_amount": total_ryabucks,
                    "user_id": user_id,
                    "description": f"–ü–æ–∫—É–ø–∫–∞ –∑–∞ {stars} ‚≠ê (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç {RBTC_EQUIVALENT * stars / 100:.2f} RBTC –ø–æ –∫—É—Ä—Å—É {current_rate:.2f})"
                }
            )

            bonus_text = f"\nüéÅ –ë–æ–Ω—É—Å +{bonus_percent}%: {bonus_amount:,} üíµ" if bonus_amount > 0 else ""

            return True, f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {total_ryabucks:,} üíµ —Ä—è–±–∞–∫—Å–æ–≤ –∑–∞ {stars} ‚≠ê{bonus_text}\n\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 üí† = {current_rate:.2f} üíµ", total_ryabucks

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ä—è–±–∞–∫—Å–æ–≤ –∑–∞ Stars –¥–ª—è user {user_id}: {e}")
            return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", 0


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
bank_service = BankService()
