"""
License Service - —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–∏—Ü–µ–Ω–∑–∏–π —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω—Ñ–ª—è—Ü–∏—é/–¥–µ—Ñ–ª—è—Ü–∏—é –±–∞–Ω–∫–∞ –∏ –ø–ª–∞–≤–Ω–æ–µ —É–¥–µ—à–µ–≤–ª–µ–Ω–∏–µ RBTC
"""

import logging
from datetime import datetime, timezone
from typing import Optional, Tuple, Dict, List
from decimal import Decimal

from core.domain.entities import User
from core.ports.repositories import UserRepository
from services.event_tracker import get_event_tracker, EventType, EventSignificance
from services.bank_service import BankService
from adapters.database.supabase.client import get_supabase_client

logger = logging.getLogger(__name__)

class LicenseType:
    """–¢–∏–ø—ã –ª–∏—Ü–µ–Ω–∑–∏–π –≤ –∏–≥—Ä–µ"""
    EMPLOYER = "employer"           # –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å üíº
    FARMER = "farmer"              # –§–µ—Ä–º–µ—Ä—Å–∫–∞—è üè°
    PARTNER = "partner"            # –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è üë•  
    MERCHANT = "merchant"          # –ü—Ä–æ–¥–∞–≤—Ü–∞ üç±
    BANKER = "banker"              # –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è üè¶
    POLITICAL = "political"        # –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è üèõÔ∏è
    RACING = "racing"              # –ì–æ–Ω–æ—á–Ω–∞—è üèá
    FIGHTING = "fighting"          # –ë–æ–π—Ü–æ–≤—Å–∫–∞—è ü•ä
    QUANTUM = "quantum"            # –ö–≤–∞–Ω—Ç–æ–≤–∞—è ‚öõÔ∏è
    EXPEDITION = "expedition"      # –≠–∫—Å–ø–µ–¥–∏—Ü–∏–æ–Ω–Ω–∞—è üèïÔ∏è

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
LICENSE_CONFIG = {
    LicenseType.EMPLOYER: {
        "name": "–õ–∏—Ü–µ–Ω–∑–∏—è –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è",
        "icon": "üíº",
        "base_price_ryabucks": 150,
        "base_price_rbtc": Decimal("1.5"),
        "max_level": 10,
        "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö",
        "telegra_link": "https://telegra.ph/Licenziya-Rabotodatelya-10-10",
        "level_benefits": {
            1: "–î–æ 3 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
            2: "–î–æ 6 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤", 
            3: "–î–æ 10 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
            5: "–ù–∞–π–º Q-–°–æ–ª–¥–∞—Ç",
            10: "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –Ω–∞–π–º"
        }
    },
    LicenseType.FARMER: {
        "name": "–§–µ—Ä–º–µ—Ä—Å–∫–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "üè°",
        "base_price_ryabucks": 200,
        "base_price_rbtc": Decimal("2.0"),
        "max_level": 8,
        "description": "–ü–ª–æ—â–∞–¥—å —Ñ–µ—Ä–º—ã –∏ –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç—Ä–æ–π–∫–∞–º",
        "telegra_link": "https://telegra.ph/Fermerskaya-Licenziya-10-10",
        "level_benefits": {
            1: "–ë–∞–∑–æ–≤—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏",
            2: "–ñ–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ",
            3: "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ–µ—Ä–º–∞",
            5: "–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ",
            8: "–ú–µ–≥–∞-—Ñ–µ—Ä–º–∞"
        }
    },
    LicenseType.PARTNER: {
        "name": "–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "üë•", 
        "base_price_ryabucks": 400,
        "base_price_rbtc": Decimal("4.0"),
        "max_level": 5,
        "description": "–ì–ª—É–±–æ–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –¥–æ—Ö–æ–¥–∞",
        "telegra_link": "https://telegra.ph/Partnyerskaya-Licenziya-10-10",
        "level_benefits": {
            1: "1-–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
            2: "2-–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
            3: "3-–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
            4: "–ö–æ–º–∞–Ω–¥–Ω—ã–µ –±–æ–Ω—É—Å—ã",
            5: "–õ–∏–¥–µ—Ä—Å–∫–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏"
        }
    },
    LicenseType.MERCHANT: {
        "name": "–õ–∏—Ü–µ–Ω–∑–∏—è –ü—Ä–æ–¥–∞–≤—Ü–∞",
        "icon": "üç±",
        "base_price_ryabucks": 300,
        "base_price_rbtc": Decimal("3.0"),
        "max_level": 6,
        "description": "–ú–∞–≥–∞–∑–∏–Ω—ã –∏ —Ç–æ—Ä–≥–æ–≤–ª—è",
        "telegra_link": "https://telegra.ph/Licenziya-Prodavca-10-10",
        "level_benefits": {
            1: "–ë–∞–∑–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è",
            2: "–°–∫–∏–¥–∫–∏ 5%",
            3: "–û–ø—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã",
            4: "–°–∫–∏–¥–∫–∏ 15%",
            6: "–î–æ—Å—Ç—É–ø –∫ –∞—É–∫—Ü–∏–æ–Ω—É"
        }
    },
    LicenseType.BANKER: {
        "name": "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "üè¶",
        "base_price_ryabucks": 1000,
        "base_price_rbtc": Decimal("10.0"),
        "max_level": 4,
        "description": "–î–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–≤–æ–¥—ã RBTC",
        "telegra_link": "https://telegra.ph/Bankovskaya-Licenziya-10-10",
        "level_benefits": {
            1: "–ë–∞–∑–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã",
            2: "–ö—Ä–µ–¥–∏—Ç—ã –ø–æ–¥ –∑–∞–ª–æ–≥",
            3: "–ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏",
            4: "VIP –±–∞–Ω–∫–∏–Ω–≥"
        }
    },
    LicenseType.POLITICAL: {
        "name": "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "üèõÔ∏è",
        "base_price_ryabucks": 1000,
        "base_price_rbtc": Decimal("10.0"),
        "max_level": 3,
        "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–æ–º –∏ —ç–∫–æ–Ω–æ–º–∏–∫–æ–π",
        "telegra_link": "https://telegra.ph/Politicheskaya-Licenziya-10-10",
        "level_benefits": {
            1: "–£—á–∞—Å—Ç–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö",
            2: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤",
            3: "–ì—É–±–µ—Ä–Ω–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞"
        }
    },
    LicenseType.RACING: {
        "name": "–ì–æ–Ω–æ—á–Ω–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "üèá",
        "base_price_ryabucks": 800,
        "base_price_rbtc": Decimal("8.0"),
        "max_level": 5,
        "description": "–£—á–∞—Å—Ç–∏–µ –≤ —Å–∫–∞—á–∫–∞—Ö",
        "telegra_link": "https://telegra.ph/Gonochnaya-Licenziya-10-10",
        "level_benefits": {
            1: "–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–∫–∞—á–∫–∏",
            2: "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∫–∞—á–∫–∏",
            3: "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ —Å–∫–∞—á–∫–∏",
            4: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Å–∫–∞—á–∫–∏",
            5: "–ß–µ–º–ø–∏–æ–Ω—Å–∫–∏–µ —Å–∫–∞—á–∫–∏"
        }
    },
    LicenseType.FIGHTING: {
        "name": "–ë–æ–π—Ü–æ–≤—Å–∫–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "ü•ä",
        "base_price_ryabucks": 600,
        "base_price_rbtc": Decimal("6.0"),
        "max_level": 5,
        "description": "–ü–µ—Ç—É—à–∏–Ω—ã–µ –±–æ–∏",
        "telegra_link": "https://telegra.ph/Bojcovskaya-Licenziya-10-10",
        "level_benefits": {
            1: "–î–≤–æ—Ä–æ–≤—ã–µ –±–æ–∏",
            2: "–†–∞–π–æ–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã",
            3: "–ì–æ—Ä–æ–¥—Å–∫–∏–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã",
            4: "–û–±–ª–∞—Å—Ç–Ω—ã–µ –ø–µ—Ä–≤–µ–Ω—Å—Ç–≤–∞",
            5: "–ß–µ–º–ø–∏–æ–Ω –æ—Å—Ç—Ä–æ–≤–∞"
        }
    },
    LicenseType.QUANTUM: {
        "name": "–ö–≤–∞–Ω—Ç–æ–≤–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "‚öõÔ∏è",
        "base_price_ryabucks": 1500,
        "base_price_rbtc": Decimal("15.0"),
        "max_level": 3,
        "description": "–£—á—ë–Ω—ã–µ –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è",
        "telegra_link": "https://telegra.ph/Kvantovaya-Licenziya-10-10",
        "level_benefits": {
            1: "–ë–∞–∑–æ–≤–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è",
            2: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã",
            3: "–ú–∞—Å—Ç–µ—Ä –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –Ω–∞—É–∫"
        }
    },
    LicenseType.EXPEDITION: {
        "name": "–≠–∫—Å–ø–µ–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è", 
        "icon": "üèïÔ∏è",
        "base_price_ryabucks": 500,
        "base_price_rbtc": Decimal("5.0"),
        "max_level": 5,
        "description": "Q-–°–æ–ª–¥–∞—Ç—ã –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏",
        "telegra_link": "https://telegra.ph/Ekspedicionnaya-Licenziya-10-10",
        "level_benefits": {
            1: "–õ—ë–≥–∫–∏–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏",
            2: "–°—Ä–µ–¥–Ω–∏–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏",
            3: "–¢—è–∂—ë–ª—ã–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏", 
            4: "+25% –∫ –Ω–∞—Ö–æ–¥–∫–∞–º RBTC",
            5: "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏"
        }
    }
}

class LicenseService:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–∏—Ü–µ–Ω–∑–∏–π —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º"""

    def __init__(self, user_repository: UserRepository):
        self.user_repository = user_repository
        self.bank_service = None
        self.event_tracker = None
        self.client = None

        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∫–∏
        self.INITIAL_BANK_RYABUCKS = Decimal("1050000000")  # 1.05 –º–ª—Ä–¥
        self.TOTAL_RBTC_POOL = Decimal("18480000")  # –ë–µ–∑ –±–∞–Ω–∫–∞ –∏ DEX
        self.SMOOTHING_COEFFICIENT = 0.7

    async def _ensure_dependencies(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        if not self.bank_service:
            from services.bank_service import BankService
            self.bank_service = BankService()
        if not self.event_tracker:
            self.event_tracker = await get_event_tracker()
        if not self.client:
            self.client = await get_supabase_client()

    async def calculate_price_multipliers(self) -> Dict[str, float]:
        """–†–∞—Å—á—ë—Ç –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ü–µ–Ω"""
        try:
            # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
            return {
                "ryabucks": 1.0,
                "rbtc": 1.0
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {"ryabucks": 1.0, "rbtc": 1.0}

    async def _get_total_burned_rbtc(self) -> Decimal:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö RBTC"""
        # –í MVP –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        # –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥–µ—Ç —Å—É–º–º–∞ –∏–∑ Quantum Pass, –ª–∏—Ü–µ–Ω–∑–∏–π, —É—Å–∫–æ—Ä–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏
        try:
            await self._ensure_dependencies()

            # –ó–∞–ø—Ä–æ—Å —Å—É–º–º—ã —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö RBTC –∏–∑ audit_log
            burned_data = await self.client.execute_query(
                table="audit_log",
                operation="select",
                columns=["payload"],
                filters={"action_type": "rbtc_burned"}
            )

            total_burned = Decimal("0")
            for record in burned_data:
                payload = record.get("payload", {})
                if isinstance(payload, dict) and "amount" in payload:
                    total_burned += Decimal(str(payload["amount"]))

            return total_burned

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö RBTC: {e}")
            return Decimal("0")

    def calculate_license_price(self, license_type: str, level: int, multipliers: Dict[str, float]) -> Tuple[int, Decimal]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å —É—á—ë—Ç–æ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–æ–≤
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ü–µ–Ω–∞_—Ä—è–±–∞–∫—Å—ã, —Ü–µ–Ω–∞_rbtc)
        """
        if license_type not in LICENSE_CONFIG:
            return 0, Decimal("0")

        config = LICENSE_CONFIG[license_type]

        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç: —Ü–µ–Ω–∞ —É–¥–≤–∞–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º —É—Ä–æ–≤–Ω–µ–º
        base_ryabucks = config["base_price_ryabucks"] * (2 ** (level - 1))
        base_rbtc = config["base_price_rbtc"] * (2 ** (level - 1))

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã
        final_ryabucks = int(base_ryabucks * multipliers["ryabucks"])
        final_rbtc = base_rbtc * Decimal(str(multipliers["rbtc"]))

        return final_ryabucks, final_rbtc

    async def get_user_licenses(self, user_id: int) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏ –ª–∏—Ü–µ–Ω–∑–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self._ensure_dependencies()

            result = await self.client.execute_query(
                table="user_licenses",
                operation="select",
                columns=["license_type", "level"],
                filters={"user_id": user_id}
            )

            licenses = {}
            if result:
                for row in result:
                    licenses[row["license_type"]] = row.get("level", 0)

            return licenses

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π –¥–ª—è {user_id}: {e}")
            return {}

    async def get_license_level(self, user_id: int, license_type: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ (0 –µ—Å–ª–∏ –Ω–µ—Ç)"""
        licenses = await self.get_user_licenses(user_id)
        return licenses.get(license_type, 0)

    async def upgrade_license(self, user_id: int, license_type: str, currency: str) -> Tuple[bool, str]:
        """
        –£–ª—É—á—à–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        currency: 'ryabucks' –∏–ª–∏ 'rbtc'
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            await self._ensure_dependencies()

            if license_type not in LICENSE_CONFIG:
                return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏"

            config = LICENSE_CONFIG[license_type]
            current_level = await self.get_license_level(user_id, license_type)
            next_level = current_level + 1

            if next_level > config["max_level"]:
                return False, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({config['max_level']})"

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
            multipliers = await self.calculate_price_multipliers()
            ryabucks_price, rbtc_price = self.calculate_license_price(license_type, next_level, multipliers)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_repository.get_by_id(user_id)
            if not user:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

            if currency == "ryabucks":
                if user.resources.ryabucks < ryabucks_price:
                    return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤. –ù—É–∂–Ω–æ: {ryabucks_price:,}, –µ—Å—Ç—å: {user.resources.ryabucks:,}"
                price_to_pay = ryabucks_price
            elif currency == "rbtc":
                if user.resources.rbtc.amount < rbtc_price:
                    return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RBTC. –ù—É–∂–Ω–æ: {rbtc_price}, –µ—Å—Ç—å: {user.resources.rbtc.amount}"
                price_to_pay = rbtc_price
            else:
                return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞"

            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            async with self.client.transaction() as tx:
                # –°–ø–∏—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
                if currency == "ryabucks":
                    new_ryabucks = user.resources.ryabucks - ryabucks_price
                    await self.user_repository.update_resources(
                        user_id=user_id,
                        updates={"ryabucks": new_ryabucks}
                    )
                elif currency == "rbtc":
                    new_rbtc = user.resources.rbtc.amount - rbtc_price
                    await self.user_repository.update_resources(
                        user_id=user_id,
                        updates={"rbtc": new_rbtc}
                    )

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∂–∏–≥–∞–Ω–∏–µ RBTC –≤ audit_log
                    await self._record_rbtc_burn(user_id, rbtc_price, f"license_upgrade_{license_type}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
                await self.client.execute_query(
                    table="user_licenses",
                    operation="upsert",
                    data={
                        "user_id": user_id,
                        "license_type": license_type,
                        "level": next_level,
                        "upgraded_at": datetime.now(timezone.utc).isoformat()
                    }
                )

            # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self.event_tracker.track_currency_spent(
                user_id=user_id,
                currency_type=currency,
                amount=price_to_pay,
                reason=f"license_upgrade_{license_type}"
            )

            significance = EventSignificance.IMPORTANT if license_type in [
                LicenseType.QUANTUM, LicenseType.POLITICAL, LicenseType.BANKER
            ] else EventSignificance.NORMAL

            await self.event_tracker.track_event(
                user_id=user_id,
                event_type=EventType.USER_LOGIN,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                data={
                    "action": "license_upgrade",
                    "license_type": license_type,
                    "new_level": next_level,
                    "price_paid": float(price_to_pay),
                    "currency": currency,
                    "timestamp": datetime.now(timezone.utc).isoformat()
                },
                significance=significance
            )

            logger.info(f"üìú –õ–∏—Ü–µ–Ω–∑–∏—è —É–ª—É—á—à–µ–Ω–∞ –¥–ª—è {user_id}: {license_type} –¥–æ —É—Ä–æ–≤–Ω—è {next_level}")

            level_benefit = config.get("level_benefits", {}).get(next_level, "")
            benefit_text = f"\nüéÅ –ù–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {level_benefit}" if level_benefit else ""

            return True, f"–õ–∏—Ü–µ–Ω–∑–∏—è '{config['name']}' —É–ª—É—á—à–µ–Ω–∞ –¥–æ —É—Ä–æ–≤–Ω—è {next_level}!{benefit_text}"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ {license_type} –¥–ª—è {user_id}: {e}")
            return False, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏"

    async def _record_rbtc_burn(self, user_id: int, amount: Decimal, reason: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å–∂–∏–≥–∞–Ω–∏–µ RBTC –≤ audit_log"""
        await self.event_tracker.track_event(
            user_id=user_id,
            event_type=EventType.RBTC_TRANSACTION,
            data={
                "type": "burn",
                "amount": float(amount),
                "reason": reason,
                "timestamp": datetime.now(timezone.utc).isoformat()
            },
            significance=EventSignificance.IMPORTANT
        )

    async def get_licenses_for_display(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        try:
            multipliers = await self.calculate_price_multipliers()
            current_licenses = await self.get_user_licenses(user_id)

            result = []

            for license_type, config in LICENSE_CONFIG.items():
                current_level = current_licenses.get(license_type, 0)

                if current_level >= config["max_level"]:
                    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
                    result.append({
                        "type": license_type,
                        "icon": config["icon"],
                        "name": config["name"],
                        "current_level": current_level,
                        "max_level": config["max_level"],
                        "ryabucks_price": "MAX",
                        "rbtc_price": "MAX",
                        "telegra_link": config["telegra_link"],
                        "is_max": True
                    })
                else:
                    # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
                    next_level = current_level + 1
                    ryabucks_price, rbtc_price = self.calculate_license_price(license_type, next_level, multipliers)

                    result.append({
                        "type": license_type,
                        "icon": config["icon"], 
                        "name": config["name"],
                        "current_level": current_level,
                        "max_level": config["max_level"],
                        "ryabucks_price": f"{ryabucks_price:,}",
                        "rbtc_price": f"{rbtc_price:.2f}",
                        "ryabucks_price_raw": ryabucks_price,
                        "rbtc_price_raw": float(rbtc_price),
                        "telegra_link": config["telegra_link"],
                        "is_max": False
                    })

            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return []

    async def check_license_requirement(self, user_id: int, action: str, required_level: int = 1) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è"""
        action_requirements = {
            "hire_specialist": (LicenseType.EMPLOYER, 1),
            "buy_animal": (LicenseType.FARMER, 1),
            "build_structure": (LicenseType.FARMER, 1), 
            "create_partnership": (LicenseType.PARTNER, 1),
            "trade_items": (LicenseType.MERCHANT, 1),
            "bank_operations": (LicenseType.BANKER, 1),
            "vote_proposal": (LicenseType.POLITICAL, 1),
            "horse_racing": (LicenseType.RACING, 1),
            "cockfight": (LicenseType.FIGHTING, 1),
            "quantum_research": (LicenseType.QUANTUM, 1),
            "start_expedition": (LicenseType.EXPEDITION, 1)
        }

        if action not in action_requirements:
            return True  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, —Ä–∞–∑—Ä–µ—à–∞–µ–º

        required_license, min_level = action_requirements[action]
        current_level = await self.get_license_level(user_id, required_license)

        return current_level >= max(min_level, required_level)


logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π LicenseService –∑–∞–≥—Ä—É–∂–µ–Ω")