# services/license_service.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
"""
License Service - –∏–¥–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
"""

import logging
from datetime import datetime, timezone
from typing import Optional, Tuple, Dict, List
from decimal import Decimal

from core.domain.entities import User
from core.ports.repositories import UserRepository
from services.event_tracker import get_event_tracker, EventType, EventSignificance
from adapters.database.supabase.client import get_supabase_client

logger = logging.getLogger(__name__)

class LicenseType:
    """–¢–∏–ø—ã –ª–∏—Ü–µ–Ω–∑–∏–π –≤ –∏–≥—Ä–µ"""
    EMPLOYER = "employer"
    FARMER = "farmer"
    PARTNER = "partner"
    MERCHANT = "merchant"
    BANKER = "banker"
    POLITICAL = "political"
    RACING = "racing"
    FIGHTING = "fighting"
    QUANTUM = "quantum"
    EXPEDITION = "expedition"

LICENSE_CONFIG = {
    LicenseType.EMPLOYER: {
        "name": "–õ–∏—Ü–µ–Ω–∑–∏—è –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è",
        "icon": "üíº",
        "base_price_ryabucks": 150,
        "base_price_rbtc": Decimal("1.5"),
        "max_level": 10,
        "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö",
        "telegra_link": "https://telegra.ph/Licenziya-Rabotodatelya-10-10",
    },
    LicenseType.FARMER: {
        "name": "–§–µ—Ä–º–µ—Ä—Å–∫–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "üè°",
        "base_price_ryabucks": 200,
        "base_price_rbtc": Decimal("2.0"),
        "max_level": 8,
        "description": "–ü–ª–æ—â–∞–¥—å —Ñ–µ—Ä–º—ã",
        "telegra_link": "https://telegra.ph/Fermerskaya-Licenziya-10-10",
    },
    LicenseType.PARTNER: {
        "name": "–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "üë•",
        "base_price_ryabucks": 400,
        "base_price_rbtc": Decimal("4.0"),
        "max_level": 5,
        "description": "–†–µ—Ñ–µ—Ä–∞–ª—ã",
        "telegra_link": "https://telegra.ph/Partnyerskaya-Licenziya-10-10",
    },
    LicenseType.MERCHANT: {
        "name": "–õ–∏—Ü–µ–Ω–∑–∏—è –ü—Ä–æ–¥–∞–≤—Ü–∞",
        "icon": "üç±",
        "base_price_ryabucks": 300,
        "base_price_rbtc": Decimal("3.0"),
        "max_level": 6,
        "description": "–¢–æ—Ä–≥–æ–≤–ª—è",
        "telegra_link": "https://telegra.ph/Licenziya-Prodavca-10-10",
    },
    LicenseType.BANKER: {
        "name": "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "üè¶",
        "base_price_ryabucks": 1000,
        "base_price_rbtc": Decimal("10.0"),
        "max_level": 4,
        "description": "–î–µ–ø–æ–∑–∏—Ç—ã",
        "telegra_link": "https://telegra.ph/Bankovskaya-Licenziya-10-10",
    },
    LicenseType.POLITICAL: {
        "name": "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "üèõÔ∏è",
        "base_price_ryabucks": 1000,
        "base_price_rbtc": Decimal("10.0"),
        "max_level": 3,
        "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        "telegra_link": "https://telegra.ph/Politicheskaya-Licenziya-10-10",
    },
    LicenseType.RACING: {
        "name": "–ì–æ–Ω–æ—á–Ω–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "üèá",
        "base_price_ryabucks": 800,
        "base_price_rbtc": Decimal("8.0"),
        "max_level": 5,
        "description": "–°–∫–∞—á–∫–∏",
        "telegra_link": "https://telegra.ph/Gonochnaya-Licenziya-10-10",
    },
    LicenseType.FIGHTING: {
        "name": "–ë–æ–π—Ü–æ–≤—Å–∫–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "ü•ä",
        "base_price_ryabucks": 600,
        "base_price_rbtc": Decimal("6.0"),
        "max_level": 5,
        "description": "–ë–æ–∏",
        "telegra_link": "https://telegra.ph/Bojcovskaya-Licenziya-10-10",
    },
    LicenseType.QUANTUM: {
        "name": "–ö–≤–∞–Ω—Ç–æ–≤–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "‚öõÔ∏è",
        "base_price_ryabucks": 1500,
        "base_price_rbtc": Decimal("15.0"),
        "max_level": 3,
        "description": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
        "telegra_link": "https://telegra.ph/Kvantovaya-Licenziya-10-10",
    },
    LicenseType.EXPEDITION: {
        "name": "–≠–∫—Å–ø–µ–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –õ–∏—Ü–µ–Ω–∑–∏—è",
        "icon": "üèïÔ∏è",
        "base_price_ryabucks": 500,
        "base_price_rbtc": Decimal("5.0"),
        "max_level": 5,
        "description": "–≠–∫—Å–ø–µ–¥–∏—Ü–∏–∏",
        "telegra_link": "https://telegra.ph/Ekspedicionnaya-Licenziya-10-10",
    }
}

class LicenseService:
    """–°–∏—Å—Ç–µ–º–∞ –ª–∏—Ü–µ–Ω–∑–∏–π - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""

    def __init__(self, user_repository: UserRepository):
        self.user_repository = user_repository
        self.event_tracker = None
        self.client = None
        self.INITIAL_BANK_RYABUCKS = Decimal("1050000000")
        self.TOTAL_RBTC_POOL = Decimal("18480000")
        self.SMOOTHING_COEFFICIENT = 0.7

    async def _ensure_dependencies(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        if not self.event_tracker:
            self.event_tracker = await get_event_tracker()
        if not self.client:
            self.client = await get_supabase_client()

    async def calculate_price_multipliers(self) -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã —Ü–µ–Ω"""
        try:
            await self._ensure_dependencies()

            pools = await self.client.execute_query(
                table="global_pools",
                operation="select"
            )

            total_bank_ryabucks = None

            for pool in pools:
                pool_name = pool.get("pool_name", "")
                if pool_name == "total_bank_ryabucks":
                    total_bank_ryabucks = Decimal(str(pool.get("ryabucks_amount", self.INITIAL_BANK_RYABUCKS)))

            if total_bank_ryabucks is None:
                total_bank_ryabucks = self.INITIAL_BANK_RYABUCKS

            ryabucks_multiplier = max(0.2, min(5.0, float(total_bank_ryabucks / self.INITIAL_BANK_RYABUCKS)))
            burned_rbtc = await self._get_total_burned_rbtc()
            burn_ratio = min(1.0, float(burned_rbtc / self.TOTAL_RBTC_POOL))
            rbtc_multiplier = max(0.1, 1.0 - (burn_ratio ** self.SMOOTHING_COEFFICIENT))

            return {
                "ryabucks": round(ryabucks_multiplier, 2),
                "rbtc": round(rbtc_multiplier, 2),
                "bank_ryabucks": float(total_bank_ryabucks),
                "burned_rbtc": float(burned_rbtc)
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}", exc_info=True)
            return {
                "ryabucks": 1.0,
                "rbtc": 1.0,
                "bank_ryabucks": float(self.INITIAL_BANK_RYABUCKS),
                "burned_rbtc": 0.0
            }

    async def _get_total_burned_rbtc(self) -> Decimal:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–∂–∂–µ–Ω–Ω—ã–µ RBTC"""
        try:
            stats = await self.client.execute_query(
                table="pool_statistics",
                operation="select",
                single=True
            )

            if stats and "total_rbtc_burned" in stats:
                return Decimal(str(stats.get("total_rbtc_burned", 0)))

            return Decimal("0")
        except:
            return Decimal("0")

    def calculate_license_price(self, license_type: str, level: int, multipliers: Dict[str, float]) -> Tuple[int, Decimal]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        if license_type not in LICENSE_CONFIG:
            return 0, Decimal("0")

        config = LICENSE_CONFIG[license_type]
        base_ryabucks = config["base_price_ryabucks"] * (2 ** (level - 1))
        base_rbtc = config["base_price_rbtc"] * (2 ** (level - 1))

        final_ryabucks = int(base_ryabucks * multipliers["ryabucks"])
        final_rbtc = base_rbtc * Decimal(str(multipliers["rbtc"]))

        return final_ryabucks, final_rbtc

    async def get_user_licenses(self, user_id: int) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self._ensure_dependencies()

            licenses_data = await self.client.execute_query(
                table="user_licenses",
                operation="select",
                filters={"user_id": user_id}
            )

            licenses = {}
            if licenses_data:
                for license_data in licenses_data:
                    licenses[license_data["license_type"]] = license_data["level"]

            return licenses

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π –¥–ª—è {user_id}: {e}", exc_info=True)
            return {}

    async def get_license_level(self, user_id: int, license_type: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        licenses = await self.get_user_licenses(user_id)
        return licenses.get(license_type, 0)

    async def upgrade_license(self, user_id: int, license_type: str, currency: str) -> Tuple[bool, str]:
        """–£–ª—É—á—à–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self._ensure_dependencies()

            if license_type not in LICENSE_CONFIG:
                return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏"

            config = LICENSE_CONFIG[license_type]
            current_level = await self.get_license_level(user_id, license_type)
            next_level = current_level + 1

            if next_level > config["max_level"]:
                return False, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({config['max_level']})"

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
            multipliers = await self.calculate_price_multipliers()
            ryabucks_price, rbtc_price = self.calculate_license_price(license_type, next_level, multipliers)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_repository.get_by_id(user_id)
            if not user:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É –∏ –±–∞–ª–∞–Ω—Å
            if currency == "ryabucks":
                if user.resources.ryabucks < ryabucks_price:
                    return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤. –ù—É–∂–Ω–æ: {ryabucks_price:,}, –µ—Å—Ç—å: {user.resources.ryabucks:,}"
                price_to_pay = ryabucks_price
            elif currency == "rbtc":
                if user.resources.rbtc.amount < rbtc_price:
                    return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RBTC. –ù—É–∂–Ω–æ: {float(rbtc_price):.2f}, –µ—Å—Ç—å: {float(user.resources.rbtc.amount):.2f}"
                price_to_pay = rbtc_price
            else:
                return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞"

            # –°–ø–∏—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
            if currency == "ryabucks":
                new_ryabucks = user.resources.ryabucks - ryabucks_price
                await self.user_repository.update_resources(
                    user_id=user_id,
                    updates={"ryabucks": new_ryabucks}
                )
            elif currency == "rbtc":
                new_rbtc = user.resources.rbtc.amount - rbtc_price
                await self.user_repository.update_resources(
                    user_id=user_id,
                    updates={"rbtc": float(new_rbtc)}
                )

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∂–∏–≥–∞–Ω–∏–µ RBTC
                await self._record_rbtc_burn(user_id, rbtc_price, f"license_{license_type}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è
            existing_license = await self.client.execute_query(
                table="user_licenses",
                operation="select",
                filters={"user_id": user_id, "license_type": license_type},
                single=True
            )

            if existing_license:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
                await self.client.execute_query(
                    table="user_licenses",
                    operation="update",
                    data={"level": next_level},
                    filters={"user_id": user_id, "license_type": license_type}
                )
            else:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
                await self.client.execute_query(
                    table="user_licenses",
                    operation="insert",
                    data={
                        "user_id": user_id,
                        "license_type": license_type,
                        "level": next_level
                    }
                )

            # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            if self.event_tracker:
                await self.event_tracker.track_currency_spent(
                    user_id=user_id,
                    currency_type=currency,
                    amount=float(price_to_pay) if currency == "rbtc" else price_to_pay,
                    reason=f"license_{license_type}"
                )

            logger.info(f"üìú –õ–∏—Ü–µ–Ω–∑–∏—è —É–ª—É—á—à–µ–Ω–∞ –¥–ª—è {user_id}: {license_type} –¥–æ —É—Ä–æ–≤–Ω—è {next_level}")

            return True, f"‚úÖ {config['name']} —É–ª—É—á—à–µ–Ω–∞ –¥–æ —É—Ä–æ–≤–Ω—è {next_level}!"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ {license_type} –¥–ª—è {user_id}: {e}", exc_info=True)
            return False, f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

    async def _record_rbtc_burn(self, user_id: int, amount: Decimal, reason: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å–∂–∏–≥–∞–Ω–∏–µ RBTC"""
        try:
            stats = await self.client.execute_query(
                table="pool_statistics",
                operation="select",
                single=True
            )

            if stats:
                current_burned = Decimal(str(stats.get("total_rbtc_burned", 0)))
                new_burned = current_burned + amount

                await self.client.execute_query(
                    table="pool_statistics",
                    operation="update",
                    data={"total_rbtc_burned": float(new_burned)},
                    filters={"id": stats["id"]}
                )
            else:
                await self.client.execute_query(
                    table="pool_statistics",
                    operation="insert",
                    data={"total_rbtc_burned": float(amount)}
                )

            logger.info(f"üî• –°–æ–∂–∂–µ–Ω–æ {amount} RBTC ({reason})")

        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–∂–∏–≥–∞–Ω–∏–µ RBTC: {e}")

    async def get_licenses_for_display(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            multipliers = await self.calculate_price_multipliers()
            current_licenses = await self.get_user_licenses(user_id)

            result = []

            for license_type, config in LICENSE_CONFIG.items():
                current_level = current_licenses.get(license_type, 0)

                if current_level >= config["max_level"]:
                    result.append({
                        "type": license_type,
                        "icon": config["icon"],
                        "name": config["name"],
                        "current_level": current_level,
                        "max_level": config["max_level"],
                        "ryabucks_price": "MAX",
                        "rbtc_price": "MAX",
                        "telegra_link": config["telegra_link"],
                        "is_max": True
                    })
                else:
                    next_level = current_level + 1
                    ryabucks_price, rbtc_price = self.calculate_license_price(license_type, next_level, multipliers)

                    result.append({
                        "type": license_type,
                        "icon": config["icon"],
                        "name": config["name"],
                        "current_level": current_level,
                        "max_level": config["max_level"],
                        "ryabucks_price": f"{ryabucks_price:,}",
                        "rbtc_price": f"{float(rbtc_price):.2f}",
                        "ryabucks_price_raw": ryabucks_price,
                        "rbtc_price_raw": float(rbtc_price),
                        "telegra_link": config["telegra_link"],
                        "is_max": False
                    })

            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π: {e}", exc_info=True)
            return []

    async def check_license_requirement(self, user_id: int, action: str, required_level: int = 1) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        action_requirements = {
            "hire_specialist": (LicenseType.EMPLOYER, 1),
            "buy_animal": (LicenseType.FARMER, 1),
            "build_structure": (LicenseType.FARMER, 1),
            "create_partnership": (LicenseType.PARTNER, 1),
            "trade_items": (LicenseType.MERCHANT, 1),
            "bank_operations": (LicenseType.BANKER, 1),
            "vote_proposal": (LicenseType.POLITICAL, 1),
            "horse_racing": (LicenseType.RACING, 1),
            "cockfight": (LicenseType.FIGHTING, 1),
            "quantum_research": (LicenseType.QUANTUM, 1),
            "start_expedition": (LicenseType.EXPEDITION, 1)
        }

        if action not in action_requirements:
            return True

        required_license, min_level = action_requirements[action]
        current_level = await self.get_license_level(user_id, required_license)

        return current_level >= max(min_level, required_level)


logger.info("‚úÖ LicenseService –∑–∞–≥—Ä—É–∂–µ–Ω (–ò–î–ï–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)")