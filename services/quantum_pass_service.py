# services/quantum_pass_service.py
import logging
from decimal import Decimal
from datetime import datetime, timedelta, timezone
from typing import Tuple, Optional
from adapters.database.supabase.client import get_supabase_client
from config.settings import settings

logger = logging.getLogger(__name__)


class QuantumPassService:
    def __init__(self):
        self.client = None

        # –¶–µ–Ω—ã Quantum Pass –≤ RBTC
        self.PRICES = {
            '1_month': 35,
            '3_months': 84,
            '6_months': 168,
            '1_year': 294
        }

        # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
        self.DURATIONS = {
            '1_month': 30,
            '3_months': 90,
            '6_months': 180,
            '1_year': 365
        }

    async def _ensure_client(self):
        if not self.client:
            self.client = await get_supabase_client()

    async def get_quantum_pass_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Q-Pass"""
        try:
            await self._ensure_client()

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ Python
            all_users = await self.client.execute_query(
                table="users",
                operation="select",
                columns=["user_id", "quantum_pass_until"]
            )

            if not all_users:
                return {'total_active_qpass_users': 0}

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö Q-Pass –≤ Python
            now = datetime.now(timezone.utc)
            active_count = 0

            for user in all_users:
                qpass_until = user.get('quantum_pass_until')
                if qpass_until:
                    try:
                        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
                        if isinstance(qpass_until, str):
                            expiry = datetime.fromisoformat(qpass_until.replace('Z', '+00:00'))
                        else:
                            expiry = qpass_until

                        # –î–æ–±–∞–≤–ª—è–µ–º timezone –µ—Å–ª–∏ –Ω–µ—Ç
                        if expiry.tzinfo is None:
                            expiry = expiry.replace(tzinfo=timezone.utc)

                        if expiry > now:
                            active_count += 1
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('user_id')}: {e}")
                        continue

            return {'total_active_qpass_users': active_count}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Q-Pass: {e}")
            return {'total_active_qpass_users': 0}

    async def get_user_quantum_pass_info(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Q-Pass –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self._ensure_client()

            user = await self.client.execute_query(
                table="users",
                operation="select",
                columns=["quantum_pass_until", "rbtc"],
                filters={"user_id": user_id},
                single=True
            )

            if not user:
                return {
                    'has_quantum_pass': False,
                    'time_left': None,
                    'user_rbtc': 0
                }

            quantum_pass_until = user.get('quantum_pass_until')
            has_quantum_pass = False
            time_left = None

            if quantum_pass_until:
                try:
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ timezone
                    if isinstance(quantum_pass_until, str):
                        # –£–±–∏—Ä–∞–µ–º 'Z' –∏ –¥–æ–±–∞–≤–ª—è–µ–º +00:00 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                        expiry_date = datetime.fromisoformat(quantum_pass_until.replace('Z', '+00:00'))
                    else:
                        expiry_date = quantum_pass_until

                    # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ–±–µ –¥–∞—Ç—ã —Å timezone
                    if expiry_date.tzinfo is None:
                        expiry_date = expiry_date.replace(tzinfo=timezone.utc)

                    now = datetime.now(timezone.utc)

                    if expiry_date > now:
                        has_quantum_pass = True
                        time_delta = expiry_date - now

                        days = time_delta.days
                        hours, remainder = divmod(time_delta.seconds, 3600)
                        minutes, _ = divmod(remainder, 60)

                        time_left = {
                            'days': days,
                            'hours': hours,
                            'minutes': minutes,
                            'total_seconds': time_delta.total_seconds()
                        }
                except Exception as date_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã Q-Pass: {date_error}, –∑–Ω–∞—á–µ–Ω–∏–µ: {quantum_pass_until}")

            return {
                'has_quantum_pass': has_quantum_pass,
                'time_left': time_left,
                'user_rbtc': Decimal(str(user.get('rbtc', 0)))
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Q-Pass –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                'has_quantum_pass': False,
                'time_left': None,
                'user_rbtc': Decimal('0')
            }

    def format_time_left(self, time_left: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è"""
        if not time_left:
            return "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"

        days = time_left['days']
        hours = time_left['hours']
        minutes = time_left['minutes']

        if days > 0:
            if hours > 0:
                return f"{days} –¥–Ω. {hours} —á."
            else:
                return f"{days} –¥–Ω."
        elif hours > 0:
            if minutes > 0:
                return f"{hours} —á. {minutes} –º–∏–Ω."
            else:
                return f"{hours} —á."
        else:
            return f"{minutes} –º–∏–Ω."

    async def purchase_quantum_pass(self, user_id: int, duration_key: str) -> Tuple[bool, str]:
        """–ü–æ–∫—É–ø–∫–∞ Quantum Pass"""
        try:
            await self._ensure_client()

            if duration_key not in self.PRICES:
                return False, "–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"

            price = self.PRICES[duration_key]
            duration_days = self.DURATIONS[duration_key]

            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.client.execute_query(
                table="users",
                operation="select",
                columns=["rbtc", "quantum_pass_until"],
                filters={"user_id": user_id},
                single=True
            )

            if not user:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

            user_rbtc = Decimal(str(user.get('rbtc', 0)))

            if user_rbtc < price:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RBTC. –ù—É–∂–Ω–æ: {price} üí†, –µ—Å—Ç—å: {user_rbtc:.4f} üí†"

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º timezone-aware datetime
            current_expiry = user.get('quantum_pass_until')
            now = datetime.now(timezone.utc)

            if current_expiry:
                try:
                    if isinstance(current_expiry, str):
                        current_expiry_date = datetime.fromisoformat(current_expiry.replace('Z', '+00:00'))
                    else:
                        current_expiry_date = current_expiry

                    if current_expiry_date.tzinfo is None:
                        current_expiry_date = current_expiry_date.replace(tzinfo=timezone.utc)

                    if current_expiry_date > now:
                        # –ü—Ä–æ–¥–ª–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
                        new_expiry = current_expiry_date + timedelta(days=duration_days)
                    else:
                        # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                        new_expiry = now + timedelta(days=duration_days)
                except Exception:
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                    new_expiry = now + timedelta(days=duration_days)
            else:
                # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                new_expiry = now + timedelta(days=duration_days)

            # –°–ø–∏—Å–∞—Ç—å RBTC (—Å–∂–µ—á—å)
            new_rbtc = float(user_rbtc - price)

            # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.client.execute_query(
                table="users",
                operation="update",
                data={
                    "rbtc": new_rbtc,
                    "quantum_pass_until": new_expiry.isoformat(),
                    "last_active": datetime.now(timezone.utc).isoformat()
                },
                filters={"user_id": user_id}
            )

            # –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∞—É–¥–∏—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            try:
                await self.client.execute_query(
                    table="bank_transactions",
                    operation="insert",
                    data={
                        "user_id": user_id,
                        "transaction_type": "quantum_pass_purchase",
                        "amount_from": float(price),
                        "amount_to": 0,  # –°–∂–∏–≥–∞–Ω–∏–µ
                        "currency_from": "rbtc",
                        "currency_to": "burned",
                        "exchange_rate": 1
                    }
                )
            except Exception as audit_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏—Ç –ø–æ–∫—É–ø–∫–∏ Q-Pass: {audit_error}")

            duration_text = {
                '1_month': '1 –º–µ—Å—è—Ü',
                '3_months': '3 –º–µ—Å—è—Ü–∞',
                '6_months': '6 –º–µ—Å—è—Ü–µ–≤',
                '1_year': '1 –≥–æ–¥'
            }.get(duration_key, duration_key)

            expiry_formatted = new_expiry.strftime("%d.%m.%Y %H:%M")

            return True, f"‚úÖ Quantum Pass —É—Å–ø–µ—à–Ω–æ {'–ø—Ä–æ–¥–ª–µ–Ω' if current_expiry else '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'} –Ω–∞ {duration_text}!\n\nüí† –°–ø–∏—Å–∞–Ω–æ: {price} RBTC\n‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry_formatted}"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ Q-Pass –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
quantum_pass_service = QuantumPassService()
