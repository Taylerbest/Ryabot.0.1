# services/blockchain_service.py
"""
–°–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª—ã
"""

import logging
import hashlib
import json
import time
from typing import Dict, Any, Optional
from datetime import datetime
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from adapters.database.supabase.client import get_supabase_client
from config.settings import settings

logger = logging.getLogger(__name__)

class BlockchainService:
    """–°–µ—Ä–≤–∏—Å –±–ª–æ–∫—á–µ–π–Ω –∞—É–¥–∏—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.client = None
        
    async def _ensure_client(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        if not self.client:
            self.client = await get_supabase_client()
    
    def _calculate_hash(self, prev_hash: str, payload: Dict[str, Any], timestamp: float) -> str:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à –±–ª–æ–∫–∞"""
        data = f"{prev_hash}{json.dumps(payload, sort_keys=True)}{timestamp}"
        return hashlib.sha256(data.encode()).hexdigest()
    
    async def _get_last_hash(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ö–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞"""
        try:
            await self._ensure_client()
            
            last_entry = await self.client.execute_query(
                table="audit_log",
                operation="select",
                columns=["hash"],
                limit=1
            )
            
            if last_entry:
                return last_entry[0]['hash']
            return "genesis"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–µ—à–∞: {e}")
            return "genesis"
    
    def _format_blockchain_message(self, action_type: str, username: str, payload: Dict[str, Any], 
                                 current_hash: str, prev_hash: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫—á–µ–π–Ω –∫–∞–Ω–∞–ª–∞"""
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        action_emojis = {
            "SHARD_SOLD": "üíé",
            "CITIZEN_REGISTERED": "üèõÔ∏è",
            "LICENSE_PURCHASED": "üìú", 
            "WORKER_HIRED": "üë∑",
            "WORK_COMPLETED": "üíº",
            "SPECIALIST_TRAINED": "üéì",
            "BUILDING_BUILT": "üèóÔ∏è",
            "ANIMAL_BOUGHT": "üêî",
            "GOLDEN_EGG_FOUND": "ü•ö",
            "RBTC_EARNED": "üí†",
            "EXPEDITION_COMPLETED": "üó∫Ô∏è",
            "ACHIEVEMENT_UNLOCKED": "üèÜ"
        }
        
        emoji = action_emojis.get(action_type, "‚ö°")
        
        # –î–µ—Ç–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
        details = []
        if action_type == "SHARD_SOLD":
            details.append(f"–¶–µ–Ω–∞: {payload.get('price', 0)} {payload.get('currency', '—Ä—è–±–∞–∫—Å–æ–≤')}")
        elif action_type == "CITIZEN_REGISTERED":
            details.append(f"–°–±–æ—Ä: {payload.get('fee_paid', 0)} —Ä—è–±–∞–∫—Å–æ–≤")
        elif action_type == "LICENSE_PURCHASED":
            details.append(f"–¢–∏–ø: {payload.get('license_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} LV{payload.get('level', 1)}")
            details.append(f"–¶–µ–Ω–∞: {payload.get('price', 0)} —Ä—è–±–∞–∫—Å–æ–≤")
        elif action_type == "WORKER_HIRED":
            details.append(f"–ò–º—è: {payload.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
            details.append(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {payload.get('cost', 0)} —Ä—è–±–∞–∫—Å–æ–≤")
        elif action_type == "WORK_COMPLETED":
            details.append(f"–ó–∞–¥–∞–Ω–∏–µ: {payload.get('task', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            details.append(f"–ù–∞–≥—Ä–∞–¥–∞: {payload.get('reward_money', 0)} —Ä—è–±–∞–∫—Å–æ–≤")
        
        detail_text = " | ".join(details) if details else ""
        
        return f"""
{emoji} **{action_type.replace('_', ' ').title()}**

üë§ –ò–≥—Ä–æ–∫: @{username}
üìù –î–µ—Ç–∞–ª–∏: {detail_text}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}

üîó Hash: `{current_hash[:16]}...`
üîó Prev: `{prev_hash[:16]}...`
        """.strip()
    
    def _format_celebration_message(self, action_type: str, username: str, payload: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        
        if action_type == "CITIZEN_REGISTERED":
            return f"""
üéâ **–ù–û–í–´–ô –ñ–ò–¢–ï–õ–¨ –û–°–¢–†–û–í–ê!**

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!
üèùÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –æ—Å—Ç—Ä–æ–≤–∞ Ryabot!

üéØ –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å:
‚Ä¢ üë∑ –ù–∞–π–º–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ
‚Ä¢ üêî –ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Ñ–µ—Ä–º—É  
‚Ä¢ üí† –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ RBTC

#–ù–æ–≤—ã–π–ñ–∏—Ç–µ–ª—å #RyabotIsland
            """.strip()
            
        elif action_type == "GOLDEN_EGG_FOUND":
            return f"""
ü•ö‚ú® **–ó–û–õ–û–¢–û–ï –Ø–ô–¶–û –ù–ê–ô–î–ï–ù–û!** ‚ú®ü•ö

üéä @{username} –Ω–∞—à—ë–ª –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –∑–æ–ª–æ—Ç–æ–µ —è–π—Ü–æ!
üí∞ –ù–∞–≥—Ä–∞–¥–∞: {payload.get('rbtc_reward', '0')} RBTC

üçÄ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∫–∏: 0.05% 
üèÜ –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è —É–¥–∞—á–∞!

#–ó–æ–ª–æ—Ç–æ–µ–Ø–π—Ü–æ #–õ–µ–≥–µ–Ω–¥–∞—Ä–∫–∞ #RyabotIsland
            """.strip()
            
        elif action_type == "EXPEDITION_COMPLETED":
            difficulty = payload.get('difficulty', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
            return f"""
üó∫Ô∏è **–≠–ö–°–ü–ï–î–ò–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!**

‚öîÔ∏è @{username} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é!
üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty.title()}
üíé –ù–∞–π–¥–µ–Ω–æ RBTC: {payload.get('rbtc_found', '0')}
üéí –ü—Ä–µ–¥–º–µ—Ç—ã: {payload.get('items_found', 0)}

#–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è #RyabotIsland
            """.strip()
            
        else:
            return f"üéâ @{username} —Å–æ–≤–µ—Ä—à–∏–ª {action_type.replace('_', ' ').lower()}!"
    
    async def log_action(self, action_type: str, user_id: int, username: str, 
                        payload: Dict[str, Any], significance: int = 0) -> Optional[int]:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–ª–æ–∫—á–µ–π–Ω
        
        Args:
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payload: –î–∞–Ω–Ω—ã–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏
            significance: –ó–Ω–∞—á–∏–º–æ—Å—Ç—å (0-–æ–±—ã—á–Ω–æ–µ, 1-–≤–∞–∂–Ω–æ–µ, 2-—ç–ø–∏—á–µ—Å–∫–æ–µ, 3-–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ)
        
        Returns:
            ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            await self._ensure_client()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–µ—à
            prev_hash = await self._get_last_hash()
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ö–µ—à
            timestamp = time.time()
            current_hash = self._calculate_hash(prev_hash, payload, timestamp)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            audit_data = {
                "user_id": user_id,
                "action_type": action_type,
                "payload": payload,
                "hash": current_hash,
                "prev_hash": prev_hash,
                "significance": significance,
                "created_at": datetime.now().isoformat()
            }
            
            result = await self.client.execute_query(
                table="audit_log",
                operation="insert",
                data=audit_data,
                single=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –∏—Å—Ç–æ—Ä–∏–∏ (–≤—Å–µ —Å–æ–±—ã—Ç–∏—è)
            blockchain_msg = None
            bot = Bot(token=settings.BOT_TOKEN)
            
            try:
                if settings.HISTORY_CHANNEL_ID:
                    blockchain_message = self._format_blockchain_message(
                        action_type, username, payload, current_hash, prev_hash
                    )
                    
                    blockchain_msg = await bot.send_message(
                        chat_id=settings.HISTORY_CHANNEL_ID,
                        text=blockchain_message,
                        parse_mode="Markdown"
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
                    if result and blockchain_msg:
                        await self.client.execute_query(
                            table="audit_log", 
                            operation="update",
                            data={"tg_message_id": blockchain_msg.message_id},
                            filters={"id": result['id']}
                        )
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª (—Ç–æ–ª—å–∫–æ —ç–ø–∏—á–µ—Å–∫–∏–µ –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ)
            try:
                if significance >= 2 and settings.ISLAND_CHANNEL_ID:
                    celebration_message = self._format_celebration_message(
                        action_type, username, payload
                    )
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üîç –î–µ—Ç–∞–ª–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ", 
                            url=blockchain_msg.link if blockchain_msg else "https://t.me/ryabot_history"
                        )]
                    ])
                    
                    await bot.send_message(
                        chat_id=settings.ISLAND_CHANNEL_ID,
                        message_thread_id=1,  # General topic
                        text=celebration_message,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {e}")
            
            logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ {action_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ")
            return blockchain_msg.message_id if blockchain_msg else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
blockchain_service = BlockchainService()