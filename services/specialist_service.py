# services/specialist_service.py
"""
Specialist Service - —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–π–º–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ (–≤–µ—Ä—Å–∏—è GDD)
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å —ç–Ω–µ—Ä–≥–∏–µ–π, –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏ –∏ EventTracker
"""

import logging
from datetime import datetime, timezone, timedelta
from typing import Optional, List, Dict, Any, Tuple
from decimal import Decimal
from enum import Enum

from core.domain.entities import User, Specialist
from core.ports.repositories import UserRepository
from services.event_tracker import get_event_tracker, EventType, EventSignificance
from services.license_service import LicenseService, LicenseType
from services.energy_service import EnergyService
from adapters.database.supabase.client import get_supabase_client

logger = logging.getLogger(__name__)

class SpecialistType(Enum):
    """–¢–∏–ø—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ GDD"""
    LABORER = "laborer"           # –†–∞–±–æ—á–∏–π üôç‚Äç‚ôÇÔ∏è
    FARMER = "farmer"             # –§–µ—Ä–º–µ—Ä üë©‚Äçüåæ
    BUILDER = "builder"           # –°—Ç—Ä–æ–∏—Ç–µ–ª—å üë∑
    COOK = "cook"                 # –ü–æ–≤–∞—Ä üßë‚Äçüç≥
    FISHERMAN = "fisherman"       # –†—ã–±–∞–∫ üé£
    FORESTER = "forester"         # –õ–µ—Å–Ω–∏–∫ üë®‚Äçüöí
    SCIENTIST = "scientist"       # –£—á—ë–Ω—ã–π üßë‚Äçüî¨
    Q_SOLDIER = "q_soldier"       # Q-–°–æ–ª–¥–∞—Ç üíÇ
    DOCTOR = "doctor"             # –î–æ–∫—Ç–æ—Ä üßë‚Äç‚öïÔ∏è
    TEACHER = "teacher"           # –£—á–∏—Ç–µ–ª—å üßë‚Äçüè´

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ GDD
SPECIALIST_CONFIG = {
    SpecialistType.LABORER: {
        "name": "–†–∞–±–æ—á–∏–π",
        "icon": "üôç‚Äç‚ôÇÔ∏è",
        "base_price_ryabucks": 50,
        "base_price_experience": 10,
        "energy_cost": 5,
        "license_required": LicenseType.EMPLOYER,
        "license_level": 1,
        "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á",
        "work_locations": ["city", "farm", "construction"],
        "base_income": {"min": 10, "max": 20},
        "training_time_hours": 5,
        "expedition_suitable": False,
        "max_hp": 30,
        "base_stats": {
            "attack": 25,
            "defense": 30, 
            "hp": 30,
            "cost_rbtc": 0.2,
            "efficiency": 80,
            "income_min": 10,
            "income_max": 20,
            "healing_cost": 40,
            "healing_time": 4
        }
    },
    SpecialistType.FARMER: {
        "name": "–§–µ—Ä–º–µ—Ä", 
        "icon": "üë©‚Äçüåæ",
        "base_price_ryabucks": 75,
        "base_price_experience": 15,
        "energy_cost": 3,
        "license_required": LicenseType.FARMER,
        "license_level": 1,
        "description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤—É –∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ–≤–æ–¥—Å—Ç–≤—É",
        "work_locations": ["farm", "garden", "stable"],
        "base_income": {"min": 15, "max": 30},
        "training_time_hours": 10,
        "expedition_suitable": False,
        "max_hp": 42,
        "base_stats": {
            "attack": 20,
            "defense": 30,
            "hp": 42,
            "cost_rbtc": 0.35,
            "efficiency": 180,
            "income_min": 8,
            "income_max": 16,
            "healing_cost": 40,
            "healing_time": 4
        }
    },
    SpecialistType.BUILDER: {
        "name": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å",
        "icon": "üë∑", 
        "base_price_ryabucks": 100,
        "base_price_experience": 20,
        "energy_cost": 5,
        "license_required": LicenseType.FARMER, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–µ—Ä–º–µ—Ä—Å–∫—É—é –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        "license_level": 2,
        "description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –≤–æ–∑–≤–µ–¥–µ–Ω–∏—é –∏ —Ä–µ–º–æ–Ω—Ç—É –∑–¥–∞–Ω–∏–π",
        "work_locations": ["construction", "city", "buildings"],
        "base_income": {"min": 20, "max": 35},
        "training_time_hours": 15,
        "expedition_suitable": False,
        "max_hp": 53,
        "base_stats": {
            "attack": 35,
            "defense": 40,
            "hp": 53,
            "cost_rbtc": 0.5,
            "efficiency": 150,
            "income_min": 15,
            "income_max": 25,
            "healing_cost": 60,
            "healing_time": 6
        }
    },
    SpecialistType.COOK: {
        "name": "–ü–æ–≤–∞—Ä",
        "icon": "üßë‚Äçüç≥",
        "base_price_ryabucks": 60,
        "base_price_experience": 12,
        "energy_cost": 3,
        "license_required": LicenseType.MERCHANT,
        "license_level": 1,
        "description": "–ú–∞—Å—Ç–µ—Ä –∫—É–ª–∏–Ω–∞—Ä–∏–∏ –∏ –ø–∏—â–µ–≤–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
        "work_locations": ["kitchen", "restaurant", "farm"],
        "base_income": {"min": 10, "max": 30},
        "training_time_hours": 5,
        "expedition_suitable": False,
        "max_hp": 46,
        "base_stats": {
            "attack": 20,
            "defense": 25,
            "hp": 46,
            "cost_rbtc": 0.3,
            "efficiency": 300,
            "income_min": 5,
            "income_max": 10,
            "healing_cost": 30,
            "healing_time": 3
        }
    },
    SpecialistType.FISHERMAN: {
        "name": "–†—ã–±–∞–∫",
        "icon": "üé£",
        "base_price_ryabucks": 85,
        "base_price_experience": 18,
        "energy_cost": 4,
        "license_required": LicenseType.EMPLOYER,
        "license_level": 2,
        "description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–æ—Ä—Å–∫–∏–º –∏ —Ä–µ—á–Ω—ã–º –ø—Ä–æ–º—ã—Å–ª–∞–º",
        "work_locations": ["sea", "river", "fishing"],
        "base_income": {"min": 25, "max": 40},
        "training_time_hours": 25,
        "expedition_suitable": False,
        "max_hp": 45,
        "base_stats": {
            "attack": 30,
            "defense": 50,
            "hp": 45,
            "cost_rbtc": 0.8,
            "efficiency": 60,
            "income_min": 25,
            "income_max": 40,
            "healing_cost": 80,
            "healing_time": 8
        }
    },
    SpecialistType.FORESTER: {
        "name": "–õ–µ—Å–Ω–∏–∫",
        "icon": "üë®‚Äçüöí",
        "base_price_ryabucks": 90,
        "base_price_experience": 20,
        "energy_cost": 4,
        "license_required": LicenseType.EMPLOYER,
        "license_level": 2,
        "description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ª–µ—Å–æ–∑–∞–≥–æ—Ç–æ–≤–∫–µ –∏ –æ—Ö—Ä–∞–Ω–µ –ø—Ä–∏—Ä–æ–¥—ã",
        "work_locations": ["forest", "lumber", "nature"],
        "base_income": {"min": 20, "max": 35},
        "training_time_hours": 30,
        "expedition_suitable": True,
        "max_hp": 55,
        "base_stats": {
            "attack": 35,
            "defense": 50,
            "hp": 55,
            "cost_rbtc": 2.0,
            "efficiency": 100,
            "income_min": 20,
            "income_max": 35,
            "healing_cost": 60,
            "healing_time": 6
        }
    },
    SpecialistType.SCIENTIST: {
        "name": "–£—á—ë–Ω—ã–π",
        "icon": "üßë‚Äçüî¨",
        "base_price_ryabucks": 180,
        "base_price_experience": 50,
        "energy_cost": 6,
        "license_required": LicenseType.QUANTUM,
        "license_level": 1,
        "description": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
        "work_locations": ["laboratory", "research", "quantum"],
        "base_income": {"min": 30, "max": 55},
        "training_time_hours": 30,
        "expedition_suitable": False,
        "max_hp": 42,
        "base_stats": {
            "attack": 30,
            "defense": 30,
            "hp": 42,
            "cost_rbtc": 3.0,
            "efficiency": 120,
            "income_min": 12,
            "income_max": 24,
            "healing_cost": 40,
            "healing_time": 4
        }
    },
    SpecialistType.Q_SOLDIER: {
        "name": "Q-–°–æ–ª–¥–∞—Ç",
        "icon": "üíÇ",
        "base_price_ryabucks": 400,
        "base_price_experience": 100,
        "energy_cost": 15,
        "license_required": LicenseType.EXPEDITION,
        "license_level": 3,
        "description": "–≠–ª–∏—Ç–Ω—ã–π –±–æ–µ—Ü —Å –∫–≤–∞–Ω—Ç–æ–≤—ã–º –æ—Å–Ω–∞—â–µ–Ω–∏–µ–º",
        "work_locations": ["military", "expeditions", "combat"],
        "base_income": {"min": 50, "max": 80},
        "training_time_hours": 40,
        "expedition_suitable": True,
        "max_hp": 63,
        "base_stats": {
            "attack": 60,
            "defense": 55,
            "hp": 63,
            "cost_rbtc": 0.5,
            "efficiency": 50,
            "income_min": 35,
            "income_max": 50,
            "healing_cost": 80,
            "healing_time": 8
        }
    },
    SpecialistType.DOCTOR: {
        "name": "–î–æ–∫—Ç–æ—Ä",
        "icon": "üßë‚Äç‚öïÔ∏è",
        "base_price_ryabucks": 150,
        "base_price_experience": 40,
        "energy_cost": 5,
        "license_required": LicenseType.EMPLOYER,
        "license_level": 3,
        "description": "–ú–µ–¥–∏–∫ –¥–ª—è –ª–µ—á–µ–Ω–∏—è —Ä–∞–Ω–µ–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "work_locations": ["hospital", "medical", "clinic"],
        "base_income": {"min": 15, "max": 30},
        "training_time_hours": 10,
        "expedition_suitable": False,
        "max_hp": 58,
        "base_stats": {
            "attack": 25,
            "defense": 35,
            "hp": 58,
            "cost_rbtc": 0.8,
            "efficiency": 200,
            "income_min": 8,
            "income_max": 15,
            "healing_cost": 50,
            "healing_time": 5
        }
    },
    SpecialistType.TEACHER: {
        "name": "–£—á–∏—Ç–µ–ª—å",
        "icon": "üßë‚Äçüè´",
        "base_price_ryabucks": 120,
        "base_price_experience": 30,
        "energy_cost": 4,
        "license_required": LicenseType.EMPLOYER,
        "license_level": 2,
        "description": "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "work_locations": ["academy", "school", "training"],
        "base_income": {"min": 20, "max": 40},
        "training_time_hours": 12,
        "expedition_suitable": False,
        "max_hp": 40,
        "base_stats": {
            "attack": 30,
            "defense": 30,
            "hp": 40,
            "cost_rbtc": 1.2,
            "efficiency": 150,
            "income_min": 10,
            "income_max": 20,
            "healing_cost": 45,
            "healing_time": 4
        }
    }
}

class SpecialistService:
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ (–≤–µ—Ä—Å–∏—è GDD)"""

    def __init__(self, user_repository: UserRepository):
        self.user_repository = user_repository
        self.license_service = None
        self.energy_service = None
        self.event_tracker = None
        self.client = None

    async def _ensure_dependencies(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        if not self.license_service:
            self.license_service = LicenseService(self.user_repository)
        if not self.energy_service:
            self.energy_service = EnergyService(self.user_repository)
        if not self.event_tracker:
            self.event_tracker = await get_event_tracker()
        if not self.client:
            self.client = await get_supabase_client()

    async def get_available_specialists(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –Ω–∞–π–º–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"""
        try:
            await self._ensure_dependencies()

            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_licenses = await self.license_service.get_user_licenses(user_id)

            # –ü–æ–ª—É—á–∞–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã —Ü–µ–Ω
            multipliers = await self.license_service.calculate_price_multipliers()

            available = []

            for spec_type, config in SPECIALIST_CONFIG.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
                license_type = config["license_required"]
                required_level = config["license_level"]
                current_level = user_licenses.get(license_type.value, 0)

                if current_level >= required_level:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Å –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–æ–º
                    base_price = config["base_price_ryabucks"]
                    final_price = int(base_price * multipliers["ryabucks"])

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤ RBTC –µ—Å–ª–∏ –µ—Å—Ç—å
                    rbtc_price = None
                    if "cost_rbtc" in config["base_stats"]:
                        base_rbtc = Decimal(str(config["base_stats"]["cost_rbtc"]))
                        final_rbtc = base_rbtc * Decimal(str(multipliers["rbtc"]))
                        rbtc_price = float(final_rbtc)

                    available.append({
                        "type": spec_type.value,
                        "name": config["name"],
                        "icon": config["icon"],
                        "price_ryabucks": final_price,
                        "price_rbtc": rbtc_price,
                        "price_experience": config["base_price_experience"],
                        "energy_cost": config["energy_cost"],
                        "description": config["description"],
                        "work_locations": config["work_locations"],
                        "base_income": config["base_income"],
                        "training_time_hours": config["training_time_hours"],
                        "expedition_suitable": config.get("expedition_suitable", False),
                        "max_hp": config["max_hp"],
                        "base_stats": config["base_stats"],
                        "can_afford": True  # –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∏ –Ω–∞–π–º–µ
                    })

            return available

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è {user_id}: {e}")
            return []

    async def hire_specialist(self, user_id: int, specialist_type: str, currency: str = "ryabucks") -> Tuple[bool, str]:
        """
        –ù–∞–Ω—è—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        currency: 'ryabucks' –∏–ª–∏ 'rbtc'
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            await self._ensure_dependencies()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            try:
                spec_enum = SpecialistType(specialist_type)
            except ValueError:
                return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"

            config = SPECIALIST_CONFIG[spec_enum]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
            license_type = config["license_required"]
            required_level = config["license_level"]
            current_level = await self.license_service.get_license_level(user_id, license_type)

            if current_level < required_level:
                from services.license_service import LICENSE_CONFIG
                license_name = LICENSE_CONFIG[license_type]["name"]
                return False, f"–¢—Ä–µ–±—É–µ—Ç—Å—è {license_name} —É—Ä–æ–≤–Ω—è {required_level}. –£ –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å {current_level}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
            energy_cost = config["energy_cost"]
            can_afford_energy, energy_msg = await self.energy_service.can_perform_action(user_id, energy_cost)

            if not can_afford_energy:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏. {energy_msg}"

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
            user = await self.user_repository.get_by_id(user_id)
            if not user:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
            multipliers = await self.license_service.calculate_price_multipliers()
            ryabucks_cost = int(config["base_price_ryabucks"] * multipliers["ryabucks"])
            experience_cost = config["base_price_experience"]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
            if currency == "ryabucks":
                if user.resources.ryabucks < ryabucks_cost:
                    return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤. –ù—É–∂–Ω–æ: {ryabucks_cost:,}, –µ—Å—Ç—å: {user.resources.ryabucks:,}"
                cost_to_pay = ryabucks_cost
            elif currency == "rbtc":
                if "cost_rbtc" not in config["base_stats"]:
                    return False, "–≠—Ç–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å –∑–∞ RBTC"

                base_rbtc = Decimal(str(config["base_stats"]["cost_rbtc"]))
                rbtc_cost = base_rbtc * Decimal(str(multipliers["rbtc"]))

                if user.resources.rbtc.amount < rbtc_cost:
                    return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RBTC. –ù—É–∂–Ω–æ: {rbtc_cost:.2f}, –µ—Å—Ç—å: {user.resources.rbtc.amount}"
                cost_to_pay = rbtc_cost
            else:
                return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–¥–∫–∏–π –æ–ø—ã—Ç
            if user.resources.liquid_experience < experience_cost:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–∏–¥–∫–æ–≥–æ –æ–ø—ã—Ç–∞. –ù—É–∂–Ω–æ: {experience_cost}, –µ—Å—Ç—å: {user.resources.liquid_experience}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –Ω–∞–π–º–∞
            current_specialists = await self._get_user_specialists_count(user_id)
            max_specialists = await self._get_max_specialists(user_id)

            if current_specialists >= max_specialists:
                return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {max_specialists}. –£–ª—É—á—à–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è."

            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–π–º –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            async with self.client.transaction() as tx:
                # –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
                updates = {"liquid_experience": user.resources.liquid_experience - experience_cost}

                if currency == "ryabucks":
                    updates["ryabucks"] = user.resources.ryabucks - ryabucks_cost
                elif currency == "rbtc":
                    updates["rbtc"] = user.resources.rbtc.amount - cost_to_pay
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∂–∏–≥–∞–Ω–∏–µ RBTC
                    await self._record_rbtc_burn(user_id, cost_to_pay, f"hire_{specialist_type}")

                await self.user_repository.update_resources(user_id=user_id, updates=updates)

                # –°–ø–∏—Å—ã–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
                energy_consumed = await self.energy_service.consume_energy(user_id, energy_cost)
                if not energy_consumed:
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é"

                # –°–æ–∑–¥–∞—ë–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                specialist_id = await self._create_specialist(user_id, spec_enum, config)

            # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            await self.event_tracker.track_currency_spent(
                user_id=user_id,
                currency_type=currency,
                amount=cost_to_pay,
                reason=f"hire_{specialist_type}"
            )

            await self.event_tracker.track_specialist_hiring(
                user_id=user_id,
                specialist_type=specialist_type,
                cost=int(cost_to_pay) if currency == "ryabucks" else float(cost_to_pay)
            )

            logger.info(f"üë∑ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–∞–Ω—è—Ç –¥–ª—è {user_id}: {config['name']} –∑–∞ {cost_to_pay} {currency}")

            return True, f"‚úÖ {config['name']} {config['icon']} —É—Å–ø–µ—à–Ω–æ –Ω–∞–Ω—è—Ç!\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost_to_pay:,} {currency}, {experience_cost} –æ–ø—ã—Ç–∞, {energy_cost} —ç–Ω–µ—Ä–≥–∏–∏"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–π–º–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist_type} –¥–ª—è {user_id}: {e}")
            return False, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–π–º–µ"

    async def _create_specialist(self, user_id: int, spec_type: SpecialistType, config: Dict) -> int:
        """–°–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ –ë–î —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∏–∑ GDD"""
        import random

        base_stats = config["base_stats"]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ GDD
        efficiency = base_stats.get("efficiency", 100) + random.randint(-10, 10)  # ¬±10%
        loyalty = random.randint(85, 100)
        experience = 0
        max_hp = config["max_hp"]
        current_hp = max_hp

        # –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        combat_stats = {
            "attack": base_stats.get("attack", 10),
            "defense": base_stats.get("defense", 10),
            "health": max_hp,
            "max_health": max_hp
        } if config.get("expedition_suitable") else {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        specialist_data = {
            "user_id": user_id,
            "specialist_type": spec_type.value,
            "name": f"{config['name']} #{random.randint(1000, 9999)}",
            "efficiency": efficiency,
            "loyalty": loyalty,
            "experience": experience,
            "current_hp": current_hp,
            "max_hp": max_hp,
            "combat_stats": combat_stats if combat_stats else None,
            "hired_at": datetime.now(timezone.utc).isoformat(),
            "status": "available",  # available, working, training, injured, dead
            "last_work_at": None,
            "healing_cost": base_stats.get("healing_cost", 50),
            "healing_time_hours": base_stats.get("healing_time", 4)
        }

        result = await self.client.execute_query(
            table="user_specialists",
            operation="insert",
            data=specialist_data
        )

        return result[0]["id"] if result else None

    async def _record_rbtc_burn(self, user_id: int, amount: Decimal, reason: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å–∂–∏–≥–∞–Ω–∏–µ RBTC –≤ audit_log"""
        await self.event_tracker.track_event(
            user_id=user_id,
            event_type=EventType.RBTC_TRANSACTION,
            data={
                "type": "burn",
                "amount": float(amount),
                "reason": reason,
                "timestamp": datetime.now(timezone.utc).isoformat()
            },
            significance=EventSignificance.IMPORTANT
        )

    async def _get_user_specialists_count(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            specialists = await self.client.execute_query(
                table="user_specialists",
                operation="select",
                columns=["id"],
                filters={
                    "user_id": user_id, 
                    "status": ["available", "working", "training", "injured"]
                }
            )
            return len(specialists)
        except:
            return 0

    async def _get_max_specialists(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        employer_level = await self.license_service.get_license_level(user_id, LicenseType.EMPLOYER)

        # –õ–∏–º–∏—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º –ª–∏—Ü–µ–Ω–∑–∏–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è (–∏–∑ GDD)
        if employer_level >= 10:
            return 999  # –ë–µ–∑–ª–∏–º–∏—Ç
        elif employer_level >= 5:
            return 25   # Q-–°–æ–ª–¥–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        elif employer_level >= 3:
            return 10
        elif employer_level >= 2:
            return 6
        elif employer_level >= 1:
            return 3
        else:
            return 0    # –ù–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏

    async def get_user_specialists(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self._ensure_dependencies()

            specialists_data = await self.client.execute_query(
                table="user_specialists",
                operation="select",
                filters={"user_id": user_id}
            )

            specialists = []
            for data in specialists_data:
                config = SPECIALIST_CONFIG.get(SpecialistType(data["specialist_type"]), {})

                specialists.append({
                    "id": data["id"],
                    "type": data["specialist_type"],
                    "name": data["name"],
                    "icon": config.get("icon", "üë§"),
                    "efficiency": data["efficiency"],
                    "loyalty": data["loyalty"],
                    "experience": data["experience"],
                    "current_hp": data["current_hp"],
                    "max_hp": data["max_hp"],
                    "status": data["status"],
                    "combat_stats": data.get("combat_stats", {}),
                    "hired_at": data["hired_at"],
                    "last_work_at": data.get("last_work_at"),
                    "healing_cost": data.get("healing_cost", 50),
                    "healing_time_hours": data.get("healing_time_hours", 4)
                })

            return specialists

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è {user_id}: {e}")
            return []

    async def heal_specialist(self, user_id: int, specialist_id: int) -> Tuple[bool, str]:
        """–í—ã–ª–µ—á–∏—Ç—å —Ä–∞–Ω–µ–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
        try:
            await self._ensure_dependencies()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            specialist_data = await self.client.execute_query(
                table="user_specialists",
                operation="select",
                filters={"id": specialist_id, "user_id": user_id}
            )

            if not specialist_data:
                return False, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

            specialist = specialist_data[0]

            if specialist["status"] != "injured":
                return False, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ —Ä–∞–Ω–µ–Ω"

            if specialist["current_hp"] >= specialist["max_hp"]:
                return False, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É–∂–µ –∑–¥–æ—Ä–æ–≤"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            user = await self.user_repository.get_by_id(user_id)
            healing_cost = specialist.get("healing_cost", 50)

            if user.resources.ryabucks < healing_cost:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤ –¥–ª—è –ª–µ—á–µ–Ω–∏—è. –ù—É–∂–Ω–æ: {healing_cost}"

            # –õ–µ—á–∏–º
            async with self.client.transaction() as tx:
                # –°–ø–∏—Å—ã–≤–∞–µ–º —Ä—è–±–∞–∫—Å—ã
                await self.user_repository.update_resources(
                    user_id=user_id,
                    updates={"ryabucks": user.resources.ryabucks - healing_cost}
                )

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
                await self.client.execute_query(
                    table="user_specialists",
                    operation="update",
                    data={
                        "current_hp": specialist["max_hp"],
                        "status": "available"
                    },
                    filters={"id": specialist_id}
                )

            # –¢—Ä–µ–∫–∞–µ–º –ª–µ—á–µ–Ω–∏–µ
            await self.event_tracker.track_currency_spent(
                user_id=user_id,
                currency_type="ryabucks", 
                amount=healing_cost,
                reason=f"heal_specialist_{specialist_id}"
            )

            logger.info(f"üè• –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤—ã–ª–µ—á–µ–Ω –¥–ª—è {user_id}: {specialist['name']} –∑–∞ {healing_cost} —Ä—è–±–∞–∫—Å–æ–≤")

            return True, f"‚úÖ {specialist['name']} —É—Å–ø–µ—à–Ω–æ –≤—ã–ª–µ—á–µ–Ω –∑–∞ {healing_cost} —Ä—è–±–∞–∫—Å–æ–≤!"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–µ—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist_id} –¥–ª—è {user_id}: {e}")
            return False, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–µ—á–µ–Ω–∏–∏"

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    async def train_specialist(self, user_id: int, specialist_id: int) -> Tuple[bool, str]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ –∞–∫–∞–¥–µ–º–∏—é"""
        return False, "üöß –ê–∫–∞–¥–µ–º–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

    async def assign_work(self, user_id: int, specialist_id: int, location: str) -> Tuple[bool, str]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É"""
        return False, "üöß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"


logger.info("‚úÖ SpecialistService (GDD –≤–µ—Ä—Å–∏—è) –∑–∞–≥—Ä—É–∂–µ–Ω")