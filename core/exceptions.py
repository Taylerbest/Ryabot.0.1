"""
–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
–ó–∞–º–µ–Ω—è–µ—Ç –æ–±—â–∏–µ Exception –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ
"""

from typing import Optional, Any, Dict
from enum import Enum


class ErrorCode(Enum):
    """–ö–æ–¥—ã –æ—à–∏–±–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ API"""
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    USER_NOT_FOUND = "USER_NOT_FOUND"
    USER_ALREADY_EXISTS = "USER_ALREADY_EXISTS"
    INVALID_USER_DATA = "INVALID_USER_DATA"

    # –†–µ—Å—É—Ä—Å—ã
    INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS"
    INSUFFICIENT_ENERGY = "INSUFFICIENT_ENERGY"
    INVALID_AMOUNT = "INVALID_AMOUNT"

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    DATABASE_ERROR = "DATABASE_ERROR"
    CONNECTION_ERROR = "CONNECTION_ERROR"
    TRANSACTION_ERROR = "TRANSACTION_ERROR"

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    VALIDATION_ERROR = "VALIDATION_ERROR"
    INVALID_INPUT = "INVALID_INPUT"

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    ACCESS_DENIED = "ACCESS_DENIED"
    RATE_LIMIT_EXCEEDED = "RATE_LIMIT_EXCEEDED"

    # –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
    QUEST_NOT_AVAILABLE = "QUEST_NOT_AVAILABLE"
    TUTORIAL_STEP_INVALID = "TUTORIAL_STEP_INVALID"
    FEATURE_DISABLED = "FEATURE_DISABLED"


class RyabotException(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""

    def __init__(
            self,
            message: str,
            error_code: Optional[ErrorCode] = None,
            details: Optional[Dict[str, Any]] = None,
            user_message: Optional[str] = None
    ):
        super().__init__(message)
        self.error_code = error_code
        self.details = details or {}
        self.user_message = user_message or message
        self.timestamp = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏


# ========== –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==========

class UserException(RyabotException):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    pass


class UserNotFoundError(UserException):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"""

    def __init__(self, user_id: int):
        super().__init__(
            message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
            error_code=ErrorCode.USER_NOT_FOUND,
            details={"user_id": user_id},
            user_message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        )


class UserAlreadyExistsError(UserException):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""

    def __init__(self, user_id: int):
        super().__init__(
            message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            error_code=ErrorCode.USER_ALREADY_EXISTS,
            details={"user_id": user_id},
            user_message="–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        )


class InvalidUserDataError(UserException):
    """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self, field: str, value: Any, reason: str = ""):
        super().__init__(
            message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}: {value}. {reason}",
            error_code=ErrorCode.INVALID_USER_DATA,
            details={"field": field, "value": value, "reason": reason},
            user_message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {reason}"
        )


# ========== –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –†–ï–°–£–†–°–û–í ==========

class ResourceException(RyabotException):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤"""
    pass


class InsufficientFundsError(ResourceException):
    """–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"""

    def __init__(self, resource_type: str, required: int, available: int):
        super().__init__(
            message=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {resource_type}: –Ω—É–∂–Ω–æ {required}, –¥–æ—Å—Ç—É–ø–Ω–æ {available}",
            error_code=ErrorCode.INSUFFICIENT_FUNDS,
            details={
                "resource_type": resource_type,
                "required": required,
                "available": available
            },
            user_message=f"üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {resource_type}! –ù—É–∂–Ω–æ {required:,}, —É –≤–∞—Å {available:,}"
        )


class InsufficientEnergyError(ResourceException):
    """–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏"""

    def __init__(self, required: int, available: int):
        super().__init__(
            message=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏: –Ω—É–∂–Ω–æ {required}, –¥–æ—Å—Ç—É–ø–Ω–æ {available}",
            error_code=ErrorCode.INSUFFICIENT_ENERGY,
            details={"required": required, "available": available},
            user_message=f"‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –ù—É–∂–Ω–æ {required}, —É –≤–∞—Å {available}"
        )


class InvalidAmountError(ResourceException):
    """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞"""

    def __init__(self, amount: Any, reason: str = ""):
        super().__init__(
            message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞: {amount}. {reason}",
            error_code=ErrorCode.INVALID_AMOUNT,
            details={"amount": amount, "reason": reason},
            user_message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. {reason}"
        )


# ========== –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========

class DatabaseException(RyabotException):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ë–î"""
    pass


class ConnectionError(DatabaseException):
    """–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""

    def __init__(self, service: str, details: str = ""):
        super().__init__(
            message=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {service}: {details}",
            error_code=ErrorCode.CONNECTION_ERROR,
            details={"service": service, "connection_details": details},
            user_message="–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )


class TransactionError(DatabaseException):
    """–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ë–î"""

    def __init__(self, operation: str, reason: str = ""):
        super().__init__(
            message=f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {operation}: {reason}",
            error_code=ErrorCode.TRANSACTION_ERROR,
            details={"operation": operation, "reason": reason},
            user_message="–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )


class QueryError(DatabaseException):
    """–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""

    def __init__(self, query_type: str, table: str, reason: str = ""):
        super().__init__(
            message=f"–û—à–∏–±–∫–∞ {query_type} –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ {table}: {reason}",
            error_code=ErrorCode.DATABASE_ERROR,
            details={"query_type": query_type, "table": table, "reason": reason},
            user_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        )


# ========== –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ê–õ–ò–î–ê–¶–ò–ò ==========

class ValidationException(RyabotException):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    pass


class ValidationError(ValidationException):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, field: str, value: Any, constraint: str):
        super().__init__(
            message=f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è {field} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: {value} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç {constraint}",
            error_code=ErrorCode.VALIDATION_ERROR,
            details={"field": field, "value": value, "constraint": constraint},
            user_message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}: {constraint}"
        )


class InvalidInputError(ValidationException):
    """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self, input_type: str, expected: str, received: str):
        super().__init__(
            message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ {input_type}: –æ–∂–∏–¥–∞–ª—Å—è {expected}, –ø–æ–ª—É—á–µ–Ω {received}",
            error_code=ErrorCode.INVALID_INPUT,
            details={"input_type": input_type, "expected": expected, "received": received},
            user_message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –û–∂–∏–¥–∞–ª—Å—è {expected}"
        )


# ========== –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ==========

class AuthException(RyabotException):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    pass


class AccessDeniedError(AuthException):
    """–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"""

    def __init__(self, resource: str, user_id: Optional[int] = None, reason: str = ""):
        super().__init__(
            message=f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ {resource} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {reason}",
            error_code=ErrorCode.ACCESS_DENIED,
            details={"resource": resource, "user_id": user_id, "reason": reason},
            user_message=f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. {reason}"
        )


class RateLimitExceededError(AuthException):
    """–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"""

    def __init__(self, limit: int, window: str, user_id: Optional[int] = None):
        super().__init__(
            message=f"–ü—Ä–µ–≤—ã—à–µ–Ω rate limit {limit} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ {window} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            error_code=ErrorCode.RATE_LIMIT_EXCEEDED,
            details={"limit": limit, "window": window, "user_id": user_id},
            user_message=f"‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {window}"
        )


# ========== –ò–ì–†–û–í–´–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø ==========

class GameException(RyabotException):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏"""
    pass


class QuestNotAvailableError(GameException):
    """–ö–≤–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""

    def __init__(self, quest_id: str, reason: str = ""):
        super().__init__(
            message=f"–ö–≤–µ—Å—Ç {quest_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {reason}",
            error_code=ErrorCode.QUEST_NOT_AVAILABLE,
            details={"quest_id": quest_id, "reason": reason},
            user_message=f"üìã –ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. {reason}"
        )


class TutorialStepInvalidError(GameException):
    """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–≥ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""

    def __init__(self, current_step: str, expected_step: str):
        super().__init__(
            message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–≥ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞: —Ç–µ–∫—É—â–∏–π {current_step}, –æ–∂–∏–¥–∞–ª—Å—è {expected_step}",
            error_code=ErrorCode.TUTORIAL_STEP_INVALID,
            details={"current_step": current_step, "expected_step": expected_step},
            user_message="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"
        )


class FeatureDisabledError(GameException):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"""

    def __init__(self, feature: str):
        super().__init__(
            message=f"–§—É–Ω–∫—Ü–∏—è {feature} –æ—Ç–∫–ª—é—á–µ–Ω–∞",
            error_code=ErrorCode.FEATURE_DISABLED,
            details={"feature": feature},
            user_message=f"üöß –§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {feature}"
        )


# ========== –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

def get_user_friendly_message(exception: Exception) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    if isinstance(exception, RyabotException):
        return exception.user_message

    # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    error_messages = {
        ValueError: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        TypeError: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö",
        KeyError: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä",
        AttributeError: "–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö",
        ConnectionError: "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º",
        TimeoutError: "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
    }

    return error_messages.get(type(exception), "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")


def is_retryable_error(exception: Exception) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ —ç—Ç–æ–π –æ—à–∏–±–∫–∏"""
    retryable_exceptions = (
        ConnectionError,
        TransactionError,
        TimeoutError
    )

    if isinstance(exception, retryable_exceptions):
        return True

    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    retryable_standard = (
        ConnectionError,
        TimeoutError
    )

    return isinstance(exception, retryable_standard)


def get_error_severity(exception: Exception) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if isinstance(exception, (
            UserNotFoundError,
            InvalidInputError,
            InsufficientFundsError,
            InsufficientEnergyError
    )):
        return "INFO"  # –û–±—ã—á–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏

    if isinstance(exception, (
            ValidationError,
            InvalidUserDataError,
            QuestNotAvailableError
    )):
        return "WARNING"  # –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è

    if isinstance(exception, (
            DatabaseException,
            ConnectionError,
            TransactionError
    )):
        return "ERROR"  # –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

    return "ERROR"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é