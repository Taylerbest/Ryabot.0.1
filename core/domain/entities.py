# core/domain/entities.py
"""
–ò–≥—Ä–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ Ryabot Island
–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–≥—Ä—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –∂–∏–≤–æ—Ç–Ω—ã–µ –∏ —Ç.–¥.
"""

from datetime import datetime, timedelta
from decimal import Decimal
from typing import Optional, Dict, List, Any
from dataclasses import dataclass, field
from enum import Enum


# ========== –í–ê–õ–Æ–¢–´ –ò –†–ï–°–£–†–°–´ ==========

@dataclass(frozen=True)
class RBTC:
    """RBTC –∫—Ä–∏—Å—Ç–∞–ª–ª—ã - –∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞"""
    amount: Decimal

    def __post_init__(self):
        if self.amount < 0:
            raise ValueError("RBTC –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        if self.amount > Decimal('21000000'):
            raise ValueError("RBTC –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å")


@dataclass(frozen=True)
class Energy:
    """–≠–Ω–µ—Ä–≥–∏—è - –≤–∞–ª—é—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
    current: int
    maximum: int
    last_updated: datetime

    def __post_init__(self):
        if self.current < 0 or self.current > self.maximum:
            raise ValueError("–≠–Ω–µ—Ä–≥–∏—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã")


@dataclass(frozen=True)
class Resources:
    """–í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    ryabucks: int = 0  # üíµ –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞
    rbtc: RBTC = field(default_factory=lambda: RBTC(Decimal('0')))  # üí† P2E –≤–∞–ª—é—Ç–∞
    energy: Energy = field(default_factory=lambda: Energy(30, 30, datetime.now()))  # ‚ö° –≠–Ω–µ—Ä–≥–∏—è
    liquid_experience: int = 0  # üß™ –ñ–∏–¥–∫–∏–π –æ–ø—ã—Ç
    golden_shards: int = 0  # ‚ú® –û—Å–∫–æ–ª–∫–∏ –∑–æ–ª–æ—Ç—ã—Ö —è–∏—Ü
    golden_keys: int = 0  # üóùÔ∏è –ó–æ–ª–æ—Ç—ã–µ –∫–ª—é—á–∏
    wood: int = 0  # ü™µ –î—Ä–µ–≤–µ—Å–∏–Ω–∞
    q_points: int = 0  # üîÆ Q-–æ—á–∫–∏


# ========== –¢–ò–ü–´ –°–ü–ï–¶–ò–ê–õ–ò–°–¢–û–í ==========

class SpecialistType(Enum):
    WORKER = "worker"  # üôç‚Äç‚ôÇÔ∏è –†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π
    FARMER = "farmer"  # üë©‚Äçüåæ –§–µ—Ä–º–µ—Ä
    BUILDER = "builder"  # üë∑ –°—Ç—Ä–æ–∏—Ç–µ–ª—å
    COOK = "cook"  # üßë‚Äçüç≥ –ü–æ–≤–∞—Ä
    FISHERMAN = "fisherman"  # üé£ –†—ã–±–∞–∫
    FORESTER = "forester"  # üë®‚Äçüöí –õ–µ—Å–Ω–∏–∫
    SCIENTIST = "scientist"  # üßë‚Äçüî¨ –£—á—ë–Ω—ã–π
    Q_SOLDIER = "q_soldier"  # üíÇ Q-–°–æ–ª–¥–∞—Ç
    DOCTOR = "doctor"  # üßë‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä
    TEACHER = "teacher"  # üßë‚Äçüè´ –£—á–∏—Ç–µ–ª—å


class AnimalType(Enum):
    CHICKEN = "chicken"  # üêî –ö—É—Ä–∏—Ü–∞
    ROOSTER = "rooster"  # üêì –ü–µ—Ç—É—Ö
    CHICK = "chick"  # üê• –¶—ã–ø–ª—ë–Ω–æ–∫
    HORSE = "horse"  # üêé –õ–æ—à–∞–¥—å


class BuildingType(Enum):
    HOUSE = "house"  # üè† –î–æ–º
    HENHOUSE = "henhouse"  # üêî –ö—É—Ä—è—Ç–Ω–∏–∫
    INCUBATOR = "incubator"  # üê£ –ò–Ω–∫—É–±–∞—Ç–æ—Ä
    CHICK_HOUSE = "chick_house"  # üê• –¶—ã–ø–ª—è—Ç–Ω–∏–∫
    STABLE = "stable"  # üêé –ö–æ–Ω—é—à–Ω—è
    GARDEN = "garden"  # üåæ –û–≥–æ—Ä–æ–¥
    FORESTRY = "forestry"  # üå≤ –õ–µ—Å—Ö–æ–∑
    QUANTUM_LAB = "quantum_lab"  # ‚öõÔ∏è –ö–≤–∞–Ω—Ç–æ–≤–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è


# ========== –û–°–ù–û–í–ù–´–ï –°–£–©–ù–û–°–¢–ò ==========

@dataclass
class User:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä—ã"""
    user_id: int  # Telegram ID
    username: Optional[str]  # Username –≤ Telegram
    resources: Resources  # –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã
    level: int = 1  # –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
    experience: int = 0  # –û–ø—ã—Ç
    quantum_pass_until: Optional[datetime] = None  # –î–æ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–µ–Ω Quantum Pass
    tutorial_completed: bool = False  # –ü—Ä–æ–π–¥–µ–Ω –ª–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª
    language: str = "ru"  # –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    created_at: datetime = field(default_factory=datetime.now)
    last_active: datetime = field(default_factory=datetime.now)

    # –ü–µ—Ä—Å–æ–Ω–∞–∂
    character_preset: int = 1  # –ü—Ä–µ—Å–µ—Ç –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
    equipped_items: Dict[str, Optional[str]] = field(default_factory=lambda: {
        "head": None, "body": "—Ç—É–Ω–∏–∫–∞", "feet": None
    })

    def has_quantum_pass(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Quantum Pass"""
        if not self.quantum_pass_until:
            return False
        return datetime.now() < self.quantum_pass_until

    def get_energy_regen_rate(self) -> int:
        """–°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ (–º–∏–Ω—É—Ç—ã –Ω–∞ 1 —ç–Ω–µ—Ä–≥–∏—é)"""
        base_rate = 48  # 48 –º–∏–Ω—É—Ç –±–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        if self.has_quantum_pass():
            return base_rate // 2  # x2 —Å–∫–æ—Ä–æ—Å—Ç—å —Å Quantum Pass
        return base_rate

    def can_afford_ryabucks(self, cost: int) -> bool:
        """–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ —Ç—Ä–∞—Ç—ã –≤ —Ä—è–±–∞–∫—Å–∞—Ö"""
        return self.resources.ryabucks >= cost

    def can_afford_rbtc(self, cost: Decimal) -> bool:
        """–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ —Ç—Ä–∞—Ç—ã –≤ RBTC"""
        return self.resources.rbtc.amount >= cost

    def get_multiplier(self, multiplier_type: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞ –æ—Ç Quantum Pass"""
        if not self.has_quantum_pass():
            return 1.0

        from config.settings import settings
        return settings.QUANTUM_PASS_MULTIPLIERS.get(multiplier_type, 1.0)


@dataclass
class Specialist:
    """–ù–∞–Ω—è—Ç—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"""
    id: int
    user_id: int
    specialist_type: SpecialistType
    level: int = 1
    status: str = "idle"  # idle, working, training, injured, dead
    experience: int = 0
    hired_at: datetime = field(default_factory=datetime.now)

    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π
    hp: int = 0
    stamina: int = 0
    food_capacity: int = 0
    medicine_capacity: int = 0
    cargo_capacity: int = 0
    cargo_slots: int = 0
    rbtc_bonus_percent: int = 100

    def __post_init__(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ —Ç–∏–ø—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
        stats = self._get_base_stats()
        for attr, value in stats.items():
            setattr(self, attr, value)

    def _get_base_stats(self) -> Dict[str, int]:
        """–ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
        stats_map = {
            SpecialistType.WORKER: {
                'hp': 25, 'stamina': 30, 'food_capacity': 4,
                'medicine_capacity': 2, 'cargo_capacity': 60,
                'cargo_slots': 6, 'rbtc_bonus_percent': 80
            },
            SpecialistType.FARMER: {
                'hp': 30, 'stamina': 35, 'food_capacity': 4,
                'medicine_capacity': 4, 'cargo_capacity': 20,
                'cargo_slots': 3, 'rbtc_bonus_percent': 180
            },
            SpecialistType.Q_SOLDIER: {
                'hp': 60, 'stamina': 55, 'food_capacity': 6,
                'medicine_capacity': 3, 'cargo_capacity': 40,
                'cargo_slots': 5, 'rbtc_bonus_percent': 50
            },
            SpecialistType.SCIENTIST: {
                'hp': 30, 'stamina': 30, 'food_capacity': 4,
                'medicine_capacity': 2, 'cargo_capacity': 15,
                'cargo_slots': 3, 'rbtc_bonus_percent': 120
            }
        }
        return stats_map.get(self.specialist_type, {
            'hp': 25, 'stamina': 25, 'food_capacity': 3,
            'medicine_capacity': 2, 'cargo_capacity': 20,
            'cargo_slots': 3, 'rbtc_bonus_percent': 100
        })

    def is_available_for_work(self) -> bool:
        """–î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã"""
        return self.status in ["idle", "working"]

    def get_hire_cost(self, current_count: int = 0) -> Dict[str, int]:
        """–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–π–º–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
        if self.specialist_type == SpecialistType.WORKER:
            # –†–∞—Å—Ç—É—â–∞—è —Ü–µ–Ω–∞ –≤ —Ä—è–±–∞–∫—Å–∞—Ö –¥–ª—è —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏—Ö
            return {"ryabucks": 30 + (5 * current_count)}

        # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        specialist_costs = {
            SpecialistType.FARMER: {"liquid_experience": 50, "ryabucks": 100},
            SpecialistType.BUILDER: {"liquid_experience": 50, "ryabucks": 100},
            SpecialistType.COOK: {"liquid_experience": 75, "ryabucks": 130},
            SpecialistType.FISHERMAN: {"liquid_experience": 60, "ryabucks": 110},
            SpecialistType.FORESTER: {"liquid_experience": 60, "ryabucks": 110},
            SpecialistType.SCIENTIST: {"liquid_experience": 150, "ryabucks": 200},
            SpecialistType.Q_SOLDIER: {"liquid_experience": 100, "ryabucks": 150},
            SpecialistType.DOCTOR: {"liquid_experience": 120, "ryabucks": 180},
            SpecialistType.TEACHER: {"liquid_experience": 90, "ryabucks": 140},
        }
        return specialist_costs.get(self.specialist_type, {"ryabucks": 100})


@dataclass
class Animal:
    """–ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–∞ —Ñ–µ—Ä–º–µ"""
    id: int
    user_id: int
    animal_type: AnimalType

    # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    egg_production: int = 1  # —è–∏—Ü –≤ –¥–µ–Ω—å
    health: int = 85  # –∑–¥–æ—Ä–æ–≤—å–µ %
    fertility: int = 0  # —à–∞–Ω—Å –æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä–µ–Ω–∏—è %
    lifespan: int = 30  # –¥–Ω–µ–π –∂–∏–∑–Ω–∏

    status: str = "alive"  # alive, dead, sick
    born_at: datetime = field(default_factory=datetime.now)
    last_fed: Optional[datetime] = None
    last_collected: Optional[datetime] = None

    def days_alive(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∂–∏–∑–Ω–∏"""
        return (datetime.now() - self.born_at).days

    def is_alive(self) -> bool:
        """–ñ–∏–≤–∞ –ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ"""
        return self.status == "alive" and self.days_alive() < self.lifespan

    def needs_feeding(self) -> bool:
        """–ù—É–∂–Ω–æ –ª–∏ –∫–æ—Ä–º–∏—Ç—å"""
        if not self.last_fed:
            return True
        return datetime.now() - self.last_fed > timedelta(days=1)

    def can_produce_eggs(self) -> bool:
        """–ú–æ–∂–µ—Ç –ª–∏ –Ω–µ—Å—Ç–∏ —è–π—Ü–∞"""
        return (self.animal_type == AnimalType.CHICKEN and
                self.is_alive() and
                not self.needs_feeding())

    def get_golden_egg_chance(self, has_quantum_pass: bool = False) -> float:
        """–®–∞–Ω—Å –∑–æ–ª–æ—Ç–æ–≥–æ —è–π—Ü–∞"""
        base_chance = 0.0005  # 0.05%
        if has_quantum_pass:
            return base_chance * 10  # x10 —à–∞–Ω—Å —Å Quantum Pass
        return base_chance


@dataclass
class Building:
    """–ü–æ—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∫–µ"""
    id: int
    user_id: int
    building_type: BuildingType
    level: int = 1
    capacity: int = 0
    occupied_space: int = 0

    built_at: datetime = field(default_factory=datetime.now)
    construction_completed: bool = True
    construction_time_left: int = 0  # —Å–µ–∫—É–Ω–¥

    # –ü–æ–∑–∏—Ü–∏—è –Ω–∞ —É—á–∞—Å—Ç–∫–µ
    plot_id: Optional[int] = None
    position_x: float = 0.0
    position_y: float = 0.0

    def __post_init__(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ç–∏–ø—É –ø–æ—Å—Ç—Ä–æ–π–∫–∏"""
        specs = self._get_building_specs()
        self.capacity = specs["capacity"]

    def _get_building_specs(self) -> Dict[str, Any]:
        """–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç—Ä–æ–µ–∫"""
        specs = {
            BuildingType.HOUSE: {"capacity": 3, "area": 0.2},
            BuildingType.HENHOUSE: {"capacity": 25, "area": 1.0},
            BuildingType.INCUBATOR: {"capacity": 50, "area": 0.5},
            BuildingType.CHICK_HOUSE: {"capacity": 30, "area": 0.8},
            BuildingType.STABLE: {"capacity": 3, "area": 2.0},
            BuildingType.GARDEN: {"capacity": 0, "area": 0.5},
            BuildingType.FORESTRY: {"capacity": 0, "area": 2.0},
            BuildingType.QUANTUM_LAB: {"capacity": 0, "area": 3.0},
        }
        return specs.get(self.building_type, {"capacity": 10, "area": 1.0})

    def can_house_animal(self, animal_type: AnimalType) -> bool:
        """–ú–æ–∂–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ"""
        if self.occupied_space >= self.capacity:
            return False

        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–¥–∞–Ω–∏–π –∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
        housing_map = {
            BuildingType.HENHOUSE: [AnimalType.CHICKEN, AnimalType.ROOSTER],
            BuildingType.CHICK_HOUSE: [AnimalType.CHICK],
            BuildingType.STABLE: [AnimalType.HORSE]
        }

        allowed_animals = housing_map.get(self.building_type, [])
        return animal_type in allowed_animals

    def get_construction_cost(self) -> Dict[str, int]:
        """–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏"""
        costs = {
            BuildingType.HOUSE: {"ryabucks": 150, "wood": 20, "liquid_experience": 15},
            BuildingType.HENHOUSE: {"ryabucks": 200, "wood": 30, "liquid_experience": 20},
            BuildingType.INCUBATOR: {"ryabucks": 250, "wood": 25, "liquid_experience": 30},
            BuildingType.CHICK_HOUSE: {"ryabucks": 180, "wood": 20, "liquid_experience": 25},
            BuildingType.STABLE: {"ryabucks": 600, "wood": 100, "liquid_experience": 40},
            BuildingType.GARDEN: {"ryabucks": 50, "wood": 10, "liquid_experience": 5},
            BuildingType.FORESTRY: {"ryabucks": 300, "wood": 10, "liquid_experience": 25},
            BuildingType.QUANTUM_LAB: {"ryabucks": 2000, "wood": 200, "liquid_experience": 100},
        }
        return costs.get(self.building_type, {"ryabucks": 100})


@dataclass
class UserStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞–Ω–∏–π"""
    user_id: int

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–µ—Ä–º—ã
    chickens_bought: int = 0
    chickens_hatched: int = 0
    chickens_raised: int = 0
    eggs_collected: int = 0
    golden_eggs_found: int = 0
    roosters_bought: int = 0
    animals_fed: int = 0

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    buildings_built: int = 0
    henhouses_built: int = 0
    houses_built: int = 0
    upgrades_completed: int = 0
    stables_built: int = 0
    gardens_planted: int = 0

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    specialists_hired: int = 0
    work_tasks_completed: int = 0
    training_sessions_completed: int = 0
    laborers_hired: int = 0

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π
    expeditions_completed: int = 0
    expeditions_failed: int = 0
    territories_explored: int = 0
    enemies_defeated: int = 0
    rbtc_found: Decimal = field(default_factory=lambda: Decimal('0'))

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏
    rbtc_earned: Decimal = field(default_factory=lambda: Decimal('0'))
    rbtc_spent: Decimal = field(default_factory=lambda: Decimal('0'))
    ryabaks_earned: int = 0
    ryabaks_spent: int = 0
    items_bought: int = 0
    items_sold: int = 0
    eggs_sold: int = 0

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–µ–º–ª–∏
    land_plots_bought: int = 0
    total_area_owned: float = 0.0

    # –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    referrals_invited: int = 0
    daily_logins: int = 0
    achievements_unlocked: int = 0

    last_updated: datetime = field(default_factory=datetime.now)


# ========== –°–û–ë–´–¢–ò–Ø ==========

@dataclass
class DomainEvent:
    """–ë–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∏–≥—Ä–µ"""
    event_id: str
    user_id: int
    event_type: str
    payload: Dict[str, Any]
    occurred_at: datetime = field(default_factory=datetime.now)


@dataclass
class SpecialistHiredEvent:
    """–°–æ–±—ã—Ç–∏–µ –Ω–∞–π–º–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
    # –°–ù–ê–ß–ê–õ–ê –≤—Å–µ –ø–æ–ª—è –ë–ï–ó –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    event_id: str
    user_id: int
    specialist_id: int
    specialist_type: SpecialistType
    cost: Dict[str, int]
    # –ü–û–¢–û–ú –ø–æ–ª—è —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    event_type: str = "specialist_hired"
    payload: Dict[str, Any] = field(default_factory=dict)
    occurred_at: datetime = field(default_factory=datetime.now)

    def __post_init__(self):
        self.payload = {
            "specialist_id": self.specialist_id,
            "specialist_type": self.specialist_type.value,
            "cost": self.cost
        }


@dataclass
class AnimalBoughtEvent:
    """–°–æ–±—ã—Ç–∏–µ –ø–æ–∫—É–ø–∫–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""
    # –°–ù–ê–ß–ê–õ–ê –≤—Å–µ –ø–æ–ª—è –ë–ï–ó –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    event_id: str
    user_id: int
    animal_id: int
    animal_type: AnimalType
    cost: int
    # –ü–û–¢–û–ú –ø–æ–ª—è —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    event_type: str = "animal_bought"
    payload: Dict[str, Any] = field(default_factory=dict)
    occurred_at: datetime = field(default_factory=datetime.now)

    def __post_init__(self):
        self.payload = {
            "animal_id": self.animal_id,
            "animal_type": self.animal_type.value,
            "cost": self.cost
        }
