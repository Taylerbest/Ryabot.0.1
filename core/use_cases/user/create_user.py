# core/use_cases/user/create_user.py
"""
Use case –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–í–∫–ª—é—á–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import logging
from datetime import datetime
from decimal import Decimal

from core.domain.entities import User, Resources, RBTC, Energy
from core.ports.repositories import UserRepository
from config.settings import settings

logger = logging.getLogger(__name__)

class CreateUserUseCase:
    """Use case –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_repo: UserRepository):
        self.user_repo = user_repo
    
    async def execute(self, user_id: int, username: str = None) -> User:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: Username –≤ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            User: –°–æ–∑–¥–∞–Ω–Ω—ã–π –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = await self.user_repo.get_by_id(user_id)
            if existing_user:
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                await self.user_repo.update_resources(user_id, {})
                return existing_user
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
            user = User(
                user_id=user_id,
                username=username,
                resources=Resources(
                    ryabucks=settings.INITIAL_RYABUCKS,  # 100 —Ä—è–±–∞–∫—Å–æ–≤
                    rbtc=RBTC(Decimal('0')),            # 0 RBTC
                    energy=Energy(
                        current=settings.INITIAL_ENERGY,     # 30 —ç–Ω–µ—Ä–≥–∏–∏
                        maximum=settings.INITIAL_ENERGY_MAX, # –º–∞–∫—Å–∏–º—É–º 30
                        last_updated=datetime.now()
                    ),
                    liquid_experience=0,    # 0 –∂–∏–¥–∫–æ–≥–æ –æ–ø—ã—Ç–∞
                    golden_shards=0,        # 0 –æ—Å–∫–æ–ª–∫–æ–≤ –∑–æ–ª–æ—Ç—ã—Ö —è–∏—Ü
                    golden_keys=0,          # 0 –∑–æ–ª–æ—Ç—ã—Ö –∫–ª—é—á–µ–π
                    wood=0,                 # 0 –¥—Ä–µ–≤–µ—Å–∏–Ω—ã
                    q_points=0              # 0 Q-–æ—á–∫–æ–≤
                ),
                level=1,                    # 1-–π —É—Ä–æ–≤–µ–Ω—å
                experience=0,               # 0 –æ–ø—ã—Ç–∞
                quantum_pass_until=None,    # –ù–µ—Ç Quantum Pass
                tutorial_completed=False,   # –¢—É—Ç–æ—Ä–∏–∞–ª –Ω–µ –ø—Ä–æ–π–¥–µ–Ω
                language="ru",              # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                character_preset=1,         # –ë–∞–∑–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
                equipped_items={
                    "head": None,
                    "body": "—Ç—É–Ω–∏–∫–∞",
                    "feet": None
                }
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            created_user = await self.user_repo.create(user)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username})")
            
            return created_user
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise

class GetUserProfileUseCase:
    """Use case –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_repo: UserRepository):
        self.user_repo = user_repo
    
    async def execute(self, user_id: int) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_repo.get_by_id(user_id)
            if not user:
                raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.user_repo.get_user_stats(user_id)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —ç–Ω–µ—Ä–≥–∏—é (—Å —É—á–µ—Ç–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
            current_energy = self._calculate_current_energy(user)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile = {
                "user_id": user.user_id,
                "username": user.username,
                "level": user.level,
                "experience": user.experience,
                
                # –†–µ—Å—É—Ä—Å—ã
                "ryabucks": user.resources.ryabucks,
                "rbtc": float(user.resources.rbtc.amount),
                "energy": current_energy,
                "energy_max": user.resources.energy.maximum,
                "liquid_experience": user.resources.liquid_experience,
                "golden_shards": user.resources.golden_shards,
                "golden_keys": user.resources.golden_keys,
                "wood": user.resources.wood,
                "q_points": user.resources.q_points,
                
                # Quantum Pass
                "has_quantum_pass": user.has_quantum_pass(),
                "quantum_pass_until": user.quantum_pass_until.isoformat() if user.quantum_pass_until else None,
                
                # –ü–µ—Ä—Å–æ–Ω–∞–∂
                "character_preset": user.character_preset,
                "equipped_items": user.equipped_items,
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è)
                "chickens_bought": stats.chickens_bought,
                "eggs_collected": stats.eggs_collected,
                "golden_eggs_found": stats.golden_eggs_found,
                "specialists_hired": stats.specialists_hired,
                "buildings_built": stats.buildings_built,
                "expeditions_completed": stats.expeditions_completed,
                "land_plots_bought": stats.land_plots_bought,
                
                # –ú–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
                "tutorial_completed": user.tutorial_completed,
                "language": user.language,
                "created_at": user.created_at.isoformat(),
                "last_active": user.last_active.isoformat()
            }
            
            return profile
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise

    def _calculate_current_energy(self, user: User) -> int:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â—É—é —ç–Ω–µ—Ä–≥–∏—é —Å —É—á–µ—Ç–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        from datetime import timezone

        now = datetime.now(timezone.utc).replace(tzinfo=None)
        last_updated = user.resources.energy.last_updated

        # –£–±–∏—Ä–∞–µ–º timezone –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if hasattr(last_updated, 'tzinfo') and last_updated.tzinfo is not None:
            last_updated = last_updated.replace(tzinfo=None)

        # –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        time_diff = (now - last_updated).total_seconds()

        # –°–∫–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
        regen_rate_seconds = user.get_energy_regen_rate() * 60  # –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
        energy_restored = int(time_diff // regen_rate_seconds)

        # –¢–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è (–Ω–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞)
        current_energy = min(
            user.resources.energy.current + energy_restored,
            user.resources.energy.maximum
        )

        return current_energy


class UpdateUserResourcesUseCase:
    """Use case –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_repo: UserRepository):
        self.user_repo = user_repo
    
    async def execute(self, user_id: int, resource_updates: dict) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            resource_updates: –°–ª–æ–≤–∞—Ä—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_repo.get_by_id(user_id)
            if not user:
                raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            valid_resources = [
                'ryabucks', 'rbtc', 'energy', 'liquid_experience',
                'golden_shards', 'golden_keys', 'wood', 'q_points'
            ]
            
            filtered_updates = {
                key: value for key, value in resource_updates.items()
                if key in valid_resources
            }
            
            if not filtered_updates:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if 'ryabucks' in filtered_updates and filtered_updates['ryabucks'] < 0:
                filtered_updates['ryabucks'] = 0
            
            if 'energy' in filtered_updates:
                energy_max = user.resources.energy.maximum
                filtered_updates['energy'] = max(0, min(filtered_updates['energy'], energy_max))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            success = await self.user_repo.update_resources(user_id, filtered_updates)
            
            if success:
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {filtered_updates}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

class SpendEnergyUseCase:
    """Use case –¥–ª—è —Ç—Ä–∞—Ç—ã —ç–Ω–µ—Ä–≥–∏–∏"""
    
    def __init__(self, user_repo: UserRepository):
        self.user_repo = user_repo
    
    async def execute(self, user_id: int, energy_cost: int) -> tuple[bool, str]:
        """
        –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
            energy_cost: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Ç—Ä–∞—Ç—ã
            
        Returns:
            tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_repo.get_by_id(user_id)
            if not user:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —ç–Ω–µ—Ä–≥–∏—é
            profile_uc = GetUserProfileUseCase(self.user_repo)
            profile = await profile_uc.execute(user_id)
            current_energy = profile['energy']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏
            if current_energy < energy_cost:
                return False, f"‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –ù—É–∂–Ω–æ: {energy_cost}, –µ—Å—Ç—å: {current_energy}"
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
            new_energy = current_energy - energy_cost
            success = await self.user_repo.update_resources(user_id, {"energy": new_energy})
            
            if success:
                return True, f"‚ö° –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {energy_cost} —ç–Ω–µ—Ä–≥–∏–∏"
            else:
                return False, "–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞—Ç—ã —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False, "–û—à–∏–±–∫–∞ —Ç—Ä–∞—Ç—ã —ç–Ω–µ—Ä–≥–∏–∏"