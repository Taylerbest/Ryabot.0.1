# config/settings.py
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É Supabase –∏ PostgreSQL
"""

import os
from enum import Enum
from typing import Optional, List
from decimal import Decimal
import logging

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log'),
        logging.StreamHandler()
    ]
)

class DatabaseType(Enum):
    """–¢–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    SUPABASE = "supabase"
    POSTGRES = "postgres"

class CacheType(Enum):
    """–¢–∏–ø –∫—ç—à–∞"""
    MEMORY = "memory"
    REDIS = "redis"

class Settings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # ========== –û–°–ù–û–í–ù–´–ï ==========
    APP_NAME: str = "Ryabot Island"
    VERSION: str = "2.0.0"
    DEBUG: bool = os.getenv("DEBUG", "False").lower() == "true"
    
    # ========== –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–ò –ê–†–•–ò–¢–ï–ö–¢–£–†–´ ==========
    DATABASE_TYPE: DatabaseType = DatabaseType(os.getenv("DATABASE_TYPE", "supabase"))
    CACHE_TYPE: CacheType = CacheType(os.getenv("CACHE_TYPE", "memory"))
    
    # ========== TELEGRAM BOT ==========
    BOT_TOKEN: str = os.getenv("BOT_TOKEN", "")
    BOT_USERNAME: str = os.getenv("BOT_USERNAME", "ryabotislandbot")
    
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    
    # ========== SUPABASE ==========
    SUPABASE_URL: Optional[str] = os.getenv("SUPABASE_URL")
    SUPABASE_ANON_KEY: Optional[str] = os.getenv("SUPABASE_ANON_KEY")
    SUPABASE_SERVICE_KEY: Optional[str] = os.getenv("SUPABASE_SERVICE_KEY")
    
    # ========== POSTGRESQL ==========
    POSTGRES_HOST: str = os.getenv("POSTGRES_HOST", "localhost")
    POSTGRES_PORT: int = int(os.getenv("POSTGRES_PORT", "5432"))
    POSTGRES_DB: str = os.getenv("POSTGRES_DB", "ryabot_island")
    POSTGRES_USER: str = os.getenv("POSTGRES_USER", "postgres")
    POSTGRES_PASSWORD: str = os.getenv("POSTGRES_PASSWORD", "")
    
    # ========== REDIS ==========
    REDIS_HOST: str = os.getenv("REDIS_HOST", "localhost")
    REDIS_PORT: int = int(os.getenv("REDIS_PORT", "6379"))
    REDIS_PASSWORD: Optional[str] = os.getenv("REDIS_PASSWORD")
    
    # ========== –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´ ==========
    ADMIN_USER_IDS: List[int] = []
    
    admin_ids_str = os.getenv("ADMIN_USER_IDS", "")
    if admin_ids_str:
        try:
            ADMIN_USER_IDS = [int(uid.strip()) for uid in admin_ids_str.split(",") if uid.strip()]
        except ValueError:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_USER_IDS –≤ .env")
    
    # ========== –§–ò–ß–ò ==========
    QUANTUM_PASS_ENABLED: bool = os.getenv("QUANTUM_PASS_ENABLED", "true").lower() == "true"
    BLOCKCHAIN_AUDIT_ENABLED: bool = os.getenv("BLOCKCHAIN_AUDIT_ENABLED", "true").lower() == "true"
    CHARACTERS_ENABLED: bool = os.getenv("CHARACTERS_ENABLED", "true").lower() == "true"
    
    # ========== –ò–ì–†–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ ==========
    
    # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    INITIAL_RYABUCKS: int = 100
    INITIAL_ENERGY: int = 30
    INITIAL_ENERGY_MAX: int = 30
    
    # –≠–Ω–µ—Ä–≥–∏—è
    ENERGY_REGEN_MINUTES: int = 48  # –º–∏–Ω—É—Ç –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ 1 —ç–Ω–µ—Ä–≥–∏–∏
    ENERGY_FROM_AD: int = 30
    DAILY_AD_LIMIT: int = 3
    
    # RBTC
    RBTC_TOTAL_SUPPLY: int = 21_000_000
    BANK_INITIAL_RBTC: int = 1_050_000
    
    # Quantum Pass –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã
    QUANTUM_PASS_MULTIPLIERS = {
        "income": 2.0,      # x2 –¥–æ—Ö–æ–¥
        "speed": 2.0,       # x2 —Å–∫–æ—Ä–æ—Å—Ç—å
        "experience": 2.0,  # x2 –æ–ø—ã—Ç
        "rbtc": 2.0,       # x2 RBTC
        "golden_egg": 10.0, # x10 —à–∞–Ω—Å –∑–æ–ª–æ—Ç–æ–≥–æ —è–π—Ü–∞
    }
    
    # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã
    MAX_WORKERS_PER_HOUSE: int = 3
    MAX_HOUSES: int = 100
    
    # –§–µ—Ä–º–∞
    MAX_CHICKENS_PER_HENHOUSE: int = 25
    MAX_HENHOUSES: int = 100
    
    # –ó–µ–º–ª—è
    TOTAL_LAND_PLOTS: int = 10_000
    FIRST_PLOT_PRICE_RBTC: int = 200
    
    def validate_config(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        errors = []
        
        if not self.BOT_TOKEN:
            errors.append("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if self.DATABASE_TYPE == DatabaseType.SUPABASE:
            if not self.SUPABASE_URL or not self.SUPABASE_ANON_KEY:
                errors.append("SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        if self.DATABASE_TYPE == DatabaseType.POSTGRES:
            if not self.POSTGRES_HOST or not self.POSTGRES_USER:
                errors.append("POSTGRES_HOST –∏ POSTGRES_USER –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        return errors

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config_errors = settings.validate_config()
if config_errors:
    print("‚ùå –û–®–ò–ë–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    for error in config_errors:
        print(f"   - {error}")
    print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    exit(1)

print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {settings.DATABASE_TYPE.value} –ë–î")


ADMIN_IDS = [
    6471957469
]
