# config/game_stats.py
"""
–°–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
"""

import logging
from datetime import datetime, timedelta, timezone  # ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ timezone
from adapters.database.supabase.client import get_supabase_client

logger = logging.getLogger(__name__)


class GameStats:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã"""

    def __init__(self):
        self.bot_start_time = datetime.now()
        self.client = None

    async def _ensure_client(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        if not self.client:
            self.client = await get_supabase_client()

    def get_uptime(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        now = datetime.now()
        uptime_delta = now - self.bot_start_time

        days = uptime_delta.days
        hours = uptime_delta.seconds // 3600
        minutes = (uptime_delta.seconds % 3600) // 60

        return {
            'days': days,
            'hours': hours,
            'minutes': minutes,
            'total_seconds': int(uptime_delta.total_seconds())
        }

    async def get_total_users(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            await self._ensure_client()

            result = await self.client.execute_query(
                table="users",
                operation="select",
                columns=["user_id"],
            )

            return len(result) if result else 0

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return 0

    async def get_online_users(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–∫—Ç–∏–≤–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)"""
        try:
            await self._ensure_client()

            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú UTC timezone
            cutoff = datetime.now(timezone.utc) - timedelta(hours=1)

            result = await self.client.execute_query(
                table="users",
                operation="select",
                columns=["user_id"],
                filters={"last_active": {"gte": cutoff.isoformat()}}
            )

            count = len(result) if result else 0
            logger.info(f"üîç get_online_users: cutoff={cutoff.isoformat()}, count={count}")

            return count

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return 0

    async def get_new_users_today(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è"""
        try:
            await self._ensure_client()

            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú UTC timezone
            today = datetime.now(timezone.utc).replace(
                hour=0, minute=0, second=0, microsecond=0
            )

            result = await self.client.execute_query(
                table="users",
                operation="select",
                columns=["user_id"],
                filters={"created_at": {"gte": today.isoformat()}}
            )

            count = len(result) if result else 0
            logger.info(f"üîç get_new_users_today: today={today.isoformat()}, count={count}")

            return count

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å: {e}")
            return 0

    async def get_new_users_week(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é"""
        try:
            await self._ensure_client()

            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú UTC timezone
            week_ago = datetime.now(timezone.utc) - timedelta(days=7)

            result = await self.client.execute_query(
                table="users",
                operation="select",
                columns=["user_id"],
                filters={"created_at": {"gte": week_ago.isoformat()}}
            )

            return len(result) if result else 0

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {e}")
            return 0

    async def get_new_users_month(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü"""
        try:
            await self._ensure_client()

            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú UTC timezone
            month_start = datetime.now(timezone.utc).replace(
                day=1, hour=0, minute=0, second=0, microsecond=0
            )

            result = await self.client.execute_query(
                table="users",
                operation="select",
                columns=["user_id"],
                filters={"created_at": {"gte": month_start.isoformat()}}
            )

            return len(result) if result else 0

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {e}")
            return 0

    async def get_quantum_pass_holders(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π Quantum Pass"""
        try:
            await self._ensure_client()

            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú UTC timezone
            now = datetime.now(timezone.utc)

            result = await self.client.execute_query(
                table="users",
                operation="select",
                columns=["user_id"],
                filters={"quantum_pass_until": {"gte": now.isoformat()}}
            )

            return len(result) if result else 0

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π Quantum Pass: {e}")
            return 0

    async def get_all_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–æ–º"""
        return {
            'uptime': self.get_uptime(),
            'total_users': await self.get_total_users(),
            'online_users': await self.get_online_users(),
            'new_users_today': await self.get_new_users_today(),  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            'new_users_week': await self.get_new_users_week(),  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            'new_users_month': await self.get_new_users_month(),  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            'quantum_pass_holders': await self.get_quantum_pass_holders()
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
game_stats = GameStats()
