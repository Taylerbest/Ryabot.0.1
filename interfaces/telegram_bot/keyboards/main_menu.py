# interfaces/telegram_bot/keyboards/main_menu.py
"""
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞ —Å Reply –∫–Ω–æ–ø–∫–∞–º–∏
"""

import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from ..localization.texts import t

logger = logging.getLogger(__name__)


def get_start_menu(lang: str = "ru") -> ReplyKeyboardMarkup:
    """
    –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (–≤–Ω–µ –æ—Å—Ç—Ä–æ–≤–∞) —Å Reply –∫–Ω–æ–ø–∫–∞–º–∏
    """
    try:
        keyboard = [
            [KeyboardButton(text=t("btn_enter_island", lang))],
            [
                KeyboardButton(text=t("btn_settings", lang)),
                KeyboardButton(text=t("btn_support", lang))
            ]
        ]

        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder=t("menu_placeholder", lang),
            selective=False
        )
    except Exception as e:
        logger.error(f"Error creating start menu: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üèù –í–æ–π—Ç–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤")],
                [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
            ],
            resize_keyboard=True
        )


def get_island_menu(lang: str = "ru") -> ReplyKeyboardMarkup:
    """
    –ú–µ–Ω—é –æ—Å—Ç—Ä–æ–≤–∞ (–≤–Ω—É—Ç—Ä–∏ –æ—Å—Ç—Ä–æ–≤–∞) —Å Reply –∫–Ω–æ–ø–∫–∞–º–∏
    """
    try:
        keyboard = [
            [
                KeyboardButton(text=t("btn_farm", lang)),
                KeyboardButton(text=t("btn_town", lang))
            ],
            [
                KeyboardButton(text=t("btn_citizen", lang)),
                KeyboardButton(text=t("btn_work", lang))
            ],
            [
                KeyboardButton(text=t("btn_inventory", lang)),
                KeyboardButton(text=t("btn_friends", lang))
            ],
            [
                KeyboardButton(text=t("btn_leaderboard", lang)),
                KeyboardButton(text=t("btn_other", lang))
            ],
            [
                KeyboardButton(text=t("btn_leave_island", lang))
            ]
        ]

        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder=t("menu_placeholder", lang),
            selective=False
        )
    except Exception as e:
        logger.error(f"Error creating island menu: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üêî –§–µ—Ä–º–∞"), KeyboardButton(text="üèòÔ∏è –ì–æ—Ä–æ–¥")],
                [KeyboardButton(text="üë§ –ñ–∏—Ç–µ–ª—å"), KeyboardButton(text="üíº –†–∞–±–æ—Ç—ã")],
                [KeyboardButton(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"), KeyboardButton(text="üë• –î—Ä—É–∑—å—è")],
                [KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥"), KeyboardButton(text="üìã –ï—â—ë")],
                [KeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å –æ—Å—Ç—Ä–æ–≤")]
            ],
            resize_keyboard=True
        )


def get_language_keyboard() -> InlineKeyboardMarkup:
    """
    Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
    """
    try:
        keyboard = [
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]
        ]

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"Error creating language keyboard: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
                [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]
            ]
        )


def get_tutorial_keyboard(step: int, lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
    """
    try:
        if step == 0:  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
            keyboard = [
                [InlineKeyboardButton(text=t("btn_tutorial_start", lang), callback_data="tutorial_start")],
                [InlineKeyboardButton(text=t("btn_tutorial_skip", lang), callback_data="tutorial_skip")]
            ]
        elif 1 <= step <= 4:  # –®–∞–≥–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
            keyboard = [
                [InlineKeyboardButton(text=t("btn_tutorial_next", lang), callback_data=f"tutorial_step_{step + 1}")],
                [InlineKeyboardButton(text=t("btn_tutorial_skip", lang), callback_data="tutorial_skip")]
            ]
        elif step == 5:  # –ù–∞–π–º —Ä–∞–±–æ—á–µ–≥–æ
            keyboard = [
                [InlineKeyboardButton(text=t("btn_hire_worker", lang), callback_data="tutorial_hire_worker")],
                [InlineKeyboardButton(text=t("btn_tutorial_skip", lang), callback_data="tutorial_skip")]
            ]
        elif step == 6:  # –û–±—É—á–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton(text="üë©‚Äçüåæ –§–µ—Ä–º–µ—Ä" if lang == "ru" else "üë©‚Äçüåæ Farmer",
                                      callback_data="tutorial_train_farmer")],
                [InlineKeyboardButton(text="üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å" if lang == "ru" else "üèóÔ∏è Builder",
                                      callback_data="tutorial_train_builder")],
                [InlineKeyboardButton(text="üé£ –†—ã–±–∞–∫" if lang == "ru" else "üé£ Fisherman",
                                      callback_data="tutorial_train_fisherman")]
            ]
        else:  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton(text=t("btn_tutorial_complete", lang), callback_data="tutorial_complete")]
            ]

        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    except Exception as e:
        logger.error(f"Error creating tutorial keyboard for step {step}: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"tutorial_step_{step + 1}")]
            ]
        )


def get_academy_menu(lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ú–µ–Ω—é –∞–∫–∞–¥–µ–º–∏–∏
    """
    try:
        keyboard = [
            [InlineKeyboardButton(text=t("btn_labor_exchange", lang), callback_data="academy_labor_exchange")],
            [InlineKeyboardButton(text=t("btn_expert_courses", lang), callback_data="academy_expert_courses")],
            [InlineKeyboardButton(text=t("btn_training_class", lang), callback_data="academy_training_class")],
            [InlineKeyboardButton(text=t("btn_back", lang), callback_data="back_to_town")]
        ]

        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    except Exception as e:
        logger.error(f"Error creating academy menu: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üíº –ë–∏—Ä–∂–∞ —Ç—Ä—É–¥–∞", callback_data="academy_labor_exchange")],
                [InlineKeyboardButton(text="üéì –ö—É—Ä—Å—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", callback_data="academy_expert_courses")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_town")]
            ]
        )


def get_labor_exchange_menu(can_hire: bool, total_workers: int, lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ú–µ–Ω—é –±–∏—Ä–∂–∏ —Ç—Ä—É–¥–∞
    """
    try:
        keyboard = []

        if can_hire:
            keyboard.append([InlineKeyboardButton(text=t("btn_hire_worker", lang), callback_data="hire_worker")])

        keyboard.extend([
            [InlineKeyboardButton(text=t("btn_back", lang), callback_data="academy")]
        ])

        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    except Exception as e:
        logger.error(f"Error creating labor exchange menu: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="academy")]
            ]
        )


def get_expert_courses_menu(lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ú–µ–Ω—é –∫—É—Ä—Å–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    """
    try:
        keyboard = [
            [InlineKeyboardButton(text="üë©‚Äçüåæ –§–µ—Ä–º–µ—Ä" if lang == "ru" else "üë©‚Äçüåæ Farmer", callback_data="train_farmer")],
            [InlineKeyboardButton(text="üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å" if lang == "ru" else "üèóÔ∏è Builder",
                                  callback_data="train_builder")],
            [InlineKeyboardButton(text="üé£ –†—ã–±–∞–∫" if lang == "ru" else "üé£ Fisherman", callback_data="train_fisherman")],
            [InlineKeyboardButton(text="üå≤ –õ–µ—Å–Ω–∏–∫" if lang == "ru" else "üå≤ Forester", callback_data="train_forester")],
            [InlineKeyboardButton(text=t("btn_back", lang), callback_data="academy")]
        ]

        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    except Exception as e:
        logger.error(f"Error creating expert courses menu: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üë©‚Äçüåæ –§–µ—Ä–º–µ—Ä", callback_data="train_farmer")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="academy")]
            ]
        )


def get_back_keyboard(callback_data: str, lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    """
    try:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=t("btn_back", lang), callback_data=callback_data)]
            ]
        )
    except Exception as e:
        logger.error(f"Error creating back keyboard: {e}")
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]
            ]
        )