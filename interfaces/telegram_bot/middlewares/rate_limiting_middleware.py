"""
Rate limiting middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –∏ DDoS –∞—Ç–∞–∫
"""

import asyncio
import time
from typing import Callable, Dict, Any, Awaitable, Optional
from collections import defaultdict, deque
from datetime import datetime, timedelta

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Update, Message, CallbackQuery
import logging

logger = logging.getLogger(__name__)


class RateLimitData:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è rate limiting"""

    def __init__(self, max_requests: int = 10, window_seconds: int = 60):
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.requests: deque = deque()
        self.blocked_until: Optional[datetime] = None
        self.total_requests = 0
        self.blocked_requests = 0


class RateLimitingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""

    def __init__(
            self,
            default_rate_limit: int = 10,  # –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            default_window: int = 60,  # —Å–µ–∫—É–Ω–¥
            admin_rate_limit: int = 100,  # –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            block_duration: int = 300,  # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç
            cleanup_interval: int = 3600  # –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    ):
        self.default_rate_limit = default_rate_limit
        self.default_window = default_window
        self.admin_rate_limit = admin_rate_limit
        self.block_duration = block_duration
        self.cleanup_interval = cleanup_interval

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        self.user_data: Dict[int, RateLimitData] = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_requests': 0,
            'blocked_requests': 0,
            'unique_users': 0,
            'last_cleanup': time.time()
        }

        # –ê–¥–º–∏–Ω—ã (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        self.admins = {123456789, 987654321}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID

        logger.info(f"‚úÖ Rate limiting –∞–∫—Ç–∏–≤–µ–Ω: {default_rate_limit} req/{default_window}s")

    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
        return user_id in self.admins

    def _get_rate_limit_config(self, user_id: int) -> tuple[int, int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self._is_admin(user_id):
            return self.admin_rate_limit, self.default_window
        return self.default_rate_limit, self.default_window

    def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
        current_time = time.time()

        if current_time - self.stats['last_cleanup'] < self.cleanup_interval:
            return

        cutoff_time = datetime.now() - timedelta(seconds=self.default_window * 2)
        users_to_remove = []

        for user_id, data in self.user_data.items():
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            while data.requests and data.requests[0] < cutoff_time:
                data.requests.popleft()

            # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ
            if data.blocked_until and datetime.now() > data.blocked_until:
                data.blocked_until = None

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–≤–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            if (not data.requests and not data.blocked_until and
                    data.total_requests == 0):
                users_to_remove.append(user_id)

        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in users_to_remove:
            del self.user_data[user_id]

        self.stats['last_cleanup'] = current_time
        self.stats['unique_users'] = len(self.user_data)

        if users_to_remove:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(users_to_remove)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    def _is_rate_limited(self, user_id: int) -> tuple[bool, Optional[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_time = datetime.now()

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_data:
            max_requests, window_seconds = self._get_rate_limit_config(user_id)
            self.user_data[user_id] = RateLimitData(max_requests, window_seconds)

        user_data = self.user_data[user_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if user_data.blocked_until and current_time < user_data.blocked_until:
            remaining = int((user_data.blocked_until - current_time).total_seconds())
            return True, f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –µ—â–µ –Ω–∞ {remaining} —Å–µ–∫—É–Ω–¥"

        # –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —Å–Ω–∏–º–∞–µ–º –µ–µ
        if user_data.blocked_until and current_time >= user_data.blocked_until:
            user_data.blocked_until = None
            logger.info(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        cutoff_time = current_time - timedelta(seconds=user_data.window_seconds)
        while user_data.requests and user_data.requests[0] < cutoff_time:
            user_data.requests.popleft()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(user_data.requests) >= user_data.max_requests:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data.blocked_until = current_time + timedelta(seconds=self.block_duration)
            user_data.blocked_requests += 1
            self.stats['blocked_requests'] += 1

            logger.warning(
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {self.block_duration}s "
                f"–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ {user_data.max_requests}/{user_data.window_seconds}s"
            )

            return True, (
                f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n"
                f"–õ–∏–º–∏—Ç: {user_data.max_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ {user_data.window_seconds} —Å–µ–∫—É–Ω–¥\n"
                f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ {self.block_duration // 60} –º–∏–Ω—É—Ç"
            )

        return False, None

    def _record_request(self, user_id: int):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_data:
            max_requests, window_seconds = self._get_rate_limit_config(user_id)
            self.user_data[user_id] = RateLimitData(max_requests, window_seconds)

        user_data = self.user_data[user_id]
        user_data.requests.append(datetime.now())
        user_data.total_requests += 1
        self.stats['total_requests'] += 1

    def _get_user_id(self, event: TelegramObject) -> Optional[int]:
        """–ò–∑–≤–ª–µ—á—å user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è"""
        if hasattr(event, 'from_user') and event.from_user:
            return event.from_user.id
        elif hasattr(event, 'message') and event.message and event.message.from_user:
            return event.message.from_user.id
        return None

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ middleware"""

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
        self._cleanup_old_data()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id
        user_id = self._get_user_id(event)

        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not user_id:
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        is_limited, message = self._is_rate_limited(user_id)

        if is_limited:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            if isinstance(event, Message):
                try:
                    await event.answer(
                        f"üö´ **Rate Limit**\n\n{message}",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ rate limit —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            elif isinstance(event, CallbackQuery):
                try:
                    await event.answer(
                        text=f"Rate limit: {message}",
                        show_alert=True
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ rate limit callback: {e}")

            # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            return None

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        self._record_request(user_id)

        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        try:
            return await handler(event, data)
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handler –ø–æ—Å–ª–µ rate limiting: {e}")
            raise

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting"""
        return {
            **self.stats,
            'active_users': len(self.user_data),
            'blocked_users': sum(
                1 for data in self.user_data.values()
                if data.blocked_until and datetime.now() < data.blocked_until
            ),
            'config': {
                'default_rate_limit': self.default_rate_limit,
                'default_window': self.default_window,
                'admin_rate_limit': self.admin_rate_limit,
                'block_duration': self.block_duration
            }
        }

    def unblock_user(self, user_id: int) -> bool:
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if user_id in self.user_data:
            self.user_data[user_id].blocked_until = None
            logger.info(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é")
            return True
        return False

    def set_custom_limit(self, user_id: int, max_requests: int, window_seconds: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_data:
            self.user_data[user_id] = RateLimitData(max_requests, window_seconds)
        else:
            self.user_data[user_id].max_requests = max_requests
            self.user_data[user_id].window_seconds = window_seconds

        logger.info(f"‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç {max_requests}/{window_seconds}s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä middleware
rate_limiter = RateLimitingMiddleware(
    default_rate_limit=15,  # 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    default_window=60,  # –æ–∫–Ω–æ –≤ 60 —Å–µ–∫—É–Ω–¥
    admin_rate_limit=100,  # 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    block_duration=300,  # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç
    cleanup_interval=1800  # –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
)

logger.info("‚úÖ Rate limiting middleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")