# interfaces/telegram_bot/handlers/specialists.py
"""
Specialist Handler - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–π–º–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ (GDD –≤–µ—Ä—Å–∏—è)
"""

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from services.specialist_service import SpecialistService, SPECIALIST_CONFIG
from services.energy_service import EnergyService
from adapters.database.supabase.repositories.user_repository import SupabaseUserRepository
from adapters.database.supabase.client import get_supabase_client

logger = logging.getLogger(__name__)
router = Router(name="specialists")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
_specialist_service = None
_energy_service = None

async def get_specialist_service() -> SpecialistService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä SpecialistService"""
    global _specialist_service
    if not _specialist_service:
        client = await get_supabase_client()
        user_repo = SupabaseUserRepository(client)
        _specialist_service = SpecialistService(user_repo)
    return _specialist_service

async def get_energy_service() -> EnergyService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä EnergyService"""
    global _energy_service
    if not _energy_service:
        client = await get_supabase_client()
        user_repo = SupabaseUserRepository(client)
        _energy_service = EnergyService(user_repo)
    return _energy_service

@router.callback_query(F.data == "hire_specialists")
async def show_specialists_menu(query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞–π–º–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"""
    try:
        user_id = query.from_user.id
        specialist_service = await get_specialist_service()
        energy_service = await get_energy_service()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–Ω–µ—Ä–≥–∏–∏
        energy_info = await energy_service.get_energy_info(user_id)
        current_energy = energy_info["current"] if energy_info else "N/A"

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        available_specialists = await specialist_service.get_available_specialists(user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        current_specialists = await specialist_service.get_user_specialists(user_id)
        current_count = len([s for s in current_specialists if s["status"] != "dead"])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º
        max_specialists = await specialist_service._get_max_specialists(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"""„Ä∞Ô∏è üë• –ë–ò–†–ñ–ê –¢–†–£–î–ê ‚ÑπÔ∏è [üîã{current_energy}] „Ä∞Ô∏è

¬´–ó–¥–µ—Å—å —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∂–µ–ª–∞—é—â–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ —á–µ—Å—Ç–Ω—É—é –ø–ª–∞—Ç—É. –û—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–æ —ç–ª–∏—Ç–Ω—ã—Ö Q-—Å–æ–ª–¥–∞—Ç ‚Äî –∫–∞–∂–¥—ã–π –Ω–∞–π–¥—ë—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–≤–æ–∏–º –Ω–∞–≤—ã–∫–∞–º¬ª.

üë∑ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –Ω–∞–Ω—è—Ç–æ: {current_count}/{max_specialists}

üí° **–î–ª—è –Ω–∞–π–º–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è:**
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è
‚Ä¢ –†—è–±–∞–∫—Å—ã/RBTC –∏ –∂–∏–¥–∫–∏–π –æ–ø—ã—Ç  
‚Ä¢ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏

üè• **–†–∞–Ω–µ–Ω—ã—Ö:** {len([s for s in current_specialists if s['status'] == 'injured'])}
üíÄ **–ü–æ–≥–∏–±—à–∏—Ö:** {len([s for s in current_specialists if s['status'] == 'dead'])}"""

        keyboard = InlineKeyboardBuilder()

        if not available_specialists:
            keyboard.add(InlineKeyboardButton(
                text="üîí –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
                callback_data="no_specialists"
            ))
        else:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ 2 –≤ —Ä—è–¥
            for i in range(0, len(available_specialists), 2):
                row = []
                for j in range(2):
                    if i + j < len(available_specialists):
                        spec = available_specialists[i + j]

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤ —Ä—è–±–∞–∫—Å–∞—Ö –∏–ª–∏ RBTC
                        price_display = f"{spec['price_ryabucks']:,}üíµ"
                        if spec.get('price_rbtc'):
                            price_display += f"/{spec['price_rbtc']:.1f}üí†"

                        row.append(InlineKeyboardButton(
                            text=f"{spec['icon']} {price_display}",
                            callback_data=f"hire_spec:{spec['type']}"
                        ))
                keyboard.row(*row)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.row(
            InlineKeyboardButton(text="üë• –ú–æ–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã", callback_data="my_specialists"),
            InlineKeyboardButton(text="üè• –ì–æ—Å–ø–∏—Ç–∞–ª—å", callback_data="hospital")
        )

        keyboard.row(
            InlineKeyboardButton(text="üèõÔ∏è –ê–∫–∞–¥–µ–º–∏—è", callback_data="academy"),
            InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        )

        await query.message.edit_text(text, reply_markup=keyboard.as_markup())
        await query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è {query.from_user.id}: {e}")
        await query.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("hire_spec:"))
async def show_specialist_details(query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞–π–º–æ–º"""
    try:
        specialist_type = query.data.split(":")[1]
        user_id = query.from_user.id

        specialist_service = await get_specialist_service()
        available_specialists = await specialist_service.get_available_specialists(user_id)

        # –ù–∞—Ö–æ–¥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        specialist = None
        for spec in available_specialists:
            if spec["type"] == specialist_type:
                specialist = spec
                break

        if not specialist:
            await query.answer("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏
        income_range = f"{specialist['base_income']['min']}-{specialist['base_income']['max']}"
        locations = ", ".join(specialist["work_locations"])

        text = f"""„Ä∞Ô∏è {specialist['icon']} {specialist['name'].upper()} „Ä∞Ô∏è

{specialist['description']}

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–π–º–∞:**
‚Ä¢ {specialist['price_ryabucks']:,} —Ä—è–±–∞–∫—Å–æ–≤"""

        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ RBTC –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if specialist.get('price_rbtc'):
            text += f"\n‚Ä¢ {specialist['price_rbtc']:.2f} RBTC"

        text += f"""
‚Ä¢ {specialist['price_experience']} –∂–∏–¥–∫–æ–≥–æ –æ–ø—ã—Ç–∞  
‚Ä¢ {specialist['energy_cost']} —ç–Ω–µ—Ä–≥–∏–∏

üíº **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {income_range} —Ä—è–±–∞–∫—Å–æ–≤/—Å–º–µ–Ω—É
‚Ä¢ –õ–æ–∫–∞—Ü–∏–∏: {locations}
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ: {specialist['training_time_hours']} —á–∞—Å–æ–≤
‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ: {specialist['max_hp']} HP"""

        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if specialist.get("expedition_suitable") and specialist.get("base_stats"):
            stats = specialist["base_stats"]
            text += f"""

‚öîÔ∏è **–ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
‚Ä¢ –ê—Ç–∞–∫–∞: {stats.get('attack', 0)}
‚Ä¢ –ó–∞—â–∏—Ç–∞: {stats.get('defense', 0)}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.get('efficiency', 0)}%
‚Ä¢ –õ–µ—á–µ–Ω–∏–µ: {stats.get('healing_cost', 0)}üíµ / {stats.get('healing_time', 0)}—á"""

        keyboard = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–π–º–∞
        keyboard.add(InlineKeyboardButton(
            text=f"‚úÖ –ù–∞–Ω—è—Ç—å –∑–∞ {specialist['price_ryabucks']:,} üíµ",
            callback_data=f"confirm_hire:{specialist_type}:ryabucks"
        ))

        if specialist.get('price_rbtc'):
            keyboard.row(InlineKeyboardButton(
                text=f"‚úÖ –ù–∞–Ω—è—Ç—å –∑–∞ {specialist['price_rbtc']:.2f} üí†",
                callback_data=f"confirm_hire:{specialist_type}:rbtc"
            ))

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.row(InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="hire_specialists"))

        await query.message.edit_text(text, reply_markup=keyboard.as_markup())
        await query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è {query.from_user.id}: {e}")
        await query.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("confirm_hire:"))
async def hire_specialist(query: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–π–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
    try:
        parts = query.data.split(":")
        specialist_type = parts[1]
        currency = parts[2] if len(parts) > 2 else "ryabucks"
        user_id = query.from_user.id

        specialist_service = await get_specialist_service()

        # –ù–∞–Ω–∏–º–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        success, message = await specialist_service.hire_specialist(user_id, specialist_type, currency)

        if success:
            # –£—Å–ø–µ—à–Ω—ã–π –Ω–∞–π–º
            await query.answer(message, show_alert=True)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
            await show_specialists_menu(query)
        else:
            # –û—à–∏–±–∫–∞ –Ω–∞–π–º–∞
            await query.answer(message, show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–π–º–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è {query.from_user.id}: {e}")
        await query.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–π–º–µ", show_alert=True)

@router.callback_query(F.data == "my_specialists")
async def show_my_specialists(query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–Ω—è—Ç—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"""
    try:
        user_id = query.from_user.id
        specialist_service = await get_specialist_service()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        specialists = await specialist_service.get_user_specialists(user_id)

        if not specialists:
            text = """„Ä∞Ô∏è üë• –ú–û–ò –°–ü–ï–¶–ò–ê–õ–ò–°–¢–´ „Ä∞Ô∏è

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–Ω—è—Ç—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.
–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –Ω–∞ –±–∏—Ä–∂—É —Ç—Ä—É–¥–∞!"""

            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üë∑ –ù–∞–Ω—è—Ç—å", callback_data="hire_specialists"))
            keyboard.row(InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="hire_specialists"))

        else:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            available = [s for s in specialists if s["status"] == "available"]
            working = [s for s in specialists if s["status"] == "working"]
            training = [s for s in specialists if s["status"] == "training"]
            injured = [s for s in specialists if s["status"] == "injured"]
            dead = [s for s in specialists if s["status"] == "dead"]

            text = f"""„Ä∞Ô∏è üë• –ú–û–ò –°–ü–ï–¶–ò–ê–õ–ò–°–¢–´ ({len(specialists)}) „Ä∞Ô∏è

–í–∞—à–∏ –Ω–∞–Ω—è—Ç—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏:"""

            if available:
                text += f"\n\nüü¢ **–°–≤–æ–±–æ–¥–Ω—ã ({len(available)}):**"
                for spec in available[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
                    hp_bar = "‚ù§Ô∏è" if spec["current_hp"] == spec["max_hp"] else f"üíõ{spec['current_hp']}/{spec['max_hp']}"
                    text += f"\n‚Ä¢ {spec['icon']} {spec['name']} {hp_bar} (—ç—Ñ—Ñ. {spec['efficiency']}%)"

            if working:
                text += f"\n\nüü° **–†–∞–±–æ—Ç–∞—é—Ç ({len(working)}):**"
                for spec in working[:3]:
                    text += f"\n‚Ä¢ {spec['icon']} {spec['name']}"

            if training:
                text += f"\n\nüéì **–û–±—É—á–∞—é—Ç—Å—è ({len(training)}):**" 
                for spec in training[:3]:
                    text += f"\n‚Ä¢ {spec['icon']} {spec['name']}"

            if injured:
                text += f"\n\nüè• **–†–∞–Ω–µ–Ω—ã ({len(injured)}):**"
                for spec in injured[:3]:
                    hp_info = f"{spec['current_hp']}/{spec['max_hp']}‚ù§Ô∏è (–ª–µ—á–µ–Ω–∏–µ: {spec['healing_cost']}üíµ)"
                    text += f"\n‚Ä¢ {spec['icon']} {spec['name']} {hp_info}"

            if dead:
                text += f"\n\nüíÄ **–ü–æ–≥–∏–±–ª–∏ ({len(dead)}):**"
                for spec in dead[:3]:
                    text += f"\n‚Ä¢ üíÄ {spec['name']}"

            keyboard = InlineKeyboardBuilder()

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.row(
                InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏", callback_data="specialist_details"),
                InlineKeyboardButton(text="üíº –ù–∞ —Ä–∞–±–æ—Ç—É", callback_data="assign_work")
            )

            if injured:
                keyboard.row(
                    InlineKeyboardButton(text="üè• –õ–µ—á–∏—Ç—å –≤—Å–µ—Ö", callback_data="heal_all"),
                    InlineKeyboardButton(text="üéì –û–±—É—á–∏—Ç—å", callback_data="train_specialist")
                )
            else:
                keyboard.row(
                    InlineKeyboardButton(text="üéì –û–±—É—á–∏—Ç—å", callback_data="train_specialist"),
                    InlineKeyboardButton(text="‚öîÔ∏è –≠–∫—Å–ø–µ–¥–∏—Ü–∏—è", callback_data="form_squad")
                )

            keyboard.row(InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="hire_specialists"))

        await query.message.edit_text(text, reply_markup=keyboard.as_markup())
        await query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è {query.from_user.id}: {e}")
        await query.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "hospital")
async def show_hospital(query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Å–ø–∏—Ç–∞–ª—å —Å —Ä–∞–Ω–µ–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏"""
    try:
        user_id = query.from_user.id
        specialist_service = await get_specialist_service()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        all_specialists = await specialist_service.get_user_specialists(user_id)
        injured = [s for s in all_specialists if s["status"] == "injured"]

        if not injured:
            text = """„Ä∞Ô∏è üè• –ì–û–°–ü–ò–¢–ê–õ–¨ „Ä∞Ô∏è

¬´–ß–∏—Å—Ç—ã–µ –ø–∞–ª–∞—Ç—ã –∏ –æ–ø—ã—Ç–Ω—ã–µ –≤—Ä–∞—á–∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞—à–∏–º —Ä–∞–Ω–µ–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º¬ª.

‚úÖ –í—Å–µ –≤–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∑–¥–æ—Ä–æ–≤—ã!
–†–∞–Ω–µ–Ω—ã—Ö –Ω–µ—Ç."""

            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="hire_specialists"))

        else:
            text = f"""„Ä∞Ô∏è üè• –ì–û–°–ü–ò–¢–ê–õ–¨ ({len(injured)}) „Ä∞Ô∏è

¬´–ß–∏—Å—Ç—ã–µ –ø–∞–ª–∞—Ç—ã –∏ –æ–ø—ã—Ç–Ω—ã–µ –≤—Ä–∞—á–∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞—à–∏–º —Ä–∞–Ω–µ–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º¬ª.

üè• **–ü–∞—Ü–∏–µ–Ω—Ç—ã:**"""

            total_cost = 0
            for spec in injured:
                hp_info = f"{spec['current_hp']}/{spec['max_hp']}‚ù§Ô∏è"
                heal_cost = spec.get('healing_cost', 50)
                total_cost += heal_cost
                text += f"\n‚Ä¢ {spec['icon']} {spec['name']} {hp_info} - {heal_cost}üíµ"

            text += f"\n\nüí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è:** {total_cost:,} —Ä—è–±–∞–∫—Å–æ–≤"

            keyboard = InlineKeyboardBuilder()

            # –ö–Ω–æ–ø–∫–∏ –ª–µ—á–µ–Ω–∏—è
            if len(injured) > 1:
                keyboard.add(InlineKeyboardButton(
                    text=f"üè• –õ–µ—á–∏—Ç—å –≤—Å–µ—Ö ({total_cost:,}üíµ)",
                    callback_data="heal_all_confirm"
                ))

            # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3)
            for spec in injured[:3]:
                heal_cost = spec.get('healing_cost', 50)
                keyboard.row(InlineKeyboardButton(
                    text=f"ü©π {spec['icon']} {heal_cost}üíµ",
                    callback_data=f"heal_spec:{spec['id']}"
                ))

            keyboard.row(InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="hire_specialists"))

        await query.message.edit_text(text, reply_markup=keyboard.as_markup())
        await query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–æ—Å–ø–∏—Ç–∞–ª—è –¥–ª—è {query.from_user.id}: {e}")
        await query.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("heal_spec:"))
async def heal_individual_specialist(query: CallbackQuery):
    """–í—ã–ª–µ—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
    try:
        specialist_id = int(query.data.split(":")[1])
        user_id = query.from_user.id

        specialist_service = await get_specialist_service()

        # –õ–µ—á–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        success, message = await specialist_service.heal_specialist(user_id, specialist_id)

        if success:
            await query.answer(message, show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Å–ø–∏—Ç–∞–ª—å
            await show_hospital(query)
        else:
            await query.answer(message, show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–µ—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è {query.from_user.id}: {e}")
        await query.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–µ—á–µ–Ω–∏–∏", show_alert=True)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
@router.callback_query(F.data == "no_specialists")
async def no_specialists_available(query: CallbackQuery):
    await query.answer("üîí –£–ª—É—á—à–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º", show_alert=True)

@router.callback_query(F.data == "academy")
async def academy_placeholder(query: CallbackQuery):
    await query.answer("üöß –ê–∫–∞–¥–µ–º–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "heal_all")
async def heal_all_placeholder(query: CallbackQuery):
    await query.answer("üöß –ú–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "heal_all_confirm")
async def heal_all_confirm_placeholder(query: CallbackQuery):
    await query.answer("üöß –ú–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "specialist_details")
async def specialist_details_placeholder(query: CallbackQuery):
    await query.answer("üöß –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "assign_work")
async def assign_work_placeholder(query: CallbackQuery):
    await query.answer("üöß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "train_specialist")
async def train_specialist_placeholder(query: CallbackQuery):
    await query.answer("üöß –û–±—É—á–µ–Ω–∏–µ –≤ –∞–∫–∞–¥–µ–º–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "form_squad")
async def form_squad_placeholder(query: CallbackQuery):
    await query.answer("üöß –°–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

logger.info("‚úÖ Specialist handler (GDD –≤–µ—Ä—Å–∏—è) –∑–∞–≥—Ä—É–∂–µ–Ω")