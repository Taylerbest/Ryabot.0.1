# interfaces/telegram_bot/handlers/leaderboard.py
"""
Handler –º–µ–Ω—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config.texts import *

router = Router()
logger = logging.getLogger(__name__)


def get_leaderboard_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ - –¢–û–ß–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø"""
    keyboard = [
        [InlineKeyboardButton(text=BTN_LEADERS_FARM, callback_data="leaders_farm"),
         InlineKeyboardButton(text=BTN_LEADERS_WORK, callback_data="leaders_work"),
         InlineKeyboardButton(text=BTN_LEADERS_TRADE, callback_data="leaders_trade")],
        [InlineKeyboardButton(text=BTN_LEADERS_EXPEDITION, callback_data="leaders_expedition"),
         InlineKeyboardButton(text=BTN_LEADERS_GAMBLING, callback_data="leaders_gambling"),
         InlineKeyboardButton(text=BTN_LEADERS_FIGHT, callback_data="leaders_fight")],
        [InlineKeyboardButton(text=BTN_LEADERS_RACING, callback_data="leaders_racing"),
         InlineKeyboardButton(text=BTN_LEADERS_RBTC, callback_data="leaders_rbtc"),
         InlineKeyboardButton(text=BTN_LEADERS_PARTNER, callback_data="leaders_partner")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_leaderboard_data() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–æ–≤"""
    # TODO: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    return {
        "top_farmer": "‚Äî",
        "top_employer": "‚Äî",
        "top_trader": "‚Äî",
        "top_explorer": "‚Äî",
        "top_gambler": "‚Äî",
        "top_fighter": "‚Äî",
        "top_racer": "‚Äî",
        "top_rbtc": "‚Äî",
        "top_partner": "‚Äî"
    }


async def show_leaderboard_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"""
    try:
        leaders_data = await get_leaderboard_data()
        leaders_text = LEADERBOARD_MENU.format(**leaders_data)

        await message.answer(
            leaders_text,
            reply_markup=get_leaderboard_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {e}")
        await message.answer(ERROR_GENERAL)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–ô–¢–ò–ù–ì–û–í ===

@router.callback_query(F.data.startswith("leaders_"))
async def handle_leaderboard(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
    try:
        category = callback.data.split("_")[1]

        category_names = {
            "farm": "üè° –¢–û–ü 50 –§–ï–†–ú–ï–†–û–í",
            "work": "üíº –¢–û–ü 50 –†–ê–ë–û–¢–û–î–ê–¢–ï–õ–ï–ô",
            "trade": "‚öñÔ∏è –¢–û–ü 50 –¢–û–†–ì–û–í–¶–ï–í",
            "expedition": "üèï –¢–û–ü 50 –ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–ï–ô",
            "gambling": "üé≤ –¢–û–ü 50 –ê–ó–ê–†–¢–ù–ò–ö–û–í",
            "fight": "ü•ä –¢–û–ü 50 –ë–û–ô–¶–û–í",
            "racing": "üèá –¢–û–ü 50 –ì–û–ù–©–ò–ö–û–í",
            "rbtc": "üí† –¢–û–ü 50 –°–ñ–ò–ì–ê–¢–ï–õ–ï–ô",
            "partner": "ü§ù –¢–û–ü 50 –ü–ê–†–¢–ù–ï–†–û–í"
        }

        category_name = category_names.get(category, "–¢–û–ü 50")

        await callback.message.edit_text(
            f"{category_name}\n\n{SECTION_UNDER_DEVELOPMENT}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_leaderboard")]
            ])
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_leaderboard")
async def back_to_leaderboard(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"""
    try:
        leaders_data = await get_leaderboard_data()
        leaders_text = LEADERBOARD_MENU.format(**leaders_data)

        await callback.message.edit_text(
            leaders_text,
            reply_markup=get_leaderboard_keyboard()
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
