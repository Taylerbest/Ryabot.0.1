# interfaces/telegram_bot/handlers/admin.py
"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è Ryabot Island - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from config.settings import settings
from adapters.database.supabase.client import get_supabase_client

router = Router()
logger = logging.getLogger(__name__)


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    try:
        admin_ids = [
            123456789,  # –í–∞—à Telegram ID - –ó–ê–ú–ï–ù–ò–¢–ï!
            987654321  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã
        ]

        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if hasattr(settings, 'ADMIN_IDS') and settings.ADMIN_IDS:
            admin_ids.extend(settings.ADMIN_IDS)

        return user_id in admin_ids
    except Exception:
        return False


# === –ë–ê–ó–û–í–´–ï –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ===

@router.message(Command("admin_stats"))
async def admin_stats(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if not is_admin(message.from_user.id):
        return

    try:
        client = await get_supabase_client()

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = await client.execute_query(
            table="users",
            operation="count"
        )

        # –ù–æ–≤—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        from datetime import datetime, timedelta
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

        new_today = await client.execute_query(
            table="users",
            operation="count",
            filters={"created_at__gte": today.isoformat()}
        )

        # –û–Ω–ª–∞–π–Ω (–∞–∫—Ç–∏–≤–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
        online_threshold = (datetime.now() - timedelta(minutes=10)).isoformat()
        online_users = await client.execute_query(
            table="users",
            operation="count",
            filters={"last_active__gte": online_threshold}
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—É—Ç–æ—Ä–∏–∞–ª—É
        completed_tutorial = await client.execute_query(
            table="users",
            operation="count",
            filters={"tutorial_completed": True}
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        specialists = await client.execute_query(
            table="specialists",
            operation="count"
        )

        stats_text = f"""
üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê RYABOT ISLAND*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚Ä¢ –í—Å–µ–≥–æ: {total_users or 0}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today or 0}
‚Ä¢ –û–Ω–ª–∞–π–Ω: {online_users or 0}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª: {completed_tutorial or 0}

üéÆ *–ò–≥—Ä–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚Ä¢ –í—Å–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {specialists or 0}

üïí *–í—Ä–µ–º—è:* {datetime.now().strftime("%H:%M:%S")}
        """.strip()

        await message.answer(stats_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@router.message(Command("admin_user"))
async def admin_user(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: /admin_user 123456789"""
    if not is_admin(message.from_user.id):
        return

    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_user <user_id>")
            return

        target_user_id = int(args[1])
        client = await get_supabase_client()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await client.execute_query(
            table="users",
            operation="select",
            filters={"user_id": target_user_id},
            single=True
        )

        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        specialists = await client.execute_query(
            table="specialists",
            operation="select",
            columns=["specialist_type"],
            filters={"user_id": target_user_id}
        )

        specialist_types = {}
        if specialists:
            for s in specialists:
                spec_type = s['specialist_type']
                specialist_types[spec_type] = specialist_types.get(spec_type, 0) + 1

        user_info = f"""
üë§ *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï*

üÜî *ID:* {user['user_id']}
üë§ *–ò–º—è:* {user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üåç *–Ø–∑—ã–∫:* {user.get('language', 'ru')}
üÜô *–£—Ä–æ–≤–µ–Ω—å:* {user.get('level', 1)}

üí∞ *–†–µ—Å—É—Ä—Å—ã:*
üíµ –†—è–±–∞–∫—Å—ã: {user.get('ryabucks', 0):,}
üí† RBTC: {user.get('rbtc', 0):.4f}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {user.get('energy', 30)}
üß™ –ñ–∏–¥–∫–∏–π –æ–ø—ã—Ç: {user.get('liquid_experience', 0)}
üíé –ó–æ–ª–æ—Ç—ã–µ –æ—Å–∫–æ–ª–∫–∏: {user.get('golden_shards', 0)}

üìã *–ü—Ä–æ–≥—Ä–µ—Å—Å:*
üéØ –¢—É—Ç–æ—Ä–∏–∞–ª: {user.get('tutorial_step', 'not_started')}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω: {'–î–∞' if user.get('tutorial_completed', False) else '–ù–µ—Ç'}

üë• *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:* {len(specialists) if specialists else 0}
{chr(10).join([f"‚Ä¢ {spec_type}: {count}" for spec_type, count in specialist_types.items()]) if specialist_types else "‚Ä¢ –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"}

üìÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:* {user.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}
üïí *–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {user.get('last_active', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}
        """.strip()

        await message.answer(user_info, parse_mode="Markdown")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("admin_give"))
async def admin_give(message: Message):
    """–í—ã–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã: /admin_give 123456789 ryabucks 1000"""
    if not is_admin(message.from_user.id):
        return

    try:
        args = message.text.split()
        if len(args) != 4:
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_give <user_id> <resource> <amount>\n"
                "–†–µ—Å—É—Ä—Å—ã: ryabucks, rbtc, energy, liquid_experience, golden_shards"
            )
            return

        target_user_id = int(args[1])
        resource = args[2]
        amount = args[3]

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
        if resource == 'rbtc':
            amount = float(amount)
        else:
            amount = int(amount)

        valid_resources = ['ryabucks', 'rbtc', 'energy', 'liquid_experience', 'golden_shards']
        if resource not in valid_resources:
            await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å. –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(valid_resources)}")
            return

        client = await get_supabase_client()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await client.execute_query(
            table="users",
            operation="select",
            columns=["user_id", "username"],
            filters={"user_id": target_user_id},
            single=True
        )

        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –í—ã–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å
        if resource == 'energy':
            # –≠–Ω–µ—Ä–≥–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
            await client.execute_query(
                table="users",
                operation="update",
                data={resource: min(amount, 100)},  # –ú–∞–∫—Å–∏–º—É–º 100 —ç–Ω–µ—Ä–≥–∏–∏
                filters={"user_id": target_user_id}
            )
        else:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            current_user = await client.execute_query(
                table="users",
                operation="select",
                columns=[resource],
                filters={"user_id": target_user_id},
                single=True
            )

            current_value = current_user.get(resource, 0) if current_user else 0
            new_value = current_value + amount

            await client.execute_query(
                table="users",
                operation="update",
                data={resource: new_value},
                filters={"user_id": target_user_id}
            )

        await message.answer(
            f"‚úÖ –í—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.get('username', target_user_id)}:\n"
            f"üíé {amount} {resource}"
        )

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("admin_reset"))
async def admin_reset(message: Message):
    """–°–±—Ä–æ—Å–∏—Ç—å —Ç—É—Ç–æ—Ä–∏–∞–ª: /admin_reset 123456789"""
    if not is_admin(message.from_user.id):
        return

    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_reset <user_id>")
            return

        target_user_id = int(args[1])
        client = await get_supabase_client()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª
        await client.execute_query(
            table="users",
            operation="update",
            data={
                "tutorial_step": "not_started",
                "tutorial_completed": False,
                "character_preset": 1,
                "ryabucks": 0,
                "golden_shards": 1,
                "has_employer_license": False,
                "has_farm_license": False,
                "has_island_access": False
            },
            filters={"user_id": target_user_id}
        )

        # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        await client.execute_query(
            table="specialists",
            operation="delete",
            filters={"user_id": target_user_id}
        )

        await message.answer(f"‚úÖ –¢—É—Ç–æ—Ä–∏–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–±—Ä–æ—à–µ–Ω")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("admin_energy"))
async def admin_energy(message: Message):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é: /admin_energy 123456789 100"""
    if not is_admin(message.from_user.id):
        return

    try:
        args = message.text.split()
        if len(args) == 2:
            # –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            target_user_id = int(args[1])
            energy_amount = 100
        elif len(args) == 3:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            target_user_id = int(args[1])
            energy_amount = min(int(args[2]), 100)
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_energy <user_id> [amount]")
            return

        client = await get_supabase_client()

        await client.execute_query(
            table="users",
            operation="update",
            data={
                "energy": energy_amount,
                "last_active": datetime.now().isoformat()
            },
            filters={"user_id": target_user_id}
        )

        await message.answer(f"‚úÖ –≠–Ω–µ—Ä–≥–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {energy_amount}")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("admin_broadcast"))
async def admin_broadcast(message: Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º: /admin_broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!"""
    if not is_admin(message.from_user.id):
        return

    try:
        text = message.text.replace("/admin_broadcast ", "")
        if not text.strip():
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
            return

        client = await get_supabase_client()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await client.execute_query(
            table="users",
            operation="select",
            columns=["user_id"]
        )

        if not users:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return

        from aiogram import Bot
        from config.settings import settings
        bot = Bot(token=settings.BOT_TOKEN)

        sent_count = 0
        failed_count = 0

        broadcast_text = f"""
üì¢ *–°–û–û–ë–©–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ò*

{text}
        """.strip()

        for user in users:
            try:
                await bot.send_message(
                    user['user_id'],
                    broadcast_text,
                    parse_mode="Markdown"
                )
                sent_count += 1
            except Exception:
                failed_count += 1

        await bot.session.close()

        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")


# === –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ ===

@router.message(Command("admin"))
async def admin_help(message: Message):
    """–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    help_text = """
üõ† *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ RYABOT ISLAND*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ `/admin_stats` - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üë§ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:*
‚Ä¢ `/admin_user <id>` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ `/admin_give <id> <resource> <amount>` - –≤—ã–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã
‚Ä¢ `/admin_reset <id>` - —Å–±—Ä–æ—Å–∏—Ç—å —Ç—É—Ç–æ—Ä–∏–∞–ª
‚Ä¢ `/admin_energy <id> [amount]` - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é

üì¢ *–†–∞—Å—Å—ã–ª–∫–∞:*
‚Ä¢ `/admin_broadcast <—Ç–µ–∫—Å—Ç>` - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º

üí° *–†–µ—Å—É—Ä—Å—ã –¥–ª—è /admin_give:*
ryabucks, rbtc, energy, liquid_experience, golden_shards

üì± *–í–µ—Ä—Å–∏—è:* Ryabot Island v4.0
    """.strip()

    await message.answer(help_text, parse_mode="Markdown")


logger.info("‚úÖ Admin handler loaded")