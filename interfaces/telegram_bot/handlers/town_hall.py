# interfaces/telegram_bot/handlers/town_hall.py
"""
Town Hall Handler - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Ç—É—à–∏ –∏ –ª–∏—Ü–µ–Ω–∑–∏–π
"""

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from services.license_service import LicenseService, LICENSE_CONFIG
from services.energy_service import EnergyService
from adapters.database.supabase.repositories.user_repository import SupabaseUserRepository
from adapters.database.supabase.client import get_supabase_client
from config.texts import TOWN_HALL_TEXTS

logger = logging.getLogger(__name__)
router = Router(name="town_hall")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
_license_service = None
_energy_service = None

async def get_license_service() -> LicenseService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä LicenseService"""
    global _license_service
    if not _license_service:
        client = await get_supabase_client()
        user_repo = SupabaseUserRepository(client)
        _license_service = LicenseService(user_repo)
    return _license_service

async def get_energy_service() -> EnergyService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä EnergyService"""
    global _energy_service
    if not _energy_service:
        client = await get_supabase_client()
        user_repo = SupabaseUserRepository(client)
        _energy_service = EnergyService(user_repo)
    return _energy_service

@router.callback_query(F.data == "town_hall")
async def show_town_hall(query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Ç—É—à–∏"""
    try:
        user_id = query.from_user.id
        energy_service = await get_energy_service()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–Ω–µ—Ä–≥–∏–∏
        energy_info = await energy_service.get_energy_info(user_id)
        current_energy = energy_info["current"] if energy_info else "N/A"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"""„Ä∞Ô∏è„Ä∞Ô∏è üèõ –†–ê–¢–£–®–ê ‚ÑπÔ∏è [üîã{current_energy}] „Ä∞Ô∏è„Ä∞Ô∏è

¬´–°—É—Ä–æ–≤–æ–µ —Å–µ—Ä–¥—Ü–µ –æ—Å—Ç—Ä–æ–≤–∞ –†—è–±–æ—Ç, –≥–¥–µ —Å—É–¥—å–±—ã –≤–µ—Ä—à–∞—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ø–µ—á–∞—Ç–µ–π –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. –ó–¥–µ—Å—å –≤—ã–¥–∞—é—Ç—Å—è –ª–∏—Ü–µ–Ω–∑–∏–∏, –≤–∑–∏–º–∞—é—Ç—Å—è –Ω–∞–ª–æ–≥–∏, –∞ –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–µ —Ñ–µ—Ä–º–µ—Ä—ã –æ—Ç—Å—Ç–∞–∏–≤–∞—é—Ç —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã¬ª."""

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –ú–æ–π –ö–∞–±–∏–Ω–µ—Ç
        keyboard.add(InlineKeyboardButton(
            text="üö™ –ú–æ–π –ö–∞–±–∏–Ω–µ—Ç",
            callback_data="my_office"
        ))

        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –õ–∏—Ü–µ–Ω–∑–∏–∏ –∏ –ü–æ—Ä—É—á–µ–Ω–∏—è
        keyboard.row(
            InlineKeyboardButton(text="üìú –õ–∏—Ü–µ–Ω–∑–∏–∏", callback_data="licenses"),
            InlineKeyboardButton(text="üîñ –ü–æ—Ä—É—á–µ–Ω–∏—è", callback_data="tasks")
        )

        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –ù–∞–≥—Ä–∞–¥—ã –∏ –ì–∏–ª—å–¥–∏–∏
        keyboard.row(
            InlineKeyboardButton(text="üéÅ –ù–∞–≥—Ä–∞–¥—ã", callback_data="rewards"),
            InlineKeyboardButton(text="üè∞ –ì–∏–ª—å–¥–∏–∏", callback_data="guilds")
        )

        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –ë–æ–Ω—É—Å—ã –∏ –ù–∞–∑–∞–¥
        keyboard.row(
            InlineKeyboardButton(text="üìÜ –ë–æ–Ω—É—Å—ã", callback_data="daily_bonuses"),
            InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_town")
        )

        await query.message.edit_text(text, reply_markup=keyboard.as_markup())
        await query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞—Ç—É—à–∏ –¥–ª—è {query.from_user.id}: {e}")
        await query.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –º–µ—Ç–æ–¥–∞ show_licenses –≤ town_hall.py

@router.callback_query(F.data == "licenses")
async def show_licenses(query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ª–∏—Ü–µ–Ω–∑–∏–π"""
    try:
        user_id = query.from_user.id
        license_service = await get_license_service()

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        licenses_data = await license_service.get_licenses_for_display(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        multipliers = await license_service.calculate_price_multipliers()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"""„Ä∞Ô∏è üìú –ë–Æ–†–û –õ–ò–¶–ï–ù–ó–ò–ô ‚ÑπÔ∏è „Ä∞Ô∏è

¬´–°—É—Ä–æ–≤—ã–π –∫–ª–µ—Ä–∫ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å—Ç–æ–ø–∫—É –±—É–º–∞–≥, –¥–µ—Ä–∂–∞ –Ω–∞–≥–æ—Ç–æ–≤–µ –∑–æ–ª–æ—Ç—ã–µ –ø–µ—á–∞—Ç–∏. –ö–∞–∂–¥–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Ü–µ–Ω—É¬ª.
"""

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()

        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ licenses_data –Ω–µ –ø—É—Å—Ç–æ–π
        if not licenses_data:
            text += "\n\n‚ö†Ô∏è –õ–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard.add(InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="town_hall"))
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏–∏
            for license_data in licenses_data:
                # –°—Ç—Ä–æ–∫–∞ —Å 3 –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏

                # 1. –ò–∫–æ–Ω–∫–∞ –∏ —É—Ä–æ–≤–µ–Ω—å (—Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–∞–π–¥)
                keyboard.add(InlineKeyboardButton(
                    text=f"{license_data['icon']} –£—Ä.{license_data['current_level']}",
                    url=license_data.get('telegra_link', 'https://telegra.ph')
                ))

                # 2. –¶–µ–Ω–∞ –≤ —Ä—è–±–∞–∫—Å–∞—Ö
                if license_data['is_max']:
                    ryabucks_text = "MAX"
                    ryabucks_callback = "license_maxed"
                else:
                    price = license_data['ryabucks_price']
                    if isinstance(price, str):
                        price = price.replace(',', '')  # ‚Üê –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ!
                        price = int(float(price))
                    ryabucks_text = f"üíµ {price:,}"
                    ryabucks_callback = f"buy_license:{license_data['type']}:ryabucks"

                keyboard.add(InlineKeyboardButton(
                    text=ryabucks_text,
                    callback_data=ryabucks_callback
                ))

                # 3. –¶–µ–Ω–∞ –≤ RBTC
                if license_data['is_max']:
                    rbtc_text = "MAX"
                    rbtc_callback = "license_maxed"
                elif license_data.get('rbtc_price'):
                    rbtc_price = license_data['rbtc_price']
                    if isinstance(rbtc_price, str):
                        rbtc_price = rbtc_price.replace(',', '')  # ‚Üê –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ!
                        rbtc_price = float(rbtc_price)
                    rbtc_text = f"üí† {rbtc_price:.2f}"
                    rbtc_callback = f"buy_license:{license_data['type']}:rbtc"
                else:
                    rbtc_text = "‚Äî"
                    rbtc_callback = "no_rbtc_price"

                keyboard.add(InlineKeyboardButton(
                    text=rbtc_text,
                    callback_data=rbtc_callback
                ))

            # –ü—Ä–∏–º–µ–Ω—è–µ–º adjust(3) —á—Ç–æ–±—ã –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –±—ã–ª–æ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
            keyboard.adjust(3)

            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤–Ω–∏–∑—É
            keyboard.row(InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="town_hall"))

        await query.message.edit_text(text, reply_markup=keyboard.as_markup())
        await query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∏—Ü–µ–Ω–∑–∏–π –¥–ª—è {query.from_user.id}: {e}", exc_info=True)
        await query.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("buy_license:"))
async def buy_license(query: CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data
        _, license_type, currency = query.data.split(":")
        user_id = query.from_user.id

        license_service = await get_license_service()

        # –ü—ã—Ç–∞–µ–º—Å—è –∫—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é
        success, message = await license_service.upgrade_license(user_id, license_type, currency)

        if success:
            # –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
            await query.answer(message, show_alert=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ª–∏—Ü–µ–Ω–∑–∏–π
            await show_licenses(query)
        else:
            # –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏
            await query.answer(message, show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è {query.from_user.id}: {e}")
        await query.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª–∏—Ü–µ–Ω–∑–∏–∏", show_alert=True)

@router.callback_query(F.data == "license_maxed")
async def license_maxed_notification(query: CallbackQuery):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    await query.answer("–õ–∏—Ü–µ–Ω–∑–∏—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! üéâ", show_alert=True)

@router.callback_query(F.data == "my_office")
async def show_my_office(query: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    await query.answer("üöß –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "tasks")
async def show_tasks(query: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ—Ä—É—á–µ–Ω–∏–π"""
    await query.answer("üöß –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ä—É—á–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "rewards")
async def show_rewards(query: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–∞–≥—Ä–∞–¥"""
    await query.answer("üöß –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "guilds")
async def show_guilds(query: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–∏–ª—å–¥–∏–π"""
    await query.answer("üöß –°–∏—Å—Ç–µ–º–∞ –≥–∏–ª—å–¥–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "daily_bonuses")
async def show_daily_bonuses(query: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤"""
    await query.answer("üöß –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(query: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑ start.py
        from .start import show_main_menu
        await show_main_menu(query.message, query.from_user.id)
        await query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é", show_alert=True)

@router.callback_query(F.data == "no_rbtc_price")
async def no_rbtc_price_handler(query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏–π –±–µ–∑ RBTC —Ü–µ–Ω—ã"""
    await query.answer("–≠—Ç—É –ª–∏—Ü–µ–Ω–∑–∏—é –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞ —Ä—è–±–∞–∫—Å—ã", show_alert=True)

@router.callback_query(F.data == "license_maxed")
async def license_maxed_notification(query: CallbackQuery):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    await query.answer("–õ–∏—Ü–µ–Ω–∑–∏—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! üéâ", show_alert=True)

logger.info("‚úÖ Town Hall handler –∑–∞–≥—Ä—É–∂–µ–Ω")