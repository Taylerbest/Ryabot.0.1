# interfaces/telegram_bot/handlers/citizen.py
"""
Handler –º–µ–Ω—é –∂–∏—Ç–µ–ª—è
"""

import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config.texts import *
from services.quest_service import quest_service
from adapters.database.supabase.client import get_supabase_client

router = Router()
logger = logging.getLogger(__name__)


def get_citizen_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∂–∏—Ç–µ–ª—è - –¢–û–ß–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø"""
    keyboard = [
        [InlineKeyboardButton(text=BTN_CITIZEN_PROPERTIES, callback_data="citizen_properties"),
         InlineKeyboardButton(text=BTN_CITIZEN_WARDROBE, callback_data="citizen_wardrobe")],
        [InlineKeyboardButton(text=BTN_CITIZEN_HISTORY, callback_data="citizen_history"),
         InlineKeyboardButton(text=BTN_CITIZEN_TASKS, callback_data="citizen_tasks")],
        [InlineKeyboardButton(text=BTN_CITIZEN_ACHIEVEMENTS, callback_data="citizen_achievements"),
         InlineKeyboardButton(text=BTN_CITIZEN_STATISTICS, callback_data="citizen_statistics")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_citizen_data(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∂–∏—Ç–µ–ª—è"""
    try:
        client = await get_supabase_client()

        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["username", "created_at", "has_employer_license", "liquid_experience", "level"],
            filters={"user_id": user_id},
            single=True
        )

        if not user_data:
            return {}

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        created_at = user_data.get('created_at', '2024-01-01')
        if isinstance(created_at, str):
            registration_date = created_at[:10].replace('-', '.')
        else:
            registration_date = "01.01.2024"

        return {
            "username": user_data.get('username', 'user'),
            "registration_date": registration_date,
            "farmer_rank": "–ù–æ–≤–∏—á–æ–∫",
            "employer_rank": "LV1" if user_data.get('has_employer_license') else "‚Äî",
            "trader_rank": "‚Äî",
            "burner_rank": "‚Äî",
            "explorer_rank": "‚Äî",
            "gambler_rank": "‚Äî",
            "racer_rank": "‚Äî",
            "fighter_rank": "‚Äî",
            "partner_rank": "‚Äî",
            "liquid_experience": user_data.get('liquid_experience', 0),
            "q_points": 0  # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –ë–î
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∂–∏—Ç–µ–ª—è: {e}")
        return {}


async def show_citizen_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∂–∏—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∂–∏—Ç–µ–ª—è
        citizen_data = await get_citizen_data(user_id)

        if not citizen_data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
        citizen_text = CITIZEN_MENU.format(**citizen_data)

        await message.answer(
            citizen_text,
            reply_markup=get_citizen_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –∂–∏—Ç–µ–ª—è: {e}")
        await message.answer(ERROR_GENERAL)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ê–ó–î–ï–õ–û–í –ñ–ò–¢–ï–õ–Ø ===

@router.callback_query(F.data == "citizen_tasks")
async def citizen_tasks(callback: CallbackQuery):
    """–ó–∞–¥–∞–Ω–∏—è –∂–∏—Ç–µ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–≤–µ—Å—Ç—ã"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        current_quest = await quest_service.get_current_quest(user_id)

        if current_quest:
            # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            quest_text = f"""
üìù *–ê–ö–¢–ò–í–ù–û–ï –ó–ê–î–ê–ù–ò–ï*

*{current_quest['title']}*

{current_quest['description']}

üí° *–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:*
{current_quest['instruction']}

üéÅ *{current_quest['reward_text']}*
            """.strip()

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_citizen")]
            ])
        else:
            # –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            quest_text = """
üìù *–ó–ê–î–ê–ù–ò–Ø*

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ—é —Ñ–µ—Ä–º—É –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ—Å—Ç—Ä–æ–≤.
            """.strip()

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_citizen")]
            ])

        await callback.message.edit_text(
            quest_text,
            reply_markup=keyboard
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–¥–∞–Ω–∏–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("citizen_"))
async def handle_citizen_section(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∂–∏—Ç–µ–ª—è"""
    try:
        section = callback.data.split("_")[1]

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "tasks" - –æ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ
        if section == "tasks":
            return

        section_names = {
            "properties": "üèû –í–õ–ê–î–ï–ù–ò–Ø",
            "wardrobe": "ü•º –ì–ê–†–î–ï–†–û–ë",
            "history": "üìñ –ò–°–¢–û–†–ò–Ø",
            "achievements": "üéØ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø",
            "statistics": "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê"
        }

        section_name = section_names.get(section, "–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –†–ê–ó–î–ï–õ")

        await callback.message.edit_text(
            f"{section_name}\n\n{SECTION_UNDER_DEVELOPMENT}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_citizen")]
            ])
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –∂–∏—Ç–µ–ª—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_citizen")
async def back_to_citizen(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∂–∏—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id

        citizen_data = await get_citizen_data(user_id)

        if not citizen_data:
            await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
            return

        citizen_text = CITIZEN_MENU.format(**citizen_data)

        await callback.message.edit_text(
            citizen_text,
            reply_markup=get_citizen_keyboard()
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∂–∏—Ç–µ–ª—é: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
