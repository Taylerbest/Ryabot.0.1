# interfaces/telegram_bot/handlers/citizen.py
"""
Handler –º–µ–Ω—é –∂–∏—Ç–µ–ª—è
"""

import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from core.domain.entities import TutorialStep
from config.texts import *
from services.quest_service import quest_service
from adapters.database.supabase.client import get_supabase_client

router = Router()
logger = logging.getLogger(__name__)


def get_citizen_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∂–∏—Ç–µ–ª—è - –¢–û–ß–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø"""
    keyboard = [
        [InlineKeyboardButton(text=BTN_CITIZEN_PROPERTIES, callback_data="citizen_properties"),
         InlineKeyboardButton(text=BTN_CITIZEN_WARDROBE, callback_data="citizen_wardrobe")],
        [InlineKeyboardButton(text=BTN_CITIZEN_HISTORY, callback_data="citizen_history"),
         InlineKeyboardButton(text=BTN_CITIZEN_TASKS, callback_data="citizen_tasks")],
        [InlineKeyboardButton(text=BTN_CITIZEN_ACHIEVEMENTS, callback_data="citizen_achievements"),
         InlineKeyboardButton(text=BTN_CITIZEN_STATISTICS, callback_data="citizen_statistics")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_citizen_data(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∂–∏—Ç–µ–ª—è"""
    try:
        client = await get_supabase_client()

        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["username", "created_at", "has_employer_license", "liquid_experience", "level"],
            filters={"user_id": user_id},
            single=True
        )

        if not user_data:
            return {}

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        created_at = user_data.get('created_at', '2024-01-01')
        if isinstance(created_at, str):
            registration_date = created_at[:10].replace('-', '.')
        else:
            registration_date = "01.01.2024"

        return {
            "username": user_data.get('username', 'user'),
            "registration_date": registration_date,
            "farmer_rank": "‚Äî",
            "employer_rank": "‚Äî",
            "trader_rank": "‚Äî",
            "burner_rank": "‚Äî",
            "explorer_rank": "‚Äî",
            "gambler_rank": "‚Äî",
            "racer_rank": "‚Äî",
            "fighter_rank": "‚Äî",
            "partner_rank": "‚Äî",
            "liquid_experience": user_data.get('liquid_experience', 0),
            "q_points": 0  # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –ë–î
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∂–∏—Ç–µ–ª—è: {e}")
        return {}


async def show_citizen_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∂–∏—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∂–∏—Ç–µ–ª—è
        citizen_data = await get_citizen_data(user_id)

        if not citizen_data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
        citizen_text = CITIZEN_MENU.format(**citizen_data)

        await message.answer(
            citizen_text,
            reply_markup=get_citizen_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –∂–∏—Ç–µ–ª—è: {e}")
        await message.answer(ERROR_GENERAL)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ê–ó–î–ï–õ–û–í –ñ–ò–¢–ï–õ–Ø ===

@router.callback_query(F.data == "citizen_tasks")
async def citizen_tasks(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        logger.info(f"Citizen tasks called for user {user_id}")

        from adapters.database.supabase.client import get_supabase_client
        client = await get_supabase_client()
        logger.info("Supabase client obtained")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["tutorial_step", "tutorial_completed"],
            filters={"user_id": user_id},
            single=True
        )

        logger.info(f"User data retrieved: {user_data}")

        if not user_data:
            logger.error("No user data found")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        tutorial_step_value = user_data.get("tutorial_step", "not_started")
        tutorial_completed = user_data.get("tutorial_completed", False)

        logger.info(f"Tutorial step: {tutorial_step_value}, completed: {tutorial_completed}")

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–≤–µ—Å—Ç "–ù–∞—á–∞–ª–æ" –µ—Å–ª–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω
        if not tutorial_completed:
            # –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –ë–î (—Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏)
            quest_stages = {
                "island_access_granted": "‚úÖ –ü–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø –Ω–∞ –æ—Å—Ç—Ä–æ–≤\n‚è≥ –ù–∞–π–º–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –≤ –ê–∫–∞–¥–µ–º–∏–∏",
                "task_hire_worker": "‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞ –æ—Å—Ç—Ä–æ–≤\n‚è≥ –ù–∞–π–º–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∑–∞ 30 —Ä—è–±–∞–∫—Å–æ–≤",
                "task_first_work": "‚úÖ –†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞–Ω—è—Ç\n‚è≥ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ä–∞–±–æ—Ç—É –≤ –º–æ—Ä–µ",
                "task_citizen_quest": "‚úÖ –ü–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n‚è≥ –ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞—Ç—É—à—É",
                "task_train_specialist": "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–∞—Ç—É—à–µ\n‚è≥ –û–±—É—á–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
                "task_buy_farm_license": "‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ–±—É—á–µ–Ω\n‚è≥ –ö—É–ø–∏—Ç–µ —Ñ–µ—Ä–º–µ—Ä—Å–∫—É—é –ª–∏—Ü–µ–Ω–∑–∏—é",
                "task_buy_land": "‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –ø–æ–ª—É—á–µ–Ω–∞\n‚è≥ –ö—É–ø–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫ –∑–µ–º–ª–∏",
                "task_build_crop_bed": "‚úÖ –ó–µ–º–ª—è –∫—É–ø–ª–µ–Ω–∞\n‚è≥ –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä—è–¥–∫—É",
                "task_plant_grain": "‚úÖ –ì—Ä—è–¥–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞\n‚è≥ –ü–æ—Å–∞–¥–∏—Ç–µ –∑–µ—Ä–Ω–æ",
                "task_build_hen_house": "‚úÖ –ó–µ—Ä–Ω–æ –ø–æ—Å–∞–∂–µ–Ω–æ\n‚è≥ –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –∫—É—Ä—è—Ç–Ω–∏–∫",
                "task_buy_chicken": "‚úÖ –ö—É—Ä—è—Ç–Ω–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω\n‚è≥ –ö—É–ø–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫—É—Ä–∏—Ü—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ"
            }

            progress_text = quest_stages.get(
                tutorial_step_value,
                "‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è"
            )

            quest_text = f"""üìù –ó–ê–î–ê–ù–ò–ï: –ù–ê–ß–ê–õ–û

üéØ –¶–µ–ª—å: –û–±—É—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—é —Ñ–µ—Ä–º—É –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ

{progress_text}

üí∞ –ù–∞–≥—Ä–∞–¥–∞: 200 —Ä—è–±–∞–∫—Å–æ–≤, 100 –æ–ø—ã—Ç–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_citizen")]
            ])

            logger.info("Sending quest text to user")
            await callback.message.edit_text(quest_text, reply_markup=keyboard)
            await callback.answer()
            return

        # –ï—Å–ª–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª –∑–∞–≤–µ—Ä—à—ë–Ω
        quest_text = """üìù –ó–ê–î–ê–ù–ò–Ø

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ—é —Ñ–µ—Ä–º—É –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ—Å—Ç—Ä–æ–≤."""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_citizen")]
        ])

        logger.info("Sending completed quest message")
        await callback.message.edit_text(quest_text, reply_markup=keyboard)
        await callback.answer()

    except Exception as e:
        logger.error(f"Citizen tasks error: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", show_alert=True)


@router.callback_query(F.data.startswith("citizen_"))
async def handle_citizen_section(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∂–∏—Ç–µ–ª—è"""
    try:
        section = callback.data.split("_")[1]

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "tasks" - –æ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ
        if section == "tasks":
            return

        section_names = {
            "properties": "üèû –í–õ–ê–î–ï–ù–ò–Ø",
            "wardrobe": "ü•º –ì–ê–†–î–ï–†–û–ë",
            "history": "üìñ –ò–°–¢–û–†–ò–Ø",
            "achievements": "üéØ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø",
            "statistics": "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê"
        }

        section_name = section_names.get(section, "–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –†–ê–ó–î–ï–õ")

        await callback.message.edit_text(
            f"{section_name}\n\n{SECTION_UNDER_DEVELOPMENT}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_citizen")]
            ])
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –∂–∏—Ç–µ–ª—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_citizen")
async def back_to_citizen(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∂–∏—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id

        citizen_data = await get_citizen_data(user_id)

        if not citizen_data:
            await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
            return

        citizen_text = CITIZEN_MENU.format(**citizen_data)

        await callback.message.edit_text(
            citizen_text,
            reply_markup=get_citizen_keyboard()
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∂–∏—Ç–µ–ª—é: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
