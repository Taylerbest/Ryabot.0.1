# interfaces/telegram_bot/handlers/inventory.py

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config.texts import *
from adapters.database.supabase.client import get_supabase_client

router = Router()
logger = logging.getLogger(__name__)


def get_inventory_keyboard(selected_section="wallet"):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä—é–∫–∑–∞–∫–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    selected_section - —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    """
    sections = [
        ("wallet", "üí∞ –ö–æ—à–µ–ª–µ–∫"),
        ("passes", "üé´ –î–æ–ø—É—Å–∫–∏"),
        ("products", "ü•ö –ü—Ä–æ–¥—É–∫—Ç—ã"),
        ("harvest", "ü•ï –£—Ä–æ–∂–∞–π"),
        ("animals", "üêÆ –ñ–∏–≤–æ—Ç–Ω—ã–µ"),
        ("seeds", "üçÉ –°–µ–º–µ–Ω–∞"),
        ("resources", "ü™µ –†–µ—Å—É—Ä—Å—ã"),
        ("boxes", "üì¶ –ö–æ—Ä–æ–±–∫–∏")
    ]

    keyboard = []
    row = []

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    for section_key, section_name in sections:
        if section_key == selected_section:
            button_text = f"üëâ{section_name}"
        else:
            button_text = section_name

        row.append(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"inventory_{section_key}"
            )
        )

        # –ö–æ–≥–¥–∞ –≤ —Ä—è–¥—É 2 –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if len(row) == 2:
            keyboard.append(row)
            row = []

    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
    if row:
        keyboard.append(row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_inventory_data(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        client = await get_supabase_client()
        user_data = await client.execute_query(
            table="users",
            operation="select",
            filters={"user_id": user_id},
            single=True
        )

        if not user_data:
            return {}

        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü
        # (animals, resources, items –∏ —Ç.–¥.)

        return {
            "ryabucks": user_data.get('ryabucks', 0),
            "rbtc": user_data.get('rbtc', 0),
            "storage_used": 0,  # TODO: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ
            "storage_total": 1000,
            "storage_percent": 0,

            # –î–æ–ø—É—Å–∫–∏
            "expedition_passes": 0,
            "anomaly_passes": 0,
            "farm_passes": 0,
            "city_passes": 0,
            "forest_passes": 0,
            "sea_passes": 0,
            "fight_passes": 0,
            "race_passes": 0,

            # –ü—Ä–æ–¥—É–∫—Ç—ã
            "eggs": 0,
            "milk": 0,
            "honey": 0,
            "fish": 0,
            "chicken_meat": 0,
            "chick_meat": 0,
            "pork": 0,
            "beef": 0,
            "veal": 0,
            "mutton": 0,
            "horse_meat": 0,
            "game_meat": 0,

            # –£—Ä–æ–∂–∞–π
            "grain": 0,
            "tomatoes": 0,
            "cucumbers": 0,
            "potatoes": 0,
            "carrots": 0,
            "grapes": 0,

            # –ñ–∏–≤–æ—Ç–Ω—ã–µ
            "chickens": 0,
            "roosters": 0,
            "chicks": 0,
            "cows": 0,
            "bulls": 0,
            "calves": 0,
            "pigs": 0,
            "piglets": 0,
            "sheep": 0,
            "lambs": 0,
            "bees": 0,
            "horses": 0,
            "foals": 0,

            # –°–µ–º–µ–Ω–∞
            "saplings": 0,
            "grain_seeds": 0,
            "tomato_seeds": 0,
            "cucumber_seeds": 0,
            "potato_seeds": 0,
            "carrot_seeds": 0,
            "grape_seeds": 0,

            # –†–µ—Å—É—Ä—Å—ã
            "golden_eggs": 0,
            "golden_shards": user_data.get('golden_shards', 0),
            "feathers": 0,
            "beeswax": 0,
            "horse_hair": 0,
            "sheep_wool": 0,
            "bristles": 0,
            "leather": 0,
            "bones": 0,
            "manure": 0,
            "stone": 0,
            "wood": user_data.get('wood', 0),

            # –ö–æ—Ä–æ–±–∫–∏
            "free_boxes": 0,
            "farm_boxes": 0,
            "work_boxes": 0,
            "rbtc_boxes": 0,
            "expedition_boxes": 0,
            "fight_boxes": 0,
            "race_boxes": 0,
            "pass_boxes": 0,
            "keys": user_data.get('golden_keys', 0)
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
        return {}


async def get_inventory_text(section: str, data: dict) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    texts = {
        "wallet": INVENTORY_MENU.format(**data),
        "passes": INVENTORY_PASSES.format(**data),
        "products": INVENTORY_PRODUCTS.format(**data),
        "harvest": INVENTORY_HARVEST.format(**data),
        "animals": INVENTORY_ANIMALS.format(**data),
        "seeds": INVENTORY_SEEDS.format(**data),
        "resources": INVENTORY_RESOURCES.format(**data),
        "boxes": INVENTORY_BOXES.format(**data)
    }

    return texts.get(section, "–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def show_inventory_menu(message: Message, section="wallet"):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä—é–∫–∑–∞–∫–∞"""
    try:
        user_id = message.from_user.id
        data = await get_inventory_data(user_id)
        text = await get_inventory_text(section, data)

        await message.answer(
            text,
            reply_markup=get_inventory_keyboard(section)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é —Ä—é–∫–∑–∞–∫–∞: {e}")
        await message.answer(ERROR_GENERAL)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@router.message(F.text == BTN_INVENTORY)
async def inventory_handler(message: Message):
    """–û—Ç–∫—Ä—ã—Ç—å —Ä—é–∫–∑–∞–∫ (–∫–æ—à–µ–ª–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
    await show_inventory_menu(message, section="wallet")


@router.callback_query(F.data.startswith("inventory_"))
async def inventory_section_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏ —Ä—é–∫–∑–∞–∫–∞"""
    try:
        section = callback.data.replace("inventory_", "")
        user_id = callback.from_user.id

        data = await get_inventory_data(user_id)
        text = await get_inventory_text(section, data)

        await callback.message.edit_text(
            text,
            reply_markup=get_inventory_keyboard(section)
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
