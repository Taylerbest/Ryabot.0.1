# interfaces/telegram_bot/handlers/start.py
"""
–ì–ª–∞–≤–Ω—ã–π handler —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –º–µ–Ω—é + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
"""

import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from core.domain.entities import TutorialStep, Language
from config.texts import *
from config.game_stats import game_stats
from services.tutorial_service import tutorial_service
from services.quest_service import quest_service
from adapters.database.supabase.client import get_supabase_client

router = Router()
logger = logging.getLogger(__name__)


def get_language_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=BTN_LANGUAGE_RU, callback_data="lang_ru")],
        [InlineKeyboardButton(text=BTN_LANGUAGE_EN, callback_data="lang_en")]
    ])


def get_start_menu() -> ReplyKeyboardMarkup:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (–≤–Ω–µ –æ—Å—Ç—Ä–æ–≤–∞)"""
    keyboard = [
        [KeyboardButton(text=BTN_ENTER_ISLAND)],
        [KeyboardButton(text=BTN_SETTINGS), KeyboardButton(text=BTN_SUPPORT)]
    ]

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )


def get_island_menu() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Å—Ç—Ä–æ–≤–∞ - –§–ò–ù–ê–õ–¨–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø (–ë–ï–ó –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞)"""
    keyboard = [
        [KeyboardButton(text=BTN_FARM), KeyboardButton(text=BTN_TOWN)],
        [KeyboardButton(text=BTN_CITIZEN), KeyboardButton(text=BTN_WORK)],
        [KeyboardButton(text=BTN_INVENTORY), KeyboardButton(text=BTN_FRIENDS)],
        [KeyboardButton(text=BTN_LEADERBOARD), KeyboardButton(text=BTN_OTHER)]
    ]

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –æ—Å—Ç—Ä–æ–≤–∞"
    )


def get_stats_keyboard(selected: str = "rbtc") -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –ø–∞–ª—å—Ü–∞"""
    keyboard_data = {
        "rbtc": ["üëâüìäüí†", "üìäüè°", "üìäüè¢", "üìäüíº"],
        "farm": ["üìäüí†", "üëâüìäüè°", "üìäüè¢", "üìäüíº"],
        "city": ["üìäüí†", "üìäüè°", "üëâüìäüè¢", "üìäüíº"],
        "work": ["üìäüí†", "üìäüè°", "üìäüè¢", "üëâüìäüíº"]
    }

    buttons = keyboard_data.get(selected, keyboard_data["rbtc"])

    keyboard = [
        [
            InlineKeyboardButton(text=buttons[0], callback_data="stats_rbtc"),
            InlineKeyboardButton(text=buttons[1], callback_data="stats_farm"),
            InlineKeyboardButton(text=buttons[2], callback_data="stats_city"),
            InlineKeyboardButton(text=buttons[3], callback_data="stats_work")
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_island_stats() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Å—Ç—Ä–æ–≤–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # TODO: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    return {
        "total_rbtc_mined": 0,
        "quantum_labs": 0,
        "friends_total": 0,
        "expeditions_total": 0,
        "anomalies_total": 0,
        "fights_total": 0,
        "races_total": 0,
        "boxes_total": 0
    }


async def format_welcome_message(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    uptime = stats['uptime']

    if uptime['days'] > 0:
        uptime_text = f"{uptime['days']}–¥ {uptime['hours']}—á {uptime['minutes']}–º"
    else:
        uptime_text = f"{uptime['hours']}—á {uptime['minutes']}–º"

    return WELCOME_TO_ISLAND.format(
        uptime=uptime_text,
        total_users=stats['total_users'],
        online_users=stats['online_users'],
        new_today=stats['new_users_today'],
        new_month=stats['new_users_month'],
        qpass_holders=stats['quantum_pass_holders']
    )


# === –ö–û–ú–ê–ù–î–ê /START ===

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"

        logger.info(f"üë§ /start –æ—Ç {user_id} (@{username})")

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = await get_supabase_client()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["user_id", "tutorial_step", "has_island_access", "has_employer_license"],
            filters={"user_id": user_id},
            single=True
        )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
        if not user_data:
            await client.execute_query(
                table="users",
                operation="insert",
                data={
                    "user_id": user_id,
                    "username": username,
                    "ryabucks": 100,
                    "golden_shards": 1,
                    "tutorial_step": "not_started"
                }
            )
            user_data = {"tutorial_step": "not_started", "has_island_access": False}

        tutorial_step = TutorialStep(user_data['tutorial_step'])

        # –ï—Å–ª–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª –Ω–µ –Ω–∞—á–∞—Ç - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        if tutorial_step == TutorialStep.NOT_STARTED:
            await message.answer(
                LANGUAGE_SELECTION_TITLE,
                reply_markup=get_language_keyboard()
            )
            return

        # –ï—Å–ª–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (–¥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å—Ç—Ä–æ–≤—É)
        if tutorial_step not in [TutorialStep.COMPLETED, TutorialStep.ISLAND_ACCESS_GRANTED]:
            hint = tutorial_service.get_next_step_hint(tutorial_step)
            await message.answer(f"üéØ –¢—É—Ç–æ—Ä–∏–∞–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n{hint}")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        stats = await game_stats.get_all_stats()
        welcome_text = await format_welcome_message(stats)

        await message.answer(
            welcome_text,
            reply_markup=get_start_menu()
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /start: {e}", exc_info=True)
        await message.answer(ERROR_GENERAL)


# === –í–´–ë–û–† –Ø–ó–´–ö–ê ===

@router.callback_query(F.data.startswith("lang_"))
async def select_language(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    try:
        user_id = callback.from_user.id
        lang_code = callback.data.split("_")[1]

        client = await get_supabase_client()
        await client.execute_query(
            table="users",
            operation="update",
            data={
                "language": lang_code,
                "tutorial_step": TutorialStep.CHARACTER_CREATION.value
            },
            filters={"user_id": user_id}
        )

        if lang_code == "ru":
            await callback.message.edit_text(LANGUAGE_SELECTED_RU, reply_markup=None)
        else:
            await callback.message.edit_text(LANGUAGE_SELECTED_EN, reply_markup=None)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        from .tutorial import get_character_keyboard
        await callback.message.answer(
            CHARACTER_CREATION_TITLE,
            reply_markup=get_character_keyboard()
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


# === –í–•–û–î –ù–ê –û–°–¢–†–û–í ===

@router.message(F.text == BTN_ENTER_ISLAND)
async def enter_island(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –Ω–∞ –æ—Å—Ç—Ä–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    try:
        user_id = message.from_user.id

        logger.info(f"üèù –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤: {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client = await get_supabase_client()
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["tutorial_step", "has_island_access", "has_employer_license"],
            filters={"user_id": user_id},
            single=True
        )

        if not user_data:
            logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if not user_data.get('has_island_access', False) and not user_data.get('has_employer_license', False):
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_id}")
            await message.answer("üéØ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—É—Ç–æ—Ä–∏–∞–ª!")
            return

        logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è {user_id}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ù–û–í–û–ï –º–µ–Ω—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats = await get_island_stats()
        menu_text = ISLAND_MAIN_MENU.format(**stats)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –º–µ–Ω—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        await message.answer(
            menu_text,
            reply_markup=get_stats_keyboard("rbtc")
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é
        await message.answer(
            "üèù –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_island_menu()
        )

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –Ω–∞ –æ—Å—Ç—Ä–æ–≤ –¥–ª—è {user_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}", exc_info=True)
        await message.answer(ERROR_ENTER_ISLAND)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===

@router.callback_query(F.data.startswith("stats_"))
async def handle_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        stats_type = callback.data.split("_")[1]

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_island_stats()
        menu_text = ISLAND_MAIN_MENU.format(**stats)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–ø–∞–ª–µ—Ü –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è)
        await callback.message.edit_text(
            menu_text,
            reply_markup=get_stats_keyboard(stats_type)
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ===

@router.message(F.text == BTN_TOWN)
async def town_menu(message: Message):
    """–ú–µ–Ω—é –≥–æ—Ä–æ–¥–∞"""
    try:
        from .town import show_town_menu
        await show_town_menu(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–æ—Ä–æ–¥–∞: {e}")
        await message.answer(ERROR_GENERAL)


@router.message(F.text == BTN_WORK)
async def work_menu(message: Message):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç"""
    try:
        from .work import show_work_menu
        await show_work_menu(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç: {e}")
        await message.answer(ERROR_GENERAL)


@router.message(F.text == BTN_CITIZEN)
async def citizen_menu(message: Message):
    """–ú–µ–Ω—é –∂–∏—Ç–µ–ª—è - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π handler"""
    try:
        from .citizen import show_citizen_menu
        await show_citizen_menu(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∂–∏—Ç–µ–ª—è: {e}")
        await message.answer(ERROR_GENERAL)


@router.message(F.text == BTN_FARM)
async def farm_menu(message: Message):
    """–ú–µ–Ω—é —Ñ–µ—Ä–º—ã"""
    try:
        from .farm import show_farm_menu
        await show_farm_menu(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–µ—Ä–º—ã: {e}")
        await message.answer(ERROR_GENERAL)


@router.message(F.text == BTN_INVENTORY)
async def inventory_menu(message: Message):
    """–ú–µ–Ω—é —Ä—é–∫–∑–∞–∫–∞"""
    try:
        from .inventory import show_inventory_menu
        await show_inventory_menu(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—é–∫–∑–∞–∫–∞: {e}")
        await message.answer(ERROR_GENERAL)


@router.message(F.text == BTN_FRIENDS)
async def friends_menu(message: Message):
    """–ú–µ–Ω—é –¥—Ä—É–∑–µ–π"""
    try:
        from .friends import show_friends_menu
        await show_friends_menu(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥—Ä—É–∑–µ–π: {e}")
        await message.answer(ERROR_GENERAL)


@router.message(F.text == BTN_LEADERBOARD)
async def leaderboard_menu(message: Message):
    """–ú–µ–Ω—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"""
    try:
        from .leaderboard import show_leaderboard_menu
        await show_leaderboard_menu(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {e}")
        await message.answer(ERROR_GENERAL)


@router.message(F.text == BTN_OTHER)
async def other_menu(message: Message):
    """–ú–µ–Ω—é –ø—Ä–æ—á–µ–≥–æ"""
    try:
        from .other import show_other_menu
        await show_other_menu(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—á–µ–≥–æ: {e}")
        await message.answer(ERROR_GENERAL)


# === –°–¢–ê–†–´–ï –ö–ù–û–ü–ö–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===

@router.message(F.text == BTN_SETTINGS)
async def settings_menu(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await message.answer(f"‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò*\n\n{SECTION_UNDER_DEVELOPMENT}")


@router.message(F.text == BTN_SUPPORT)
async def support_menu(message: Message):
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞"""
    await message.answer(f"üÜò *–ü–û–î–î–ï–†–ñ–ö–ê*\n\n{SECTION_UNDER_DEVELOPMENT}")
