# interfaces/telegram_bot/handlers/start.py
"""
–°—Ç–∞—Ä—Ç–æ–≤—ã–π handler —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –∏ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–¥–∞–Ω–∏–π
"""

import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from core.domain.entities import TutorialStep, Language
from config.texts import *
from config.game_stats import game_stats
from services.tutorial_service import tutorial_service
from services.quest_service import quest_service
from adapters.database.supabase.client import get_supabase_client

router = Router()
logger = logging.getLogger(__name__)


def get_language_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=BTN_LANGUAGE_RU, callback_data="lang_ru")],
        [InlineKeyboardButton(text=BTN_LANGUAGE_EN, callback_data="lang_en")]
    ])


def get_start_menu() -> ReplyKeyboardMarkup:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (–≤–Ω–µ –æ—Å—Ç—Ä–æ–≤–∞)"""
    keyboard = [
        [KeyboardButton(text=BTN_ENTER_ISLAND)],
        [KeyboardButton(text=BTN_SETTINGS), KeyboardButton(text=BTN_SUPPORT)]
    ]

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder=PLACEHOLDER_MENU
    )


def get_island_menu() -> ReplyKeyboardMarkup:
    """–ú–µ–Ω—é –æ—Å—Ç—Ä–æ–≤–∞"""
    keyboard = [
        [KeyboardButton(text=BTN_FARM), KeyboardButton(text=BTN_TOWN)],
        [KeyboardButton(text=BTN_CITIZEN), KeyboardButton(text=BTN_WORK)],
        [KeyboardButton(text=BTN_INVENTORY), KeyboardButton(text=BTN_FRIENDS)],
        [KeyboardButton(text=BTN_LEADERBOARD), KeyboardButton(text=BTN_OTHER)],
        [KeyboardButton(text=BTN_LEAVE_ISLAND)]
    ]

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder=PLACEHOLDER_MENU
    )


async def format_welcome_message(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    uptime = stats['uptime']

    if uptime['days'] > 0:
        uptime_text = f"{uptime['days']}–¥ {uptime['hours']}—á {uptime['minutes']}–º"
    else:
        uptime_text = f"{uptime['hours']}—á {uptime['minutes']}–º"

    return WELCOME_TO_ISLAND.format(
        uptime=uptime_text,
        total_users=stats['total_users'],
        online_users=stats['online_users'],
        new_today=stats['new_users_today'],
        new_month=stats['new_users_month'],
        qpass_holders=stats['quantum_pass_holders']
    )


# === –ö–û–ú–ê–ù–î–ê /START ===

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"

        logger.info(f"üë§ /start –æ—Ç {user_id} (@{username})")

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = await get_supabase_client()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["user_id", "tutorial_step", "has_island_access", "has_employer_license"],
            filters={"user_id": user_id},
            single=True
        )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
        if not user_data:
            await client.execute_query(
                table="users",
                operation="insert",
                data={
                    "user_id": user_id,
                    "username": username,
                    "ryabucks": 100,
                    "golden_shards": 1,
                    "tutorial_step": "not_started"
                }
            )
            user_data = {"tutorial_step": "not_started", "has_island_access": False}

        tutorial_step = TutorialStep(user_data['tutorial_step'])

        # –ï—Å–ª–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª –Ω–µ –Ω–∞—á–∞—Ç - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        if tutorial_step == TutorialStep.NOT_STARTED:
            await message.answer(
                LANGUAGE_SELECTION_TITLE,
                reply_markup=get_language_keyboard()
            )
            return

        # –ï—Å–ª–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        if tutorial_step not in [TutorialStep.COMPLETED, TutorialStep.ISLAND_ACCESS_GRANTED]:
            hint = tutorial_service.get_next_step_hint(tutorial_step)
            await message.answer(f"üéØ –¢—É—Ç–æ—Ä–∏–∞–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n{hint}")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        stats = await game_stats.get_all_stats()
        welcome_text = await format_welcome_message(stats)

        await message.answer(
            welcome_text,
            reply_markup=get_start_menu()
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /start: {e}", exc_info=True)
        await message.answer(ERROR_GENERAL)


# === –í–´–ë–û–† –Ø–ó–´–ö–ê ===

@router.callback_query(F.data.startswith("lang_"))
async def select_language(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    try:
        user_id = callback.from_user.id
        lang_code = callback.data.split("_")[1]

        client = await get_supabase_client()
        await client.execute_query(
            table="users",
            operation="update",
            data={
                "language": lang_code,
                "tutorial_step": TutorialStep.CHARACTER_CREATION.value
            },
            filters={"user_id": user_id}
        )

        if lang_code == "ru":
            await callback.message.edit_text(LANGUAGE_SELECTED_RU, reply_markup=None)
        else:
            await callback.message.edit_text(LANGUAGE_SELECTED_EN, reply_markup=None)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        from .tutorial import get_character_keyboard
        await callback.message.answer(
            CHARACTER_CREATION_TITLE,
            reply_markup=get_character_keyboard()
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


# === –í–•–û–î –ù–ê –û–°–¢–†–û–í ===

@router.message(F.text == BTN_ENTER_ISLAND)
async def enter_island(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –Ω–∞ –æ—Å—Ç—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô"""
    try:
        user_id = message.from_user.id

        logger.info(f"üèù –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤: {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client = await get_supabase_client()
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["tutorial_step", "has_island_access", "has_employer_license", "ryabucks", "rbtc", "energy",
                     "energy_max", "level", "experience", "username"],
            filters={"user_id": user_id},
            single=True
        )

        if not user_data:
            logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        logger.info(
            f"üìä has_island_access={user_data.get('has_island_access')}, has_employer_license={user_data.get('has_employer_license')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if not user_data.get('has_island_access', False) and not user_data.get('has_employer_license', False):
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_id}")
            await message.answer("üéØ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—É—Ç–æ—Ä–∏–∞–ª!")
            return

        logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –∏ —Ç–µ–∫—Å—Ç
        island_text = f"""
üèùÔ∏è –û—Å—Ç—Ä–æ–≤ Ryabot

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data.get('username', '–û—Å—Ç—Ä–æ–≤–∏—Ç—è–Ω–∏–Ω')}!
üÜô –£—Ä–æ–≤–µ–Ω—å: {user_data.get('level', 1)} | üìä –û–ø—ã—Ç: {user_data.get('experience', 0)}

üí∞ –†–µ—Å—É—Ä—Å—ã:
üíµ –†—è–±–∞–∫—Å—ã: {user_data.get('ryabucks', 0):,}
üí† RBTC: {user_data.get('rbtc', 0):.4f}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {user_data.get('energy', 30)}/{user_data.get('energy_max', 30)}

üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

        await message.answer(
            island_text,
            reply_markup=get_island_menu()
        )

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –Ω–∞ –æ—Å—Ç—Ä–æ–≤ –¥–ª—è {user_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}", exc_info=True)
        await message.answer(ERROR_ENTER_ISLAND)


# === –í–´–•–û–î –° –û–°–¢–†–û–í–ê ===

@router.message(F.text == BTN_LEAVE_ISLAND)
async def leave_island(message: Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ —Å –æ—Å—Ç—Ä–æ–≤–∞"""
    try:
        stats = await game_stats.get_all_stats()
        welcome_text = await format_welcome_message(stats)

        await message.answer(
            welcome_text,
            reply_markup=get_start_menu()
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {e}")
        await message.answer(ERROR_GENERAL)


# === –ñ–ò–¢–ï–õ–¨ ===

@router.message(F.text == BTN_CITIZEN)
async def citizen_menu(message: Message):
    """–ú–µ–Ω—é –∂–∏—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id

        current_quest = await quest_service.get_current_quest(user_id)

        if current_quest:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_CITIZEN_QUESTS, callback_data="citizen_quests")],
                [InlineKeyboardButton(text=BTN_CITIZEN_PROFILE, callback_data="citizen_profile")]
            ])

            quest_text = f"""
üë§ –ñ–ò–¢–ï–õ–¨ –û–°–¢–†–û–í–ê

üìã –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:
{current_quest['title']}

{current_quest['description']}

üí° –ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:
{current_quest['instruction']}

üéÅ {current_quest['reward_text']}
            """.strip()
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_CITIZEN_PROFILE, callback_data="citizen_profile")]
            ])
            quest_text = "üë§ –ñ–ò–¢–ï–õ–¨ –û–°–¢–†–û–í–ê\n\nüéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"

        await message.answer(quest_text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –∂–∏—Ç–µ–ª—è: {e}")
        await message.answer(ERROR_GENERAL)


# === –ó–ê–ì–õ–£–®–ö–ò ===

@router.message(F.text == BTN_FARM)
async def farm_menu(message: Message):
    await message.answer(f"üêî –§–ï–†–ú–ê\n\n{SECTION_UNDER_DEVELOPMENT}")


@router.message(F.text == BTN_WORK)
async def work_menu(message: Message):
    try:
        from .work import show_work_menu
        await show_work_menu(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç: {e}")
        await message.answer(ERROR_GENERAL)


@router.message(F.text == BTN_INVENTORY)
async def inventory_menu(message: Message):
    await message.answer(f"üéí –ò–ù–í–ï–ù–¢–ê–†–¨\n\n{SECTION_UNDER_DEVELOPMENT}")


@router.message(F.text == BTN_FRIENDS)
async def friends_menu(message: Message):
    await message.answer(f"üë• –î–†–£–ó–¨–Ø\n\n{SECTION_UNDER_DEVELOPMENT}")


@router.message(F.text == BTN_LEADERBOARD)
async def leaderboard_menu(message: Message):
    await message.answer(f"üèÜ –†–ï–ô–¢–ò–ù–ì\n\n{SECTION_UNDER_DEVELOPMENT}")


@router.message(F.text == BTN_OTHER)
async def other_menu(message: Message):
    await message.answer(f"üìã –ï–©–Å\n\n{SECTION_UNDER_DEVELOPMENT}")


@router.message(F.text == BTN_SETTINGS)
async def settings_menu(message: Message):
    await message.answer(f"‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò\n\n{SECTION_UNDER_DEVELOPMENT}")


@router.message(F.text == BTN_SUPPORT)
async def support_menu(message: Message):
    await message.answer(f"üÜò –ü–û–î–î–ï–†–ñ–ö–ê\n\n{SECTION_UNDER_DEVELOPMENT}")


@router.message(F.text == BTN_TOWN)
async def town_menu(message: Message):
    try:
        from .town import show_town_menu
        await show_town_menu(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–æ—Ä–æ–¥–∞: {e}")
        await message.answer(ERROR_GENERAL)
