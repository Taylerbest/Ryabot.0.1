# interfaces/telegram_bot/handlers/start.py
"""
–ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π handler —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –∏ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–¥–∞–Ω–∏–π
"""

import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

# Core imports
from core.use_cases.user.create_user import CreateUserUseCase, GetUserProfileUseCase, UpdateUserResourcesUseCase
from adapters.database.supabase.client import get_supabase_client
from adapters.database.supabase.repositories.user_repository import SupabaseUserRepository
from core.domain.entities import TutorialStep, Language

# Config and services
from config.texts import *
from config.game_stats import game_stats
from services.tutorial_service import tutorial_service
from services.quest_service import quest_service

router = Router()
logger = logging.getLogger(__name__)

async def get_user_use_cases():
    """–ü–æ–ª—É—á–∏—Ç—å use cases"""
    client = await get_supabase_client()
    user_repo = SupabaseUserRepository(client)
    
    return {
        'create_user': CreateUserUseCase(user_repo),
        'get_profile': GetUserProfileUseCase(user_repo),
        'update_resources': UpdateUserResourcesUseCase(user_repo)
    }

def get_language_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=BTN_LANGUAGE_RU, callback_data="lang_ru")],
        [InlineKeyboardButton(text=BTN_LANGUAGE_EN, callback_data="lang_en")]
    ])

def get_start_menu() -> ReplyKeyboardMarkup:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (–≤–Ω–µ –æ—Å—Ç—Ä–æ–≤–∞)"""
    keyboard = [
        [KeyboardButton(text=BTN_ENTER_ISLAND)],
        [KeyboardButton(text=BTN_SETTINGS), KeyboardButton(text=BTN_SUPPORT)]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder=PLACEHOLDER_MENU
    )

def get_island_menu() -> ReplyKeyboardMarkup:
    """–ú–µ–Ω—é –æ—Å—Ç—Ä–æ–≤–∞"""
    keyboard = [
        [KeyboardButton(text=BTN_FARM), KeyboardButton(text=BTN_TOWN)],
        [KeyboardButton(text=BTN_CITIZEN), KeyboardButton(text=BTN_WORK)],
        [KeyboardButton(text=BTN_INVENTORY), KeyboardButton(text=BTN_FRIENDS)],
        [KeyboardButton(text=BTN_LEADERBOARD), KeyboardButton(text=BTN_OTHER)],
        [KeyboardButton(text=BTN_LEAVE_ISLAND)]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder=PLACEHOLDER_MENU
    )

async def format_welcome_message(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    uptime = stats['uptime']
    
    if uptime['days'] > 0:
        uptime_text = f"{uptime['days']}–¥ {uptime['hours']}—á {uptime['minutes']}–º"
    else:
        uptime_text = f"{uptime['hours']}—á {uptime['minutes']}–º"
    
    return WELCOME_TO_ISLAND.format(
        uptime=uptime_text,
        total_users=stats['total_users'],
        online_users=stats['online_users'],
        new_today=stats['new_users_today'],
        new_month=stats['new_users_month'],
        qpass_holders=stats['quantum_pass_holders']
    )

# === –ö–û–ú–ê–ù–î–ê /START ===

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—É—Å—Ç–∏–ª /start")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        use_cases = await get_user_use_cases()
        user = await use_cases['create_user'].execute(user_id, username)
        
        if not user:
            await message.answer(ERROR_GENERAL)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª
        tutorial_step = await tutorial_service.get_tutorial_step(user_id)
        
        if tutorial_step == TutorialStep.NOT_STARTED:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
            await message.answer(
                LANGUAGE_SELECTION_TITLE,
                reply_markup=get_language_keyboard()
            )
            return
        
        elif tutorial_step in [
            TutorialStep.LANGUAGE_SELECTION,
            TutorialStep.CHARACTER_CREATION,
            TutorialStep.SHIPWRECK,
            TutorialStep.TAVERN_VISIT,
            TutorialStep.PAWN_SHOP,
            TutorialStep.TOWN_HALL_REGISTER,
            TutorialStep.EMPLOYER_LICENSE
        ]:
            # –¢—É—Ç–æ—Ä–∏–∞–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ - –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ tutorial handler
            hint = tutorial_service.get_next_step_hint(tutorial_step)
            await message.answer(f"üéØ *–¢—É—Ç–æ—Ä–∏–∞–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ*\n\n{hint}")
            return
        
        elif tutorial_step != TutorialStep.COMPLETED:
            # –î–æ—Å—Ç—É–ø –∫ –æ—Å—Ç—Ä–æ–≤—É –µ—Å—Ç—å, –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            current_quest = await quest_service.get_current_quest(user_id)
            if current_quest:
                await message.answer(
                    f"üéØ *–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!*\n\n"
                    f"üìã *{current_quest['title']}*\n"
                    f"{current_quest['description']}\n\n"
                    f"üí° {current_quest['instruction']}"
                )
            else:
                await message.answer("üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤!")
                
        # –¢—É—Ç–æ—Ä–∏–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –æ—Å—Ç—Ä–æ–≤—É –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
        stats = await game_stats.get_all_stats()
        welcome_text = await format_welcome_message(stats)
        
        await message.answer(
            welcome_text,
            reply_markup=get_start_menu()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(ERROR_GENERAL)

# === –í–´–ë–û–† –Ø–ó–´–ö–ê ===

@router.callback_query(F.data.startswith("lang_"))
async def select_language(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    try:
        user_id = callback.from_user.id
        lang_code = callback.data.split("_")[1]  # ru –∏–ª–∏ en
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –ë–î
        client = await get_supabase_client()
        await client.execute_query(
            table="users",
            operation="update",
            data={
                "language": lang_code,
                "tutorial_step": TutorialStep.CHARACTER_CREATION.value
            },
            filters={"user_id": user_id}
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if lang_code == "ru":
            await callback.message.edit_text(
                LANGUAGE_SELECTED_RU,
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                LANGUAGE_SELECTED_EN, 
                reply_markup=None
            )
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        from .tutorial import get_character_keyboard
        await callback.message.answer(
            CHARACTER_CREATION_TITLE,
            reply_markup=get_character_keyboard()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

# === –í–•–û–î –ù–ê –û–°–¢–†–û–í ===

@router.message(F.text == BTN_ENTER_ISLAND)
async def enter_island(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –Ω–∞ –æ—Å—Ç—Ä–æ–≤"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        client = await get_supabase_client()
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["tutorial_step", "has_island_access", "tutorial_completed"],
            filters={"user_id": user_id},
            single=True
        )
        
        if not user_data:
            await message.answer(ERROR_GENERAL)
            return
        
        current_step = TutorialStep(user_data['tutorial_step'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Å—Ç—Ä–æ–≤—É
        if not user_data.get('has_island_access', False) and current_step not in [
            TutorialStep.ISLAND_ACCESS_GRANTED,
            TutorialStep.TASK_HIRE_WORKER,
            TutorialStep.TASK_FIRST_WORK,
            TutorialStep.TASK_CITIZEN_QUEST,
            TutorialStep.TASK_TRAIN_SPECIALIST,
            TutorialStep.TASK_BUY_FARM_LICENSE,
            TutorialStep.TASK_BUY_LAND,
            TutorialStep.TASK_BUILD_CROP_BED,
            TutorialStep.TASK_PLANT_GRAIN,
            TutorialStep.TASK_BUILD_HENHOUSE,
            TutorialStep.TASK_BUY_CHICKEN,
            TutorialStep.COMPLETED
        ]:
            hint = tutorial_service.get_next_step_hint(current_step)
            await message.answer(f"üéØ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—É—Ç–æ—Ä–∏–∞–ª!\n\n{hint}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)
        
        if not profile:
            await message.answer(ERROR_GENERAL)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Å—Ç—Ä–æ–≤–∞
        island_text = ISLAND_MENU.format(
            username=profile.get('username', '–û—Å—Ç—Ä–æ–≤–∏—Ç—è–Ω–∏–Ω'),
            level=profile['level'],
            experience=profile['experience'],
            ryabucks=profile['ryabucks'],
            rbtc=f"{profile['rbtc']:.4f}",
            energy=profile['energy'],
            energy_max=profile['energy_max']
        )
        
        await message.answer(
            island_text,
            reply_markup=get_island_menu()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(ERROR_ENTER_ISLAND)

# === –í–´–•–û–î –° –û–°–¢–†–û–í–ê ===

@router.message(F.text == BTN_LEAVE_ISLAND)
async def leave_island(message: Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ —Å –æ—Å—Ç—Ä–æ–≤–∞"""
    try:
        stats = await game_stats.get_all_stats()
        welcome_text = await format_welcome_message(stats)
        
        await message.answer(
            welcome_text,
            reply_markup=get_start_menu()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ —Å –æ—Å—Ç—Ä–æ–≤–∞: {e}")
        await message.answer(ERROR_GENERAL)

# === –ñ–ò–¢–ï–õ–¨ - –°–ò–°–¢–ï–ú–ê –ó–ê–î–ê–ù–ò–ô ===

@router.message(F.text == BTN_CITIZEN)
async def citizen_menu(message: Message):
    """–ú–µ–Ω—é –∂–∏—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        current_quest = await quest_service.get_current_quest(user_id)
        
        if current_quest:
            # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_CITIZEN_QUESTS, callback_data="citizen_quests")],
                [InlineKeyboardButton(text=BTN_CITIZEN_PROFILE, callback_data="citizen_profile")],
                [InlineKeyboardButton(text=BTN_CITIZEN_ACHIEVEMENTS, callback_data="citizen_achievements")]
            ])
            
            quest_text = f"""
üë§ *–ñ–ò–¢–ï–õ–¨ –û–°–¢–†–û–í–ê*

üìã *–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:*
*{current_quest['title']}*

{current_quest['description']}

üí° *–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:*
{current_quest['instruction']}

üéÅ *{current_quest['reward_text']}*

üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
            """.strip()
            
        else:
            # –ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_CITIZEN_PROFILE, callback_data="citizen_profile")],
                [InlineKeyboardButton(text=BTN_CITIZEN_ACHIEVEMENTS, callback_data="citizen_achievements")]
            ])
            
            quest_text = f"""
üë§ *–ñ–ò–¢–ï–õ–¨ –û–°–¢–†–û–í–ê*

üéâ *–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!*
–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –æ–±—É—á–µ–Ω–∏—è!

üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
            """.strip()
        
        await message.answer(quest_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –∂–∏—Ç–µ–ª—è: {e}")
        await message.answer(ERROR_GENERAL)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ –ñ–ò–¢–ï–õ–Ø ===

@router.callback_query(F.data == "citizen_quests")
async def citizen_quests(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"""
    try:
        user_id = callback.from_user.id
        
        current_quest = await quest_service.get_current_quest(user_id)
        
        if current_quest:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–µ—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ "–ù–∞—á–∞–ª–æ")
            if current_quest["quest_id"] == "citizen_quest":
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç", callback_data="complete_citizen_quest")],
                    [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_citizen")]
                ])
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_citizen")]
                ])
            
            text = f"""
üìã *–ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ù–ò–Ø*

*{current_quest['title']}*

{current_quest['description']}

üí° *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
{current_quest['instruction']}

üéÅ *–ù–∞–≥—Ä–∞–¥–∞:* {current_quest['reward_text']}
            """.strip()
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_citizen")]
            ])
            text = "üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–¥–∞–Ω–∏–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "complete_citizen_quest")
async def complete_citizen_quest(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–ù–∞—á–∞–ª–æ'"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        if not await quest_service.is_quest_available(user_id, "citizen_quest"):
            await callback.answer("–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return
        
        # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)
        
        await use_cases['update_resources'].execute(user_id, {
            "experience": profile['experience'] + 50,
            "liquid_experience": profile['liquid_experience'] + 10
        })
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        from services.blockchain_service import blockchain_service
        await blockchain_service.log_action(
            "QUEST_COMPLETED", user_id, username,
            {"quest": "citizen_quest", "reward_exp": 50, "reward_liquid_exp": 10},
            significance=0
        )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        await quest_service.complete_quest(user_id, "citizen_quest")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.edit_text(
            f"""
‚úÖ *–ó–ê–î–ê–ù–ò–ï ¬´–ù–ê–ß–ê–õ–û¬ª –í–´–ü–û–õ–ù–ï–ù–û!*

üéÅ *–ü–æ–ª—É—á–µ–Ω–æ:*
üìä +50 –æ–ø—ã—Ç–∞
üß™ +10 –∂–∏–¥–∫–æ–≥–æ –æ–ø—ã—Ç–∞

üéØ *–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:* –û–±—É—á–∏—Ç–µ —Ä–∞–±–æ—á–µ–≥–æ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!
–ò–¥–∏—Ç–µ –≤ üèòÔ∏è –ì–æ—Ä–æ–¥ ‚Üí üéì –ê–∫–∞–¥–µ–º–∏—è ‚Üí üéì –ö—É—Ä—Å—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            """.strip(),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_citizen")]
            ])
        )
        
        await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "citizen_profile") 
async def citizen_profile(callback: CallbackQuery):
    """–ü—Ä–æ—Ñ–∏–ª—å –∂–∏—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)
        
        if not profile:
            await callback.answer(ERROR_GENERAL, show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_name = CHARACTER_NAMES.get(profile.get('character_preset', 1), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        profile_text = f"""
üë§ *–ü–†–û–§–ò–õ–¨ –ñ–ò–¢–ï–õ–Ø*

üé≠ *–ü–µ—Ä—Å–æ–Ω–∞–∂:* {character_name}
üÜî *{profile['username']}* (ID: {profile['user_id']})
üÜô *–£—Ä–æ–≤–µ–Ω—å {profile['level']}* | üìä *–û–ø—ã—Ç:* {profile['experience']}

üí∞ *–†–ï–°–£–†–°–´:*
üíµ {profile['ryabucks']:,} —Ä—è–±–∞–∫—Å–æ–≤
üí† {profile['rbtc']:.4f} RBTC
‚ö° {profile['energy']}/{profile['energy_max']} —ç–Ω–µ—Ä–≥–∏–∏
üß™ {profile['liquid_experience']} –∂–∏–¥–∫–æ–≥–æ –æ–ø—ã—Ç–∞
üíé {profile['golden_shards']} –∑–æ–ª–æ—Ç—ã—Ö –æ—Å–∫–æ–ª–∫–æ–≤

üìú *–õ–ò–¶–ï–ù–ó–ò–ò:*
{"‚úÖ" if profile.get('has_employer_license') else "‚ùå"} –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å
{"‚úÖ" if profile.get('has_farm_license') else "‚ùå"} –§–µ—Ä–º–µ—Ä

üèùÔ∏è *–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –æ—Å—Ç—Ä–æ–≤–∞ —Å* {profile['created_at'][:10]}
        """.strip()
        
        await callback.message.edit_text(
            profile_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_citizen")]
            ])
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "citizen_achievements")
async def citizen_achievements(callback: CallbackQuery):
    """–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.message.edit_text(
        f"üèÜ *–î–û–°–¢–ò–ñ–ï–ù–ò–Ø*\n\n{SECTION_UNDER_DEVELOPMENT}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_citizen")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_citizen")
async def back_to_citizen(callback: CallbackQuery):
    """–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∂–∏—Ç–µ–ª—è"""
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω—é –∂–∏—Ç–µ–ª—è
    from aiogram.types import Message
    fake_message = Message(
        message_id=callback.message.message_id,
        date=callback.message.date,
        chat=callback.message.chat,
        content_type='text',
        options={},
        text=BTN_CITIZEN
    )
    fake_message.from_user = callback.from_user
    fake_message.answer = callback.message.edit_text
    
    await citizen_menu(fake_message)

# === –ó–ê–ì–õ–£–®–ö–ò –†–ê–ó–î–ï–õ–û–í ===

@router.message(F.text == BTN_FARM)
async def farm_menu(message: Message):
    """–§–µ—Ä–º–∞"""
    user_id = message.from_user.id
    
    if await quest_service.can_access_feature(user_id, "farm"):
        await message.answer(f"üêî *–§–ï–†–ú–ê*\n\n{SECTION_UNDER_DEVELOPMENT}")
    else:
        await message.answer(f"üêî *–§–ï–†–ú–ê*\n\n{SECTION_LOCKED}")

@router.message(F.text == BTN_WORK)
async def work_menu(message: Message):
    """–†—è–±–æ—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞–±–æ—Ç"""
    try:
        from .work import show_work_menu
        await show_work_menu(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç: {e}")
        await message.answer(ERROR_GENERAL)

@router.message(F.text == BTN_INVENTORY)
async def inventory_menu(message: Message):
    """–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
    await message.answer(f"üéí *–ò–ù–í–ï–ù–¢–ê–†–¨*\n\n{SECTION_UNDER_DEVELOPMENT}")

@router.message(F.text == BTN_FRIENDS)
async def friends_menu(message: Message):
    """–î—Ä—É–∑—å—è"""
    await message.answer(f"üë• *–î–†–£–ó–¨–Ø*\n\n{SECTION_UNDER_DEVELOPMENT}")

@router.message(F.text == BTN_LEADERBOARD)
async def leaderboard_menu(message: Message):
    """–†–µ–π—Ç–∏–Ω–≥"""
    await message.answer(f"üèÜ *–†–ï–ô–¢–ò–ù–ì*\n\n{SECTION_UNDER_DEVELOPMENT}")

@router.message(F.text == BTN_OTHER)
async def other_menu(message: Message):
    """–ï—â—ë"""
    await message.answer(f"üìã *–ï–©–Å*\n\n{SECTION_UNDER_DEVELOPMENT}")

@router.message(F.text == BTN_SETTINGS)
async def settings_menu(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await message.answer(f"‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò*\n\n{SECTION_UNDER_DEVELOPMENT}")

@router.message(F.text == BTN_SUPPORT)
async def support_menu(message: Message):
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞"""
    await message.answer(f"üÜò *–ü–û–î–î–ï–†–ñ–ö–ê*\n\n{SECTION_UNDER_DEVELOPMENT}")

# === –ü–ï–†–ï–•–û–î –í –ì–û–†–û–î ===

@router.message(F.text == BTN_TOWN)
async def town_menu(message: Message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–æ—Ä–æ–¥"""
    try:
        from .town import show_town_menu
        await show_town_menu(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–æ—Ä–æ–¥–∞: {e}")
        await message.answer(ERROR_GENERAL)