# interfaces/telegram_bot/handlers/start.py
"""
Handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from core.use_cases.user.create_user import CreateUserUseCase, GetUserProfileUseCase
from adapters.database.supabase.client import get_supabase_client
from adapters.database.supabase.repositories.user_repository import SupabaseUserRepository
from ..localization.texts import get_text, t
from ..keyboards.main_menu import get_start_menu, get_island_menu, get_back_to_menu_keyboard
from ..keyboards.inline_menus import get_settings_keyboard, get_language_keyboard, get_profile_keyboard, \
    get_other_menu_keyboard
from ..keyboards.town_menu import get_town_menu

router = Router()
logger = logging.getLogger(__name__)


async def get_user_use_cases():
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ Use Cases"""
    client = await get_supabase_client()
    user_repo = SupabaseUserRepository(client)

    return {
        'create_user': CreateUserUseCase(user_repo),
        'get_profile': GetUserProfileUseCase(user_repo)
    }


async def get_user_lang(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–ï–ó —Ä–µ–∫—É—Ä—Å–∏–∏"""
    try:
        from adapters.database.supabase.client import get_supabase_client

        client = await get_supabase_client()
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["language"],
            filters={"user_id": user_id},
            single=True
        )

        return user_data['language'] if user_data else 'ru'
    except:
        return 'ru'


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or f"user{user_id}"

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –Ω–∞–∂–∞–ª /start")

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        use_cases = await get_user_use_cases()
        user = await use_cases['create_user'].execute(user_id, username)

        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫
        lang = user.language

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = await get_text('welcome_text', user_id, username=username)

        await message.answer(welcome_text, reply_markup=get_start_menu(lang))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start –¥–ª—è {message.from_user.id}: {e}", exc_info=True)
        await message.answer(t('error_init'))


@router.callback_query(F.data == "enter_island")
async def enter_island(callback: CallbackQuery):
    """–í—Ö–æ–¥ –Ω–∞ –æ—Å—Ç—Ä–æ–≤"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        # –¢–µ–∫—Å—Ç –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤
        island_text = await get_text('island_welcome_text', user_id,
                                     username=profile.get('username') or '–ñ–∏—Ç–µ–ª—å',
                                     level=profile['level'],
                                     experience=profile['experience'],
                                     ryabucks=profile['ryabucks'],
                                     rbtc=profile['rbtc'],
                                     energy=profile['energy'],
                                     energy_max=profile['energy_max']
                                     )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.answer(island_text, reply_markup=get_island_menu(lang))
        await callback.message.delete()
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤ {callback.from_user.id}: {e}", exc_info=True)
        await callback.answer(t('error_enter_island'), show_alert=True)


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ò–ñ–ù–ï–ì–û –ú–ï–ù–Æ ==========

@router.message(F.text.in_(['üêî –§–µ—Ä–º–∞', 'üêî Farm']))
async def farm_menu(message: Message):
    """–ú–µ–Ω—é —Ñ–µ—Ä–º—ã"""
    user_id = message.from_user.id
    text = await get_text('farm_text', user_id)
    await message.answer(text)


@router.message(F.text.in_(['üèòÔ∏è –ì–æ—Ä–æ–¥', 'üèòÔ∏è Town']))
async def city_menu(message: Message):
    """–ú–µ–Ω—é –≥–æ—Ä–æ–¥–∞"""
    user_id = message.from_user.id
    lang = await get_user_lang(user_id)
    text = await get_text('town_text', user_id)
    await message.answer(text, reply_markup=get_town_menu(lang))


@router.message(F.text.in_(['üë§ –ñ–∏—Ç–µ–ª—å', 'üë§ Citizen']))
async def citizen_menu(message: Message):
    """–ú–µ–Ω—é –∂–∏—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        lang = await get_user_lang(user_id)
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        profile_text = await get_text('profile_text', user_id,
                                      username=profile.get('username') or '–ñ–∏—Ç–µ–ª—å',
                                      level=profile['level'],
                                      experience=profile['experience'],
                                      ryabucks=profile['ryabucks'],
                                      rbtc=profile['rbtc'],
                                      energy=profile['energy'],
                                      energy_max=profile['energy_max'],
                                      liquid_experience=profile['liquid_experience']
                                      )

        await message.answer(profile_text, reply_markup=get_profile_keyboard(lang))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        await message.answer(t('error_profile'))


@router.message(F.text.in_(['üíº –†—è–±–æ—Ç–∞', 'üíº Work']))
async def work_menu(message: Message):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç"""
    user_id = message.from_user.id
    text = await get_text('work_text', user_id)
    await message.answer(text)


@router.message(F.text.in_(['üéí –†—é–∫–∑–∞–∫', 'üéí Inventory']))
async def inventory_menu(message: Message):
    """–ú–µ–Ω—é —Ä—é–∫–∑–∞–∫–∞"""
    user_id = message.from_user.id
    text = await get_text('inventory_text', user_id)
    await message.answer(text)


@router.message(F.text.in_(['üë• –î—Ä—É–∑—å—è', 'üë• Friends']))
async def friends_menu(message: Message):
    """–ú–µ–Ω—é –¥—Ä—É–∑–µ–π"""
    user_id = message.from_user.id
    text = await get_text('friends_text', user_id)
    await message.answer(text)


@router.message(F.text.in_(['üèÜ –õ–∏–¥–µ—Ä—ã', 'üèÜ Leaderboard']))
async def leaderboard_menu(message: Message):
    """–ú–µ–Ω—é –ª–∏–¥–µ—Ä–æ–≤"""
    user_id = message.from_user.id
    text = await get_text('leaderboard_text', user_id)
    await message.answer(text)


@router.message(F.text.in_(['üìã –ü—Ä–æ—á–µ–µ', 'üìã Other']))
async def other_menu(message: Message):
    """–ú–µ–Ω—é –ø—Ä–æ—á–µ–µ"""
    user_id = message.from_user.id
    lang = await get_user_lang(user_id)
    text = await get_text('other_text', user_id)
    await message.answer(text, reply_markup=get_other_menu_keyboard(lang))


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò INLINE –ö–ù–û–ü–û–ö ==========

@router.callback_query(F.data == "settings")
async def settings_handler(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    user_id = callback.from_user.id
    lang = await get_user_lang(user_id)
    text = await get_text('settings_text', user_id)
    await callback.message.edit_text(text, reply_markup=get_settings_keyboard(lang))
    await callback.answer()


@router.callback_query(F.data == "language")
@router.callback_query(F.data == "change_language")
async def language_handler(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    user_id = callback.from_user.id
    lang = await get_user_lang(user_id)
    text = await get_text('language_text', user_id)
    await callback.message.edit_text(text, reply_markup=get_language_keyboard(lang))
    await callback.answer()


@router.callback_query(F.data.startswith("lang_"))
async def set_language(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞"""
    lang = callback.data.split("_")[1]
    user_id = callback.from_user.id

    # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —è–∑—ã–∫ –≤ –ë–î

    await callback.answer(t('language_changed', lang), show_alert=True)
    await callback.message.edit_text(
        t('language_changed_success', lang),
        reply_markup=get_settings_keyboard(lang)
    )


@router.callback_query(F.data == "profile")
async def profile_handler(callback: CallbackQuery):
    """–ü—Ä–æ—Ñ–∏–ª—å"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        profile_text = await get_text('profile_text', user_id,
                                      username=profile.get('username') or '–ñ–∏—Ç–µ–ª—å',
                                      level=profile['level'],
                                      experience=profile['experience'],
                                      ryabucks=profile['ryabucks'],
                                      rbtc=profile['rbtc'],
                                      energy=profile['energy'],
                                      energy_max=profile['energy_max'],
                                      liquid_experience=profile['liquid_experience']
                                      )

        await callback.message.edit_text(profile_text, reply_markup=get_profile_keyboard(lang))
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        await callback.answer(t('error_profile'), show_alert=True)


@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    lang = await get_user_lang(user_id)
    text = await get_text('welcome_title', user_id)
    await callback.message.edit_text(text, reply_markup=get_start_menu(lang))
    await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç - –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await callback.message.delete()
    await callback.answer()


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–î–ê–ù–ò–ô –ì–û–†–û–î–ê ==========

@router.callback_query(F.data.in_(['townhall', 'market', 'academy', 'ryabank', 'products',
                                   'pawnshop', 'tavern1', 'entertainment', 'realestate',
                                   'vetclinic', 'construction', 'hospital', 'quantumhub', 'cemetery']))
async def building_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π –≥–æ—Ä–æ–¥–∞"""
    user_id = callback.from_user.id
    lang = await get_user_lang(user_id)
    building = callback.data

    text = await get_text(f'{building}_text', user_id)
    await callback.message.edit_text(text, reply_markup=get_town_menu(lang))
    await callback.answer()


@router.callback_query(F.data.startswith("lang_"))
async def set_language(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞"""
    lang = callback.data.split("_")[1]
    user_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –ë–î
    try:
        use_cases = await get_user_use_cases()
        user_repo = use_cases['get_profile'].user_repo  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user_repo.update_resources(user_id, {"language": lang})

        await callback.answer(t('language_changed', lang), show_alert=True)
        await callback.message.edit_text(
            t('language_changed_success', lang),
            reply_markup=get_settings_keyboard(lang)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞", show_alert=True)
