# interfaces/telegram_bot/handlers/start.py
"""
–ù–û–í–´–ô —Å—Ç–∞—Ä—Ç–æ–≤—ã–π handler —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–º
"""

import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

# Core imports
from core.use_cases.user.create_user import CreateUserUseCase, GetUserProfileUseCase, UpdateUserResourcesUseCase
from adapters.database.supabase.client import get_supabase_client
from adapters.database.supabase.repositories.user_repository import SupabaseUserRepository
from core.domain.entities import TutorialStep, CharacterPreset

# Config and services
from config.texts import *
from config.game_stats import game_stats
from services.tutorial_service import tutorial_service

router = Router()
logger = logging.getLogger(__name__)

async def get_user_use_cases():
    """–ü–æ–ª—É—á–∏—Ç—å use cases"""
    client = await get_supabase_client()
    user_repo = SupabaseUserRepository(client)
    
    return {
        'create_user': CreateUserUseCase(user_repo),
        'get_profile': GetUserProfileUseCase(user_repo),
        'update_resources': UpdateUserResourcesUseCase(user_repo)
    }

def get_start_menu() -> ReplyKeyboardMarkup:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (–≤–Ω–µ –æ—Å—Ç—Ä–æ–≤–∞)"""
    keyboard = [
        [KeyboardButton(text=BTN_ENTER_ISLAND)],
        [KeyboardButton(text=BTN_SETTINGS), KeyboardButton(text=BTN_SUPPORT)]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder=PLACEHOLDER_MENU
    )

def get_island_menu() -> ReplyKeyboardMarkup:
    """–ú–µ–Ω—é –æ—Å—Ç—Ä–æ–≤–∞"""
    keyboard = [
        [KeyboardButton(text=BTN_FARM), KeyboardButton(text=BTN_TOWN)],
        [KeyboardButton(text=BTN_CITIZEN), KeyboardButton(text=BTN_WORK)],
        [KeyboardButton(text=BTN_INVENTORY), KeyboardButton(text=BTN_FRIENDS)],
        [KeyboardButton(text=BTN_LEADERBOARD), KeyboardButton(text=BTN_OTHER)],
        [KeyboardButton(text=BTN_LEAVE_ISLAND)]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder=PLACEHOLDER_MENU
    )

async def format_welcome_message(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    uptime = stats['uptime']
    
    if uptime['days'] > 0:
        uptime_text = f"{uptime['days']}–¥ {uptime['hours']}—á {uptime['minutes']}–º"
    else:
        uptime_text = f"{uptime['hours']}—á {uptime['minutes']}–º"
    
    return WELCOME_TO_ISLAND.format(
        uptime=uptime_text,
        total_users=stats['total_users'],
        online_users=stats['online_users'],
        new_today=stats['new_users_today'],
        new_month=stats['new_users_month'],
        qpass_holders=stats['quantum_pass_holders']
    )

# === –ö–û–ú–ê–ù–î–ê /START ===

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—É—Å—Ç–∏–ª /start")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        use_cases = await get_user_use_cases()
        user = await use_cases['create_user'].execute(user_id, username)
        
        if not user:
            await message.answer(ERROR_GENERAL)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª
        tutorial_step = await tutorial_service.get_tutorial_step(user_id)
        
        if tutorial_step == TutorialStep.NOT_STARTED:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            from .tutorial import router as tutorial_router
            from .tutorial import start_character_creation
            
            # –°–æ–∑–¥–∞–µ–º fake callback –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            from aiogram.types import CallbackQuery, User
            fake_callback = CallbackQuery(
                id="start_char", 
                from_user=message.from_user,
                chat_instance="start",
                data="start_character_creation",
                message=message
            )
            
            await start_character_creation(fake_callback, state)
            return
        
        elif tutorial_step != TutorialStep.COMPLETED:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª
            hint = tutorial_service.get_next_step_hint(tutorial_step)
            await message.answer(f"üéØ **–¢—É—Ç–æ—Ä–∏–∞–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ**\n\n{hint}")
            return
        
        # –¢—É—Ç–æ—Ä–∏–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
        stats = await game_stats.get_all_stats()
        welcome_text = await format_welcome_message(stats)
        
        await message.answer(
            welcome_text,
            reply_markup=get_start_menu()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(ERROR_GENERAL)

# === –í–•–û–î –ù–ê –û–°–¢–†–û–í ===

@router.message(F.text == BTN_ENTER_ISLAND)
async def enter_island(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –Ω–∞ –æ—Å—Ç—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª
        tutorial_step = await tutorial_service.get_tutorial_step(user_id)
        
        if tutorial_step != TutorialStep.COMPLETED:
            hint = tutorial_service.get_next_step_hint(tutorial_step)
            await message.answer(f"üéØ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—É—Ç–æ—Ä–∏–∞–ª!\n\n{hint}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)
        
        if not profile:
            await message.answer(ERROR_GENERAL)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Å—Ç—Ä–æ–≤–∞
        island_text = ISLAND_MENU.format(
            username=profile.get('username', '–û—Å—Ç—Ä–æ–≤–∏—Ç—è–Ω–∏–Ω'),
            level=profile['level'],
            experience=profile['experience'],
            ryabucks=profile['ryabucks'],
            rbtc=f"{profile['rbtc']:.4f}",
            energy=profile['energy'],
            energy_max=profile['energy_max']
        )
        
        await message.answer(
            island_text,
            reply_markup=get_island_menu()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(ERROR_ENTER_ISLAND)

# === –í–´–•–û–î –° –û–°–¢–†–û–í–ê ===

@router.message(F.text == BTN_LEAVE_ISLAND)
async def leave_island(message: Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ —Å –æ—Å—Ç—Ä–æ–≤–∞"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
        stats = await game_stats.get_all_stats()
        welcome_text = await format_welcome_message(stats)
        
        await message.answer(
            welcome_text,
            reply_markup=get_start_menu()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ —Å –æ—Å—Ç—Ä–æ–≤–∞: {e}")
        await message.answer(ERROR_GENERAL)

# === –ü–†–û–§–ò–õ–¨ –ñ–ò–¢–ï–õ–Ø ===

@router.message(F.text == BTN_CITIZEN)
async def citizen_profile(message: Message):
    """–ü—Ä–æ—Ñ–∏–ª—å –∂–∏—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)
        
        if not profile:
            await message.answer(ERROR_GENERAL)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_name = CHARACTER_NAMES.get(profile.get('character_preset', 1), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        profile_text = f"""
üë§ **–ü–†–û–§–ò–õ–¨ –ñ–ò–¢–ï–õ–Ø**

üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–∂:** {character_name}
üÜî **{profile['username']}** (ID: {profile['user_id']})
üÜô **–£—Ä–æ–≤–µ–Ω—å {profile['level']}** | üìä **–û–ø—ã—Ç:** {profile['experience']}

üí∞ **–†–ï–°–£–†–°–´:**
üíµ {profile['ryabucks']:,} —Ä—è–±–∞–∫—Å–æ–≤
üí† {profile['rbtc']:.4f} RBTC
‚ö° {profile['energy']}/{profile['energy_max']} —ç–Ω–µ—Ä–≥–∏–∏
üß™ {profile['liquid_experience']} –∂–∏–¥–∫–æ–≥–æ –æ–ø—ã—Ç–∞
üíé {profile['golden_shards']} –∑–æ–ª–æ—Ç—ã—Ö –æ—Å–∫–æ–ª–∫–æ–≤

üìú **–õ–ò–¶–ï–ù–ó–ò–ò:**
{"‚úÖ" if profile.get('has_employer_license') else "‚ùå"} –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å
{"‚úÖ" if profile.get('has_farm_license') else "‚ùå"} –§–µ—Ä–º–µ—Ä

üèùÔ∏è **–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –æ—Å—Ç—Ä–æ–≤–∞ —Å** {profile['created_at'][:10]}
        """.strip()
        
        await message.answer(profile_text)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer(ERROR_GENERAL)

# === –ó–ê–ì–õ–£–®–ö–ò –†–ê–ó–î–ï–õ–û–í ===

@router.message(F.text == BTN_FARM)
async def farm_menu(message: Message):
    """–§–µ—Ä–º–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(f"üêî **–§–ï–†–ú–ê**\n\n{SECTION_UNDER_DEVELOPMENT}")

@router.message(F.text == BTN_WORK)
async def work_menu(message: Message):
    """–†—è–±–æ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(f"üíº **–†–Ø–ë–û–¢–ê**\n\n{SECTION_UNDER_DEVELOPMENT}")

@router.message(F.text == BTN_INVENTORY)
async def inventory_menu(message: Message):
    """–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(f"üéí **–ò–ù–í–ï–ù–¢–ê–†–¨**\n\n{SECTION_UNDER_DEVELOPMENT}")

@router.message(F.text == BTN_FRIENDS)
async def friends_menu(message: Message):
    """–î—Ä—É–∑—å—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(f"üë• **–î–†–£–ó–¨–Ø**\n\n{SECTION_UNDER_DEVELOPMENT}")

@router.message(F.text == BTN_LEADERBOARD)
async def leaderboard_menu(message: Message):
    """–†–µ–π—Ç–∏–Ω–≥ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(f"üèÜ **–†–ï–ô–¢–ò–ù–ì**\n\n{SECTION_UNDER_DEVELOPMENT}")

@router.message(F.text == BTN_OTHER)
async def other_menu(message: Message):
    """–ï—â—ë (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(f"üìã **–ï–©–Å**\n\n{SECTION_UNDER_DEVELOPMENT}")

@router.message(F.text == BTN_SETTINGS)
async def settings_menu(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(f"‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò**\n\n{SECTION_UNDER_DEVELOPMENT}")

@router.message(F.text == BTN_SUPPORT)
async def support_menu(message: Message):
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(f"üÜò **–ü–û–î–î–ï–†–ñ–ö–ê**\n\n{SECTION_UNDER_DEVELOPMENT}")

# === –ü–ï–†–ï–•–û–î –í –ì–û–†–û–î ===

@router.message(F.text == BTN_TOWN)
async def town_menu(message: Message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–æ—Ä–æ–¥"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handler –≥–æ—Ä–æ–¥–∞
        from .town import show_town_menu
        await show_town_menu(message)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–æ—Ä–æ–¥–∞: {e}")
        await message.answer(ERROR_GENERAL)