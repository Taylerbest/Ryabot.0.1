# interfaces/telegram_bot/handlers/start.py
"""
–ì–ª–∞–≤–Ω—ã–π handler –¥–ª—è /start —Å —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–º, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
"""

import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

# Core imports
from core.use_cases.user.create_user import CreateUserUseCase, GetUserProfileUseCase, UpdateUserResourcesUseCase
from adapters.database.supabase.client import get_supabase_client
from adapters.database.supabase.repositories.user_repository import SupabaseUserRepository

# Interface imports
from ..localization.texts import get_text, t
from ..keyboards.main_menu import (
    get_start_menu, get_island_menu, get_language_keyboard,
    get_tutorial_keyboard, get_back_keyboard
)
from ..states import MenuState, TutorialState
from config.game_stats import game_stats

router = Router()
logger = logging.getLogger(__name__)


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def get_user_use_cases():
    """–§–∞–±—Ä–∏–∫–∞ Use Cases"""
    client = await get_supabase_client()
    user_repo = SupabaseUserRepository(client)

    return {
        'create_user': CreateUserUseCase(user_repo),
        'get_profile': GetUserProfileUseCase(user_repo),
        'update_resources': UpdateUserResourcesUseCase(user_repo)
    }


async def get_user_lang(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏"""
    try:
        client = await get_supabase_client()
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["language"],
            filters={"user_id": user_id},
            single=True
        )
        return user_data['language'] if user_data else 'ru'
    except:
        return 'ru'


async def format_welcome_message(stats: dict, lang: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    uptime = stats['uptime']

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    if uptime['days'] > 0:
        uptime_text = t("uptime_format", lang).format(
            days=uptime['days'],
            hours=uptime['hours'],
            minutes=uptime['minutes']
        )
    else:
        uptime_text = t("uptime_format_short", lang).format(
            hours=uptime['hours'],
            minutes=uptime['minutes']
        )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    title = t("welcome_title", lang)
    stats_text = t("welcome_stats", lang).format(
        uptime_text=uptime_text,
        total_users=stats['total_users'],
        online_users=stats['online_users'],
        new_today=stats['new_users_today'],
        new_month=stats['new_users_month'],
        qpass_holders=stats['quantum_pass_holders']
    )

    return f"{title}\n\n{stats_text}"


# === –û–°–ù–û–í–ù–´–ï HANDLERS ===

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —è–∑—ã–∫–∞"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username

        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—É—Å—Ç–∏–ª /start")

        # –ü–æ–ª—É—á–∞–µ–º use cases
        use_cases = await get_user_use_cases()

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await use_cases['create_user'].execute(user_id, username)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫
        if not user.language or user.language not in ['ru', 'en']:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –Ω—É–∂–µ–Ω –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
            await message.answer(
                t("language_selection", "ru"),  # –ù–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö
                reply_markup=get_language_keyboard()
            )
            await state.set_state(MenuState.LANGUAGE_SELECTION)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª
        if not user.tutorial_completed:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª
            tutorial_text = t("tutorial_shipwreck", user.language)
            await message.answer(
                tutorial_text,
                reply_markup=get_tutorial_keyboard(0, user.language)
            )
            await state.set_state(TutorialState.SHIPWRECK)
            return

        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await game_stats.get_all_stats()
        welcome_text = await format_welcome_message(stats, user.language)

        await message.answer(
            welcome_text,
            reply_markup=get_start_menu(user.language)
        )
        await state.set_state(MenuState.OUTSIDE_ISLAND)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(t("error_init", "ru"))


# === –í–´–ë–û–† –Ø–ó–´–ö–ê ===

@router.callback_query(F.data.startswith("lang_"))
async def set_language_callback(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    try:
        lang = callback.data.split("_")[1]
        user_id = callback.from_user.id

        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: {lang}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –ë–î
        client = await get_supabase_client()
        await client.execute_query(
            table="users",
            operation="update",
            data={"language": lang},
            filters={"user_id": user_id}
        )

        await callback.answer(t("language_changed", lang), show_alert=True)

        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª
        tutorial_text = t("tutorial_shipwreck", lang)
        await callback.message.edit_text(
            tutorial_text,
            reply_markup=get_tutorial_keyboard(0, lang)
        )
        await state.set_state(TutorialState.SHIPWRECK)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ –¥–ª—è {callback.from_user.id}: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


# === –¢–£–¢–û–†–ò–ê–õ ===

@router.callback_query(F.data == "tutorial_start")
async def tutorial_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—é
        tutorial_text = t("tutorial_wake_up", lang)
        await callback.message.edit_text(
            tutorial_text,
            reply_markup=get_tutorial_keyboard(1, lang)
        )
        await state.set_state(TutorialState.WAKE_UP)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


@router.callback_query(F.data.startswith("tutorial_step_"))
async def tutorial_step(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""
    try:
        step = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if step == 2:
            text = t("tutorial_explore", lang)
            new_state = TutorialState.EXPLORE
        elif step == 3:
            text = t("tutorial_find_resources", lang)
            new_state = TutorialState.FIND_RESOURCES
        elif step == 4:
            text = t("tutorial_hire_worker", lang)
            new_state = TutorialState.HIRE_WORKER
            # –ú–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–π–º–∞
            keyboard = get_tutorial_keyboard(5, lang)
        elif step == 5:
            text = t("tutorial_training", lang)
            new_state = TutorialState.TRAINING
            keyboard = get_tutorial_keyboard(6, lang)
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await tutorial_complete_handler(callback, state)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'keyboard' not in locals():
            keyboard = get_tutorial_keyboard(step, lang)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(new_state)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —à–∞–≥–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


@router.callback_query(F.data == "tutorial_hire_worker")
async def tutorial_hire_worker(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–π–º —Ä–∞–±–æ—á–µ–≥–æ –≤ —Ç—É—Ç–æ—Ä–∏–∞–ª–µ"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Ä—è–±–∞–∫—Å—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–µ–≥–æ
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        if profile['ryabucks'] < 30:
            await callback.answer("üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤!", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await use_cases['update_resources'].execute(user_id, {
            "ryabucks": profile['ryabucks'] - 30
        })

        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –≤ –ë–î (–ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—É—á–µ–Ω–∏—é
        text = t("tutorial_training", lang)
        await callback.message.edit_text(
            text,
            reply_markup=get_tutorial_keyboard(6, lang)
        )
        await state.set_state(TutorialState.TRAINING)
        await callback.answer("üéâ –î–∂–µ–∫ –Ω–∞–Ω—è—Ç!", show_alert=True)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–π–º–∞ –≤ —Ç—É—Ç–æ—Ä–∏–∞–ª–µ: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


@router.callback_query(F.data.startswith("tutorial_train_"))
async def tutorial_train_specialist(callback: CallbackQuery, state: FSMContext):
    """–û–±—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ —Ç—É—Ç–æ—Ä–∏–∞–ª–µ"""
    try:
        profession = callback.data.split("_")[-1]
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ –ë–î (–ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)

        profession_names = {
            "farmer": "–§–µ—Ä–º–µ—Ä–∞" if lang == "ru" else "Farmer",
            "builder": "–°—Ç—Ä–æ–∏—Ç–µ–ª—è" if lang == "ru" else "Builder",
            "fisherman": "–†—ã–±–∞–∫–∞" if lang == "ru" else "Fisherman"
        }

        profession_name = profession_names.get(profession, profession)

        await callback.answer(f"üéì –î–∂–µ–∫ –æ–±—É—á–µ–Ω –Ω–∞ {profession_name}!", show_alert=True)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª
        await tutorial_complete_handler(callback, state)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –≤ —Ç—É—Ç–æ—Ä–∏–∞–ª–µ: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


@router.callback_query(F.data == "tutorial_skip")
async def tutorial_skip(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        # –û—Ç–º–µ—á–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        client = await get_supabase_client()
        await client.execute_query(
            table="users",
            operation="update",
            data={"tutorial_completed": True},
            filters={"user_id": user_id}
        )

        await callback.answer("‚è≠Ô∏è –¢—É—Ç–æ—Ä–∏–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω", show_alert=True)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É
        stats = await game_stats.get_all_stats()
        welcome_text = await format_welcome_message(stats, lang)

        await callback.message.edit_text(welcome_text)
        await callback.message.answer(
            t("island_welcome", lang).format(
                username="–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
                level=1,
                experience=0,
                ryabucks=100,
                rbtc="0.0000",
                energy=30,
                energy_max=30
            ),
            reply_markup=get_start_menu(lang)
        )
        await state.set_state(MenuState.OUTSIDE_ISLAND)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


@router.callback_query(F.data == "tutorial_complete")
async def tutorial_complete_handler(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        await use_cases['update_resources'].execute(user_id, {
            "ryabucks": profile['ryabucks'] + 200,
            "energy": min(profile['energy'] + 20, profile['energy_max'])
        })

        # –û—Ç–º–µ—á–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        client = await get_supabase_client()
        await client.execute_query(
            table="users",
            operation="update",
            data={"tutorial_completed": True, "experience": 50},
            filters={"user_id": user_id}
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        completion_text = t("tutorial_complete", lang)
        await callback.message.edit_text(
            completion_text,
            reply_markup=get_back_keyboard("tutorial_finished", lang)
        )
        await callback.answer("üéâ –¢—É—Ç–æ—Ä–∏–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω!", show_alert=True)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


@router.callback_query(F.data == "tutorial_finished")
async def tutorial_finished(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ—Å–ª–µ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
        stats = await game_stats.get_all_stats()
        welcome_text = await format_welcome_message(stats, lang)

        await callback.message.edit_text(welcome_text)
        await callback.message.answer(
            "üéÆ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_start_menu(lang)
        )
        await state.set_state(MenuState.OUTSIDE_ISLAND)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


# === –û–°–ù–û–í–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø ===

@router.message(F.text.in_(["üèù –í–æ–π—Ç–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤", "üèù Enter Island"]))
async def enter_island(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –Ω–∞ –æ—Å—Ç—Ä–æ–≤"""
    try:
        user_id = message.from_user.id
        lang = await get_user_lang(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Å—Ç—Ä–æ–≤–∞
        island_text = t("island_welcome", lang).format(
            username=profile.get('username') or "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
            level=profile['level'],
            experience=profile['experience'],
            ryabucks=profile['ryabucks'],
            rbtc=f"{profile['rbtc']:.4f}",
            energy=profile['energy'],
            energy_max=profile['energy_max']
        )

        await message.answer(
            island_text,
            reply_markup=get_island_menu(lang)
        )
        await state.set_state(MenuState.ON_ISLAND)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(t("error_enter_island", "ru"))


@router.message(F.text.in_(["üö™ –ü–æ–∫–∏–Ω—É—Ç—å –æ—Å—Ç—Ä–æ–≤", "üö™ Leave Island"]))
async def leave_island(message: Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ —Å –æ—Å—Ç—Ä–æ–≤–∞"""
    try:
        user_id = message.from_user.id
        lang = await get_user_lang(user_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats = await game_stats.get_all_stats()
        welcome_text = await format_welcome_message(stats, lang)

        await message.answer(
            welcome_text,
            reply_markup=get_start_menu(lang)
        )
        await state.set_state(MenuState.OUTSIDE_ISLAND)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ —Å –æ—Å—Ç—Ä–æ–≤–∞: {e}")
        await message.answer(t("error_general", "ru"))


# === –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –û–°–ù–û–í–ù–´–• –†–ê–ó–î–ï–õ–û–í ===

@router.message(F.text.in_(["üêî –§–µ—Ä–º–∞", "üêî Farm"]))
async def farm_menu(message: Message):
    """–ú–µ–Ω—é —Ñ–µ—Ä–º—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
    user_id = message.from_user.id
    text = await get_text("farm_text", user_id)
    await message.answer(text)


@router.message(F.text.in_(["üë§ –ñ–∏—Ç–µ–ª—å", "üë§ Citizen"]))
async def citizen_menu(message: Message):
    """–ú–µ–Ω—é –∂–∏—Ç–µ–ª—è - –ø—Ä–æ—Ñ–∏–ª—å"""
    try:
        user_id = message.from_user.id
        lang = await get_user_lang(user_id)

        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        profile_text = t("profile_text", lang).format(
            username=profile.get('username') or "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
            user_id=profile['user_id'],
            level=profile['level'],
            experience=profile['experience'],
            ryabucks=profile['ryabucks'],
            rbtc=f"{profile['rbtc']:.4f}",
            energy=profile['energy'],
            energy_max=profile['energy_max'],
            liquid_experience=profile['liquid_experience']
        )

        await message.answer(profile_text)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer(t("error_profile", "ru"))


@router.message(F.text.in_(["üíº –†–∞–±–æ—Ç—ã", "üíº Work"]))
async def work_menu(message: Message):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç (–∑–∞–≥–ª—É—à–∫–∞)"""
    user_id = message.from_user.id
    text = await get_text("work_text", user_id)
    await message.answer(text)


@router.message(F.text.in_(["üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", "üéí Inventory"]))
async def inventory_menu(message: Message):
    """–ú–µ–Ω—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    user_id = message.from_user.id
    text = await get_text("inventory_text", user_id)
    await message.answer(text)


@router.message(F.text.in_(["üë• –î—Ä—É–∑—å—è", "üë• Friends"]))
async def friends_menu(message: Message):
    """–ú–µ–Ω—é –¥—Ä—É–∑–µ–π (–∑–∞–≥–ª—É—à–∫–∞)"""
    user_id = message.from_user.id
    text = await get_text("friends_text", user_id)
    await message.answer(text)


@router.message(F.text.in_(["üèÜ –†–µ–π—Ç–∏–Ω–≥", "üèÜ Leaderboard"]))
async def leaderboard_menu(message: Message):
    """–ú–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    user_id = message.from_user.id
    text = await get_text("leaderboard_text", user_id)
    await message.answer(text)


@router.message(F.text.in_(["üìã –ï—â—ë", "üìã Other"]))
async def other_menu(message: Message):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é (–∑–∞–≥–ª—É—à–∫–∞)"""
    user_id = message.from_user.id
    text = await get_text("other_text", user_id)
    await message.answer(text)


@router.message(F.text.in_(["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è Settings"]))
async def settings_menu(message: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∞)"""
    user_id = message.from_user.id
    text = await get_text("settings_text", user_id)
    await message.answer(text)


@router.message(F.text.in_(["üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üÜò Support"]))
async def support_menu(message: Message):
    """–ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    user_id = message.from_user.id
    text = await get_text("support_text", user_id)
    await message.answer(text)