# interfaces/telegram_bot/handlers/quantum_pass.py
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from services.quantum_pass_service import quantum_pass_service
from interfaces.telegram_bot.states import QuantumPassState

router = Router()
logger = logging.getLogger(__name__)


def get_quantum_pass_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é Quantum Pass"""
    keyboard = [
        [
            InlineKeyboardButton(text="ü™™ –ö—É–ø–∏—Ç—å –∑–∞ 35üí† –Ω–∞ 1 –º–µ—Å.", callback_data="qpass_buy_1_month")
        ],
        [
            InlineKeyboardButton(text="ü™™ –ö—É–ø–∏—Ç—å –∑–∞ 84üí† –Ω–∞ 3 –º–µ—Å.", callback_data="qpass_buy_3_months")
        ],
        [
            InlineKeyboardButton(text="ü™™ –ö—É–ø–∏—Ç—å –∑–∞ 168üí† –Ω–∞ 6 –º–µ—Å.", callback_data="qpass_buy_6_months")
        ],
        [
            InlineKeyboardButton(text="ü™™ –ö—É–ø–∏—Ç—å –∑–∞ 294üí† –Ω–∞ 1 –≥–æ–¥", callback_data="qpass_buy_1_year")
        ],
        [
            InlineKeyboardButton(text="üí• –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê üí•", url="https://telegra.ph/Preimushchestva-Quantum-Pass-10-07")
        ],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_town")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data == "quantum_pass")
async def show_quantum_pass_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é Quantum Pass"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Q-Pass
        stats = await quantum_pass_service.get_quantum_pass_stats()

        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Q-Pass –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_qpass_info = await quantum_pass_service.get_user_quantum_pass_info(user_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
        time_left_text = quantum_pass_service.format_time_left(user_qpass_info['time_left'])

        qpass_text = f"""„Ä∞Ô∏è„Ä∞Ô∏è ü™™ Q-PASS ‚ÑπÔ∏è „Ä∞Ô∏è„Ä∞Ô∏è

üìä –ò–≥—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º: {stats['total_active_qpass_users']}

–°–æ–∑–¥–∞–Ω–Ω—ã–π –∏–∑ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö—Ä–æ–Ω–æ-—á–∞—Å—Ç–∏—Ü, —ç—Ç–æ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ-–≤—Ä–µ–º—è, –æ–¥–∞—Ä–∏–≤–∞—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ ¬´–∑–∞—ë–º–Ω–æ–π¬ª —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–µ–π. –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å –¥–µ–∂–∞–≤—é, –∫—É—Ä, –Ω–µ—Å—É—â–∏—Ö –∫—É–±–∏—á–µ—Å–∫–∏–µ —è–π—Ü–∞, –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.

‚è≥ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è Q-Pass: {time_left_text}"""

        await callback.message.edit_text(
            qpass_text,
            reply_markup=get_quantum_pass_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é Quantum Pass: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("qpass_buy_"))
async def buy_quantum_pass_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ Quantum Pass"""
    try:
        user_id = callback.from_user.id
        duration_key = callback.data.replace("qpass_buy_", "")

        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await quantum_pass_service.get_user_quantum_pass_info(user_id)
        user_rbtc = user_info['user_rbtc']

        # –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        prices = quantum_pass_service.PRICES
        price = prices.get(duration_key, 0)

        duration_descriptions = {
            '1_month': '1 –º–µ—Å—è—Ü',
            '3_months': '3 –º–µ—Å—è—Ü–∞',
            '6_months': '6 –º–µ—Å—è—Ü–µ–≤',
            '1_year': '1 –≥–æ–¥'
        }

        duration_text = duration_descriptions.get(duration_key, duration_key)

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if user_rbtc < price:
            await callback.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RBTC!\n–ù—É–∂–Ω–æ: {price} üí†\n–ï—Å—Ç—å: {user_rbtc:.4f} üí†",
                show_alert=True
            )
            return

        confirm_text = f"""üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ Quantum Pass

üì¶ –ü–∞–∫–µ—Ç: {duration_text}
üí† –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} RBTC
üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_rbtc:.4f} RBTC
üí∏ –û—Å—Ç–∞–Ω–µ—Ç—Å—è: {user_rbtc - price:.4f} RBTC

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: RBTC –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —Å–æ–∂–∂–µ–Ω—ã –∏–∑ –æ–±–æ—Ä–æ—Ç–∞!

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"""

        keyboard = [
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"qpass_confirm_{duration_key}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="quantum_pass")
            ]
        ]

        await callback.message.edit_text(
            confirm_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        await state.set_data({"duration_key": duration_key})
        await state.set_state(QuantumPassState.PURCHASE_CONFIRM)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ Q-Pass: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("qpass_confirm_"))
async def confirm_quantum_pass_purchase(callback: CallbackQuery, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É Quantum Pass"""
    try:
        user_id = callback.from_user.id
        duration_key = callback.data.replace("qpass_confirm_", "")

        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É
        success, message = await quantum_pass_service.purchase_quantum_pass(user_id, duration_key)

        if success:
            await callback.message.edit_text(f"‚úÖ {message}")
        else:
            await callback.message.edit_text(f"‚ùå {message}")

        await state.clear()
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ Q-Pass: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()


logger.info("Quantum Pass handlers loaded")
