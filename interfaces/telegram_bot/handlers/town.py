# interfaces/telegram_bot/handlers/town.py
"""
Handler –≥–æ—Ä–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config.texts import *
from services.tutorial_service import tutorial_service

router = Router()
logger = logging.getLogger(__name__)

def get_town_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–∞ - 14 –∑–¥–∞–Ω–∏–π –≤ 2 –∫–æ–ª–æ–Ω–∫–∏"""
    keyboard = [
        # –°—Ç—Ä–æ–∫–∞ 1
        [InlineKeyboardButton(text=BTN_TOWNHALL, callback_data="building_townhall"),
         InlineKeyboardButton(text=BTN_MARKET, callback_data="building_market")],
        # –°—Ç—Ä–æ–∫–∞ 2  
        [InlineKeyboardButton(text=BTN_ACADEMY, callback_data="building_academy"),
         InlineKeyboardButton(text=BTN_RYABANK, callback_data="building_ryabank")],
        # –°—Ç—Ä–æ–∫–∞ 3
        [InlineKeyboardButton(text=BTN_PRODUCTS, callback_data="building_products"),
         InlineKeyboardButton(text=BTN_PAWNSHOP, callback_data="building_pawnshop")],
        # –°—Ç—Ä–æ–∫–∞ 4
        [InlineKeyboardButton(text=BTN_TAVERN, callback_data="building_tavern"),
         InlineKeyboardButton(text=BTN_ENTERTAINMENT, callback_data="building_entertainment")],
        # –°—Ç—Ä–æ–∫–∞ 5
        [InlineKeyboardButton(text=BTN_REALESTATE, callback_data="building_realestate"),
         InlineKeyboardButton(text=BTN_VETCLINIC, callback_data="building_vetclinic")],
        # –°—Ç—Ä–æ–∫–∞ 6
        [InlineKeyboardButton(text=BTN_CONSTRUCTION, callback_data="building_construction"),
         InlineKeyboardButton(text=BTN_HOSPITAL, callback_data="building_hospital")],
        # –°—Ç—Ä–æ–∫–∞ 7
        [InlineKeyboardButton(text=BTN_QUANTUMHUB, callback_data="building_quantumhub"),
         InlineKeyboardButton(text=BTN_CEMETERY, callback_data="building_cemetery")]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def show_town_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥–æ—Ä–æ–¥–∞"""
    try:
        text = """
üèòÔ∏è **–ì–û–†–û–î –û–°–¢–†–û–í RYABOT**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–µ–Ω—Ç—Ä —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏!
–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–≤–æ–µ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞.

üèõÔ∏è –í —Ä–∞—Ç—É—à–µ –º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –∫—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏
üéì –í –∞–∫–∞–¥–µ–º–∏–∏ - –Ω–∞–Ω–∏–º–∞—Ç—å –∏ –æ–±—É—á–∞—Ç—å —Ä–∞–±–æ—á–∏—Ö
üíç –í –ª–æ–º–±–∞—Ä–¥–µ - –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç–∏
üõí –ù–∞ —Ä—ã–Ω–∫–µ - –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ:
        """.strip()
        
        await message.answer(text, reply_markup=get_town_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–æ—Ä–æ–¥–∞: {e}")
        await message.answer(ERROR_GENERAL)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–î–ê–ù–ò–ô ===

@router.callback_query(F.data.startswith("building_"))
async def handle_building(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–¥–∞–Ω–∏–π"""
    try:
        building = callback.data.split("_")[1]  # building_townhall -> townhall
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–¥–∞–Ω–∏–π
        tutorial_step = await tutorial_service.get_tutorial_step(user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
        if building == "townhall":
            await handle_townhall(callback, tutorial_step)
        elif building == "academy":
            await handle_academy(callback, tutorial_step)
        elif building == "pawnshop":
            await handle_pawnshop(callback, tutorial_step)
        elif building == "tavern":
            await handle_tavern(callback, tutorial_step)
        else:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
            await callback.message.edit_text(
                f"{BUILDING_NAMES.get(building, building.title())}\n\n{SECTION_UNDER_DEVELOPMENT}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_town")]
                ])
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–¥–∞–Ω–∏—è {callback.data}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

async def handle_townhall(callback: CallbackQuery, tutorial_step):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Ç—É—à–∏"""
    text = """
üèõÔ∏è **–†–ê–¢–£–®–ê –û–°–¢–†–û–í–ê**

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–æ–º.
–°—Ç—Ä–æ–≥–∏–π –º—Ä–∞–º–æ—Ä–Ω—ã–π –∑–∞–ª —Å –∑–æ–ª–æ—Ç—ã–º —è–π—Ü–æ–º –Ω–∞ –ø–æ—Å—Ç–∞–º–µ–Ω—Ç–µ.

üë®‚Äçüíº **–£—Å–ª—É–≥–∏:**
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä–∞–∂–¥–∞–Ω (10 —Ä—è–±–∞–∫—Å–æ–≤)
‚Ä¢ –õ–∏—Ü–µ–Ω–∑–∏—è –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è LV1 (100 —Ä—è–±–∞–∫—Å–æ–≤)  
‚Ä¢ –§–µ—Ä–º–µ—Ä—Å–∫–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è LV1 (200 —Ä—è–±–∞–∫—Å–æ–≤)
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç—Ä–æ–≤–∞

–ö–ª–µ—Ä–∫ –Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤–æ —Å—Ç—É—á–∏—Ç —Ä—É—á–∫–æ–π...
    """.strip()
    
    # –í —Ç—É—Ç–æ—Ä–∏–∞–ª–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if tutorial_step.value in ["town_hall_register", "employer_license", "farm_license"]:
        keyboard = []
        if tutorial_step.value == "town_hall_register":
            keyboard.append([InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (10 üíµ)", callback_data="tutorial_register")])
        elif tutorial_step.value == "employer_license":
            keyboard.append([InlineKeyboardButton(text="üìú –õ–∏—Ü–µ–Ω–∑–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è (100 üíµ)", callback_data="tutorial_buy_employer_license")])
        elif tutorial_step.value == "farm_license":
            keyboard.append([InlineKeyboardButton(text="üåæ –§–µ—Ä–º–µ—Ä—Å–∫–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è (200 üíµ)", callback_data="tutorial_buy_farm_license")])
    else:
        keyboard = [
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç—Ä–æ–≤–∞", callback_data="townhall_stats")],
            [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_town")]
        ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def handle_academy(callback: CallbackQuery, tutorial_step):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∞–¥–µ–º–∏–∏"""  
    text = """
üéì **–ê–ö–ê–î–ï–ú–ò–Ø –û–°–¢–†–û–í–ê**

–¶–µ–Ω—Ç—Ä –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–∏—Ö.
–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–Ω–∏–º–∞—Ç—å –ø—Ä–æ—Å—Ç—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∏ –æ–±—É—á–∞—Ç—å –∏—Ö –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.

üíº **–ë–∏—Ä–∂–∞ —Ç—Ä—É–¥–∞:**
‚Ä¢ –ù–∞–π–º —Ä–∞–±–æ—á–∏—Ö (30 —Ä—è–±–∞–∫—Å–æ–≤)
‚Ä¢ –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –Ω–∞–π–º–∞–º–∏: 1 —á–∞—Å

üéì **–û–±—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:**
‚Ä¢ –§–µ—Ä–º–µ—Ä (–∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ, —Ä–∞—Å—Ç–µ–Ω–∏–µ–≤–æ–¥—Å—Ç–≤–æ)
‚Ä¢ –°—Ç—Ä–æ–∏—Ç–µ–ª—å (–≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –∑–¥–∞–Ω–∏–π)
‚Ä¢ –†—ã–±–∞–∫ (–º–æ—Ä—Å–∫–∞—è —Ä—ã–±–∞–ª–∫–∞)
‚Ä¢ –õ–µ—Å–Ω–∏–∫ (–¥–æ–±—ã—á–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã)
    """.strip()
    
    keyboard = [
        [InlineKeyboardButton(text=BTN_LABOR_EXCHANGE, callback_data="academy_labor")],
        [InlineKeyboardButton(text=BTN_EXPERT_COURSES, callback_data="academy_courses")],
        [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_town")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def handle_pawnshop(callback: CallbackQuery, tutorial_step):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–º–±–∞—Ä–¥–∞"""
    text = """
üíç **–õ–û–ú–ë–ê–†–î "–û–°–ö–û–õ–û–ö –ò –ú–û–ù–ï–¢–ê"**

–¢–µ—Å–Ω–∞—è –ª–∞–≤–æ—á–∫–∞, –∑–∞—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è —Ç–∏–∫–∞—é—â–∏–º–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –∏ –∫—É—Ä–∏–Ω—ã–º–∏ –ø–µ—Ä—å—è–º–∏.

üë¥ **–ë–æ—Ä–∏—Å–ª–∞–≤** (–≤–ª–∞–¥–µ–ª–µ—Ü):
*"–°–∫—É–ø–∞—é –∑–æ–ª–æ—Ç—ã–µ –æ—Å–∫–æ–ª–∫–∏, —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞!  
–ß–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã, –±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç."*

üíé **–ü—Ä–∏–Ω–∏–º–∞–µ–º:**
‚Ä¢ –ó–æ–ª–æ—Ç—ã–µ –æ—Å–∫–æ–ª–∫–∏
‚Ä¢ –†–µ–¥–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã  
‚Ä¢ –°–æ–∫—Ä–æ–≤–∏—â–∞ —Å —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π
‚Ä¢ –Æ–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è
    """.strip()
    
    # –í —Ç—É—Ç–æ—Ä–∏–∞–ª–µ - –ø—Ä–æ–¥–∞–∂–∞ –æ—Å–∫–æ–ª–∫–∞
    if tutorial_step.value == "pawn_shop":
        keyboard = [
            [InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å –æ—Å–∫–æ–ª–æ–∫ –∑–∞ 500 üíµ", callback_data="tutorial_sell_shard")],
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(text="üíé –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="pawnshop_sell")],
            [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_town")]
        ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def handle_tavern(callback: CallbackQuery, tutorial_step):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–≤–µ—Ä–Ω—ã"""
    text = """
üçª **–¢–ê–í–ï–†–ù–ê –£ –ú–û–†–Ø**

–£—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ —É –±–µ—Ä–µ–≥–∞ —Å –≤–∏–¥–æ–º –Ω–∞ –æ–∫–µ–∞–Ω.
–ó–¥–µ—Å—å —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –º–µ—Å—Ç–Ω—ã–µ –∂–∏—Ç–µ–ª–∏, —Ä—ã–±–∞–∫–∏ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏.

üë®‚Äçüç≥ **–ë–∞—Ä–º–µ–Ω:**
*"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –Ω–∞—Å –ª—É—á—à–∏–π —Ä–æ–º –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ  
–∏ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤."*

üç∫ **–£—Å–ª—É–≥–∏:**
‚Ä¢ –û—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
‚Ä¢ –°–ª—É—Ö–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Å—Ç—Ä–æ–≤–∞
‚Ä¢ –í—Å—Ç—Ä–µ—á–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
‚Ä¢ –ö–≤–µ—Å—Ç—ã –æ—Ç –º–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π
    """.strip()
    
    keyboard = [
        [InlineKeyboardButton(text="üçª –ö—É–ø–∏—Ç—å —Ä–æ–º (+10 —ç–Ω–µ—Ä–≥–∏–∏)", callback_data="tavern_rum")],
        [InlineKeyboardButton(text="üì∞ –ü–æ—Å–ª—É—à–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="tavern_news")],
        [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_town")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

# === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===

@router.callback_query(F.data == "back_to_town")
async def back_to_town(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–æ—Ä–æ–¥"""
    try:
        text = """
üèòÔ∏è **–ì–û–†–û–î –û–°–¢–†–û–í RYABOT**

–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ:
        """.strip()
        
        await callback.message.edit_text(
            text,
            reply_markup=get_town_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–æ—Ä–æ–¥: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

# –ù–∞–∑–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π –¥–ª—è –∑–∞–≥–ª—É—à–µ–∫
BUILDING_NAMES = {
    "market": "üõí –†—ã–Ω–æ–∫",
    "ryabank": "üè¶ –†—è–ë–∞–Ω–∫", 
    "products": "üì¶ –¢–æ–≤–∞—Ä—ã",
    "entertainment": "üé™ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "realestate": "üñºÔ∏è –ù–µ–¥–≤–∏–∂–∫–∞",
    "vetclinic": "üè• –í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞",
    "construction": "üèóÔ∏è –°—Ç—Ä–æ–π-–°–∞–º",
    "hospital": "üè• –ë–æ–ª—å–Ω–∏—Ü–∞",
    "quantumhub": "‚öõÔ∏è –ö–≤–∞–Ω—Ç—É–º-–•–∞–±",
    "cemetery": "‚ö∞Ô∏è –ö–ª–∞–¥–±–∏—â–µ"
}