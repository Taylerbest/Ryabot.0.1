# interfaces/telegram_bot/handlers/town.py
"""
Handler –¥–ª—è –≥–æ—Ä–æ–¥–∞ –∏ –∞–∫–∞–¥–µ–º–∏–∏
"""

import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

# Core imports
from core.use_cases.user.create_user import GetUserProfileUseCase, UpdateUserResourcesUseCase
from adapters.database.supabase.client import get_supabase_client
from adapters.database.supabase.repositories.user_repository import SupabaseUserRepository

# Interface imports
from ..localization.texts import get_text, t
from ..keyboards.main_menu import get_academy_menu, get_labor_exchange_menu, get_expert_courses_menu, get_back_keyboard
from ..keyboards.town_menu import get_town_menu
from ..states import MenuState, AcademyState

router = Router()
logger = logging.getLogger(__name__)


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def get_user_use_cases():
    """–§–∞–±—Ä–∏–∫–∞ Use Cases"""
    client = await get_supabase_client()
    user_repo = SupabaseUserRepository(client)

    return {
        'get_profile': GetUserProfileUseCase(user_repo),
        'update_resources': UpdateUserResourcesUseCase(user_repo)
    }


async def get_user_lang(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        client = await get_supabase_client()
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["language"],
            filters={"user_id": user_id},
            single=True
        )
        return user_data['language'] if user_data else 'ru'
    except:
        return 'ru'


async def get_specialists_count(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"""
    try:
        client = await get_supabase_client()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        specialists = await client.execute_query(
            table="specialists",
            operation="select",
            columns=["specialist_type"],
            filters={"user_id": user_id}
        )

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
        counts = {}
        for spec in specialists:
            spec_type = spec['specialist_type']
            counts[spec_type] = counts.get(spec_type, 0) + 1

        return counts

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è {user_id}: {e}")
        return {}


async def get_workers_count(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ç—ã—Ö —Ä–∞–±–æ—á–∏—Ö"""
    try:
        client = await get_supabase_client()

        workers = await client.execute_query(
            table="specialists",
            operation="select",
            columns=["id"],
            filters={"user_id": user_id, "specialist_type": "worker"}
        )

        return len(workers) if workers else 0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –¥–ª—è {user_id}: {e}")
        return 0


async def can_hire_worker(user_id: int) -> tuple[bool, str, int]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–µ–≥–æ
    Returns: (–º–æ–∂–Ω–æ_–ª–∏, –ø—Ä–∏—á–∏–Ω–∞, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è_–≤—Ä–µ–º—è_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö)
    """
    try:
        client = await get_supabase_client()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–º
        last_hire = await client.execute_query(
            table="specialists",
            operation="select",
            columns=["hired_at"],
            filters={"user_id": user_id},
            limit=1
        )

        if last_hire:
            last_hire_time = datetime.fromisoformat(last_hire[0]['hired_at'])
            cooldown_end = last_hire_time + timedelta(hours=1)  # 1 —á–∞—Å –∫—É–ª–¥–∞—É–Ω

            if datetime.now() < cooldown_end:
                remaining = int((cooldown_end - datetime.now()).total_seconds())
                return False, "cooldown", remaining

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (–Ω—É–∂–Ω—ã –¥–æ–º–∞)
        workers_count = await get_workers_count(user_id)
        specialists_count = await get_specialists_count(user_id)
        total_workers = workers_count + sum(specialists_count.values())

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤
        houses = await client.execute_query(
            table="buildings",
            operation="select",
            columns=["id"],
            filters={"user_id": user_id, "building_type": "house"}
        )

        house_count = len(houses) if houses else 0
        max_workers = 3 + (house_count * 3)  # 3 –±–∞–∑–æ–≤—ã—Ö + 3 –Ω–∞ –¥–æ–º

        if total_workers >= max_workers:
            return False, "limit_reached", 0

        return True, "ready", 0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–π–º–∞ –¥–ª—è {user_id}: {e}")
        return False, "unknown", 0


async def hire_worker(user_id: int) -> tuple[bool, str]:
    """
    –ù–∞–Ω—è—Ç—å —Ä–∞–±–æ—á–µ–≥–æ
    Returns: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π–º–∞
        can_hire, reason, remaining = await can_hire_worker(user_id)

        if not can_hire:
            if reason == "cooldown":
                hours = remaining // 3600
                minutes = (remaining // 60) % 60
                return False, f"‚è∞ –ö—É–ª–¥–∞—É–Ω: {hours}—á {minutes}–º"
            elif reason == "limit_reached":
                return False, "üè† –ù—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ–º–æ–≤"
            else:
                return False, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å–≥–∏
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        # –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–π–º–∞ (—Ä–∞—Å—Ç–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞–±–æ—á–∏—Ö)
        current_workers = await get_workers_count(user_id)
        cost = 30 + (5 * current_workers)  # 30, 35, 40, 45...

        if profile['ryabucks'] < cost:
            return False, f"üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤! –ù—É–∂–Ω–æ {cost}"

        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        await use_cases['update_resources'].execute(user_id, {
            "ryabucks": profile['ryabucks'] - cost
        })

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–µ–≥–æ –≤ –ë–î
        client = await get_supabase_client()
        await client.execute_query(
            table="specialists",
            operation="insert",
            data={
                "user_id": user_id,
                "specialist_type": "worker",
                "level": 1,
                "experience": 0,
                "hired_at": datetime.now().isoformat()
            }
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_repo = SupabaseUserRepository(client)
        await user_repo.increment_stat(user_id, "specialists_hired")
        await user_repo.increment_stat(user_id, "laborers_hired")

        new_count = current_workers + 1
        return True, f"üéâ –†–∞–±–æ—á–∏–π —É—Å–ø–µ—à–Ω–æ –Ω–∞–Ω—è—Ç! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {new_count} —Ä–∞–±–æ—á–∏—Ö."

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–ª—è {user_id}: {e}")
        return False, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–µ–≥–æ"


# === –ì–û–†–û–î ===

@router.message(F.text.in_(["üèòÔ∏è –ì–æ—Ä–æ–¥", "üèòÔ∏è Town"]))
async def town_menu(message: Message, state: FSMContext):
    """–ú–µ–Ω—é –≥–æ—Ä–æ–¥–∞"""
    try:
        user_id = message.from_user.id
        lang = await get_user_lang(user_id)

        town_text = t("town_text", lang)
        await message.answer(
            town_text,
            reply_markup=get_town_menu(lang)
        )
        await state.set_state(MenuState.IN_TOWN)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –≥–æ—Ä–æ–¥–∞: {e}")
        await message.answer(t("error_general", "ru"))


# === –ê–ö–ê–î–ï–ú–ò–Ø ===

@router.callback_query(F.data == "academy")
async def academy_main(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–∫–∞–¥–µ–º–∏–∏"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        workers_count = await get_workers_count(user_id)
        specialists_count = await get_specialists_count(user_id)

        # TODO: –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—É—á–∞—é—â–∏—Ö—Å—è (–ø–æ–∫–∞ 0)
        training_count = 0

        total_specialists = sum(specialists_count.values())

        academy_text = t("academy_welcome", lang).format(
            laborers=workers_count,
            training=training_count,
            specialists=total_specialists
        )

        await callback.message.edit_text(
            academy_text,
            reply_markup=get_academy_menu(lang)
        )
        await state.set_state(AcademyState.MAIN_MENU)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫–∞–¥–µ–º–∏–∏ –¥–ª—è {callback.from_user.id}: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


@router.callback_query(F.data == "academy_labor_exchange")
async def labor_exchange(callback: CallbackQuery, state: FSMContext):
    """–ë–∏—Ä–∂–∞ —Ç—Ä—É–¥–∞"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        workers_count = await get_workers_count(user_id)
        specialists_count = await get_specialists_count(user_id)
        total_workers = workers_count + sum(specialists_count.values())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π–º–∞
        can_hire, reason, remaining = await can_hire_worker(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–π–º–∞
        if can_hire:
            cost = 30 + (5 * workers_count)
            status = t("hire_status_ready", lang).format(cost=cost)
        elif reason == "cooldown":
            hours = remaining // 3600
            minutes = (remaining // 60) % 60
            status = t("hire_status_cooldown", lang).format(hours=hours, minutes=minutes)
        elif reason == "limit_reached":
            status = t("hire_status_limit", lang)
        else:
            status = t("hire_status_unknown", lang)

        exchange_text = t("labor_exchange", lang).format(
            laborers=workers_count,
            total_workers=total_workers,
            status=status
        )

        await callback.message.edit_text(
            exchange_text,
            reply_markup=get_labor_exchange_menu(can_hire, total_workers, lang)
        )
        await state.set_state(AcademyState.LABOR_EXCHANGE)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∏—Ä–∂–∏ —Ç—Ä—É–¥–∞: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


@router.callback_query(F.data == "hire_worker")
async def hire_worker_callback(callback: CallbackQuery):
    """–ù–∞–π–º —Ä–∞–±–æ—á–µ–≥–æ"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        success, message = await hire_worker(user_id)

        await callback.answer(message, show_alert=True)

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±–∏—Ä–∂–∏ —Ç—Ä—É–¥–∞
            await labor_exchange(callback, None)  # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–µ–≥–æ: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


@router.callback_query(F.data == "academy_expert_courses")
async def expert_courses(callback: CallbackQuery, state: FSMContext):
    """–ö—É—Ä—Å—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        workers_count = await get_workers_count(user_id)

        # TODO: –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ—Ç—ã –æ–±—É—á–µ–Ω–∏—è (–ø–æ–∫–∞ 2/2)
        slots_used = 0
        slots_total = 2

        courses_text = t("expert_courses", lang).format(
            laborers=workers_count,
            slots_used=slots_used,
            slots_total=slots_total
        )

        await callback.message.edit_text(
            courses_text,
            reply_markup=get_expert_courses_menu(lang)
        )
        await state.set_state(AcademyState.EXPERT_COURSES)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫—É—Ä—Å–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


@router.callback_query(F.data == "academy_training_class")
async def training_class(callback: CallbackQuery, state: FSMContext):
    """–ö–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        # TODO: –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è (–ø–æ–∫–∞ –ø—É—Å—Ç–æ)
        active_trainings = []

        if not active_trainings:
            class_text = t("training_class_empty", lang)
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—É—á–∞—é—â–∏—Ö—Å—è
            training_list = "\n".join([f"{i + 1}. {training}" for i, training in enumerate(active_trainings)])

            class_text = t("training_class_active", lang).format(
                slots_used=len(active_trainings),
                slots_total=2,
                training_list=training_list
            )

        await callback.message.edit_text(
            class_text,
            reply_markup=get_back_keyboard("academy", lang)
        )
        await state.set_state(AcademyState.TRAINING_CLASS)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


# === –û–ë–£–ß–ï–ù–ò–ï –°–ü–ï–¶–ò–ê–õ–ò–°–¢–û–í ===

@router.callback_query(F.data.startswith("train_"))
async def start_training(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
    try:
        profession = callback.data.split("_")[1]
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö
        workers_count = await get_workers_count(user_id)

        if workers_count == 0:
            await callback.answer(t("training_no_workers", lang), show_alert=True)
            return

        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ—Ç—ã –æ–±—É—á–µ–Ω–∏—è

        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞

        profession_names = {
            "farmer": "–§–µ—Ä–º–µ—Ä–∞" if lang == "ru" else "Farmer",
            "builder": "–°—Ç—Ä–æ–∏—Ç–µ–ª—è" if lang == "ru" else "Builder",
            "fisherman": "–†—ã–±–∞–∫–∞" if lang == "ru" else "Fisherman",
            "forester": "–õ–µ—Å–Ω–∏–∫–∞" if lang == "ru" else "Forester"
        }

        profession_name = profession_names.get(profession, profession)

        await callback.answer(
            f"üéì –û–±—É—á–µ–Ω–∏–µ –Ω–∞ {profession_name} –Ω–∞—á–∞—Ç–æ! (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
            show_alert=True
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


# === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===

@router.callback_query(F.data == "back_to_town")
async def back_to_town(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–æ—Ä–æ–¥"""
    try:
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        town_text = t("town_text", lang)
        await callback.message.edit_text(
            town_text,
            reply_markup=get_town_menu(lang)
        )
        await state.set_state(MenuState.IN_TOWN)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–æ—Ä–æ–¥: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)


# === –ó–ê–ì–õ–£–®–ö–ò –ó–î–ê–ù–ò–ô ===

@router.callback_query(F.data.in_([
    "townhall", "market", "ryabank", "products", "pawnshop",
    "tavern1", "entertainment", "realestate", "vetclinic",
    "construction", "hospital", "quantumhub", "cemetery"
]))
async def building_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∑–¥–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∏)"""
    try:
        building = callback.data
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)

        building_text = t(f"building_{building}", lang)

        await callback.message.edit_text(
            building_text,
            reply_markup=get_back_keyboard("back_to_town", lang)
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–¥–∞–Ω–∏—è {callback.data}: {e}")
        await callback.answer(t("error_general", "ru"), show_alert=True)