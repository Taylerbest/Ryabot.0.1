# interfaces/telegram_bot/handlers/town.py
"""
Handler –º–µ–Ω—é –≥–æ—Ä–æ–¥–∞
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config.texts import *
from adapters.database.supabase.client import get_supabase_client

router = Router()
logger = logging.getLogger(__name__)


def get_town_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–∞ - –¢–û–ß–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø"""
    keyboard = [
        [InlineKeyboardButton(text=BTN_TOWNHALL, callback_data="town_hall"),
         InlineKeyboardButton(text=BTN_MARKET, callback_data="town_market")],
        [InlineKeyboardButton(text=BTN_RYABANK, callback_data="town_ryabank"),
         InlineKeyboardButton(text=BTN_SHOP, callback_data="town_shop")],
        [InlineKeyboardButton(text=BTN_PAWNSHOP, callback_data="town_pawnshop"),
         InlineKeyboardButton(text=BTN_TAVERN, callback_data="town_tavern")],
        [InlineKeyboardButton(text=BTN_ACADEMY, callback_data="town_academy"),
         InlineKeyboardButton(text=BTN_FORTUNE, callback_data="town_fortune")],
        [InlineKeyboardButton(text=BTN_REALESTATE, callback_data="town_realestate"),
         InlineKeyboardButton(text=BTN_VETCENTER, callback_data="town_vetcenter")],
        [InlineKeyboardButton(text=BTN_CONSTRUCTION, callback_data="town_construction"),
         InlineKeyboardButton(text=BTN_HOSPITAL, callback_data="town_hospital")],
        [InlineKeyboardButton(text=BTN_QUANTUMHUB, callback_data="town_quantumhub"),
         InlineKeyboardButton(text=BTN_CEMETERY, callback_data="town_cemetery")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def show_town_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥–æ—Ä–æ–¥–∞"""
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client = await get_supabase_client()
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["energy"],
            filters={"user_id": user_id},
            single=True
        )

        energy = user_data.get('energy', 0) if user_data else 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
        town_text = TOWN_MENU.format(energy=energy)

        await message.answer(
            town_text,
            reply_markup=get_town_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –≥–æ—Ä–æ–¥–∞: {e}")
        await message.answer(ERROR_GENERAL)


# === –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–î–û –û–ë–©–ï–ì–û) ===

@router.callback_query(F.data == "town_academy")
async def town_academy(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∞–∫–∞–¥–µ–º–∏—é"""
    try:
        from .academy import show_academy_menu
        await show_academy_menu(callback)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫–∞–¥–µ–º–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "town_ryabank")
async def town_ryabank(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –†—è–±–∞–Ω–∫ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ bank.py"""
    # –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –ù–ï –Ω—É–∂–µ–Ω, —Ç.–∫. bank.py —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç "town_ryabank"
    # –ù–æ –µ—Å–ª–∏ bank.py –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
    logger.info(f"town_ryabank –≤—ã–∑–≤–∞–Ω –∏–∑ town.py (–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è bank.py)")
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–Ω–∫–∞...", show_alert=False)


# === –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–î–ê–ù–ò–ô –ì–û–†–û–î–ê ===

@router.callback_query(F.data.startswith("town_"))
async def handle_town_building(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–¥–∞–Ω–∏–π –≥–æ—Ä–æ–¥–∞"""
    try:
        building = callback.data.split("_")[1]

        if building == 'quantumhub':
            return  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ quantum_hub.py

        building_names = {
            "hall": "üèõ –†–ê–¢–£–®–ê",
            "market": "üõí –†–´–ù–û–ö",
            "shop": "üè™ –ú–ê–ì–ê–ó–ò–ù",
            "pawnshop": "üíç –õ–û–ú–ë–ê–†–î",
            "tavern": "üçª –¢–ê–í–ï–†–ù–ê",
            "fortune": "üé° –§–û–†–¢–£–ù–ê",
            "realestate": "üèû –ù–ï–î–í–ò–ñ–ö–ê",
            "vetcenter": "‚ù§Ô∏è‚Äçü©π –í–ï–¢–¶–ï–ù–¢–†",
            "construction": "üèó –°–¢–†–û–ô–°–ê–ú",
            "hospital": "üè• –ë–û–õ–¨–ù–ò–¶–ê",
            "cemetery": "ü™¶ –ö–õ–ê–î–ë–ò–©–ï"
        }

        building_name = building_names.get(building, "–ù–ï–ò–ó–í–ï–°–¢–ù–û–ï –ó–î–ê–ù–ò–ï")

        await callback.message.edit_text(
            f"{building_name}\n\n{SECTION_UNDER_DEVELOPMENT}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_town")]
            ])
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_town")
async def back_to_town(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≥–æ—Ä–æ–¥–∞"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client = await get_supabase_client()
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["energy"],
            filters={"user_id": user_id},
            single=True
        )

        energy = user_data.get('energy', 0) if user_data else 0
        town_text = TOWN_MENU.format(energy=energy)

        await callback.message.edit_text(
            town_text,
            reply_markup=get_town_keyboard()
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–æ—Ä–æ–¥: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
