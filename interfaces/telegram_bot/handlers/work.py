# interfaces/telegram_bot/handlers/work.py
"""
Handler –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç (–†—è–±–æ—Ç–∞)
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config.texts import *
from services.quest_service import quest_service
from services.blockchain_service import blockchain_service

router = Router()
logger = logging.getLogger(__name__)

def get_work_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç - 6 –ª–æ–∫–∞—Ü–∏–π –≤ 2 –∫–æ–ª–æ–Ω–∫–∏"""
    keyboard = [
        [InlineKeyboardButton(text=BTN_WORK_ANOMALIES, callback_data="work_anomalies"),
         InlineKeyboardButton(text=BTN_WORK_EXPEDITION, callback_data="work_expedition")],
        [InlineKeyboardButton(text=BTN_WORK_FARM, callback_data="work_farm"),
         InlineKeyboardButton(text=BTN_WORK_CITY, callback_data="work_city")],
        [InlineKeyboardButton(text=BTN_WORK_FOREST, callback_data="work_forest"),
         InlineKeyboardButton(text=BTN_WORK_SEA, callback_data="work_sea")]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def show_work_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–∞–±–æ—Ç"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–±–æ—Ç–∞–º
        has_access = await quest_service.can_access_feature(user_id, "work_general")
        
        if not has_access:
            await message.answer(f"üíº *–†–Ø–ë–û–¢–ê*\n\n{SECTION_LOCKED}")
            return
        
        await message.answer(
            WORK_MENU_TITLE,
            reply_markup=get_work_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é —Ä–∞–±–æ—Ç: {e}")
        await message.answer(ERROR_GENERAL)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –õ–û–ö–ê–¶–ò–ô ===

@router.callback_query(F.data == "work_sea")
async def work_sea(callback: CallbackQuery):
    """–†–∞–±–æ—Ç—ã –≤ –º–æ—Ä–µ"""
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ—Ä—Å–∫–∏–º —Ä–∞–±–æ—Ç–∞–º
        has_access = await quest_service.can_access_feature(user_id, "work_sea")
        
        if not has_access:
            await callback.message.edit_text(
                f"üåä *–†–ê–ë–û–¢–´ –í –ú–û–†–ï*\n\n{SECTION_LOCKED}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_work")]
                ])
            )
            await callback.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ –º–æ—Ä–µ
        keyboard = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        current_quest = await quest_service.get_current_quest(user_id)
        if current_quest and current_quest["quest_id"] == "first_work":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–π —Ä–∞–±–æ—Ç—ã
            keyboard.append([InlineKeyboardButton(
                text="üö¢ –†–∞–∑–≥—Ä—É–∑–∏—Ç—å —É–ª–æ–≤ (5‚ö° ‚Üí 50üíµ + 25üìä)", 
                callback_data="do_first_work"
            )])
        else:
            # –û–±—ã—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)
            keyboard.append([InlineKeyboardButton(
                text="üöß –î—Ä—É–≥–∏–µ —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", 
                callback_data="work_unavailable"
            )])
        
        keyboard.append([InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_work")])
        
        await callback.message.edit_text(
            WORK_SEA_TITLE,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ—Ä—Å–∫–∏—Ö —Ä–∞–±–æ—Ç: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "do_first_work")
async def do_first_work(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é —Ä–∞–±–æ—Ç—É"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –ø–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞
        if not await quest_service.is_quest_available(user_id, "first_work"):
            await callback.answer("–≠—Ç–∞ —Ä–∞–±–æ—Ç–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
        from .start import get_user_use_cases
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)
        
        if profile['energy'] < 5:
            await callback.answer(
                f"‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –ù—É–∂–Ω–æ 5, —É –≤–∞—Å {profile['energy']}",
                show_alert=True
            )
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–±–æ—Ç—É
        await use_cases['update_resources'].execute(user_id, {
            "ryabucks": profile['ryabucks'] + 50,
            "experience": profile['experience'] + 25,
            "energy": max(0, profile['energy'] - 5)
        })
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        await blockchain_service.log_action(
            "WORK_COMPLETED", user_id, username,
            {"task": "sea_cargo_unload", "reward_money": 50, "reward_exp": 25, "energy_spent": 5},
            significance=0
        )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        await quest_service.complete_quest(user_id, "first_work")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.edit_text(
            f"""
‚úÖ *–†–ê–ë–û–¢–ê –í–´–ü–û–õ–ù–ï–ù–ê!*

üö¢ –í—ã –ø–æ–º–æ–≥–ª–∏ —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å —Ä—ã–±–æ–ª–æ–≤–Ω–æ–µ —Å—É–¥–Ω–æ!

üéÅ *–ü–æ–ª—É—á–µ–Ω–æ:*
üíµ +50 —Ä—è–±–∞–∫—Å–æ–≤
üìä +25 –æ–ø—ã—Ç–∞
‚ö° -5 —ç–Ω–µ—Ä–≥–∏–∏

üéØ *–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:* –ü–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç —É –∂–∏—Ç–µ–ª—è!
–ò–¥–∏—Ç–µ –≤ üë§ –ñ–∏—Ç–µ–ª—å ‚Üí üìã –ó–∞–¥–∞–Ω–∏—è ‚Üí "–ü–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç"
            """.strip(),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéâ –û—Ç–ª–∏—á–Ω–æ!", callback_data="back_to_work")]
            ])
        )
        
        await callback.answer("‚úÖ –†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Ä–∞–±–æ—Ç—ã: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã", show_alert=True)

# === –ó–ê–ì–õ–£–®–ö–ò –û–°–¢–ê–õ–¨–ù–´–• –õ–û–ö–ê–¶–ò–ô ===

@router.callback_query(F.data.startswith("work_"))
async def work_location(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π —Ä–∞–±–æ—Ç"""
    try:
        location = callback.data.split("_")[1]
        
        location_names = {
            "anomalies": "‚ö†Ô∏è –ê–ù–û–ú–ê–õ–ò–ò",
            "expedition": "üèï –≠–ö–°–ü–ï–î–ò–¶–ò–Ø", 
            "farm": "üè° –§–ï–†–ú–ê",
            "city": "üè¢ –ì–û–†–û–î",
            "forest": "üå≤ –õ–ï–°"
        }
        
        location_name = location_names.get(location, "–ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –õ–û–ö–ê–¶–ò–Ø")
        
        await callback.message.edit_text(
            f"{location_name}\n\n{SECTION_UNDER_DEVELOPMENT}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_work")]
            ])
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "work_unavailable")
async def work_unavailable(callback: CallbackQuery):
    """–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"""
    await callback.answer("üöß –≠—Ç–∏ —Ä–∞–±–æ—Ç—ã –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)

@router.callback_query(F.data == "back_to_work")
async def back_to_work(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç"""
    try:
        await callback.message.edit_text(
            WORK_MENU_TITLE,
            reply_markup=get_work_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ä–∞–±–æ—Ç—ã: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)