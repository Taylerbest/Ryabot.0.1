# interfaces/telegram_bot/handlers/work.py
"""
Handler –º–µ–Ω—é —Ä–∞–±–æ—Ç
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config.texts import *
from adapters.database.supabase.client import get_supabase_client

router = Router()
logger = logging.getLogger(__name__)


def get_work_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç - –¢–û–ß–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø"""
    keyboard = [
        [InlineKeyboardButton(text=BTN_WORK_BREACH, callback_data="work_breach"),
         InlineKeyboardButton(text=BTN_WORK_EXPEDITION, callback_data="work_expedition")],
        [InlineKeyboardButton(text=BTN_WORK_CITY, callback_data="work_city"),
         InlineKeyboardButton(text=BTN_WORK_FARM, callback_data="work_farm")],
        [InlineKeyboardButton(text=BTN_WORK_FOREST, callback_data="work_forest"),
         InlineKeyboardButton(text=BTN_WORK_SEA, callback_data="work_sea")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_work_stats(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤"""
    # TODO: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    return {
        "workers_total": 0,
        "builders_total": 0,
        "farmers_total": 0,
        "foresters_total": 0,
        "fishermen_total": 0,
        "cooks_total": 0,
        "doctors_total": 0,
        "scientists_total": 0,
        "teachers_total": 0,
        "q_soldiers_total": 0,
        "works_completed": 0,
        "anomaly_pool": 840000,
        "expedition_pool": 2730000,
        "work_rating": 0
    }


async def show_work_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–∞–±–æ—Ç"""
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        client = await get_supabase_client()
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["energy"],
            filters={"user_id": user_id},
            single=True
        )

        energy = user_data.get('energy', 0) if user_data else 0

        work_stats = await get_work_stats(user_id)
        work_stats['energy'] = energy

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
        work_text = WORK_MENU.format(**work_stats)

        await message.answer(
            work_text,
            reply_markup=get_work_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é —Ä–∞–±–æ—Ç: {e}")
        await message.answer(ERROR_GENERAL)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –õ–û–ö–ê–¶–ò–ô –†–ê–ë–û–¢ ===

@router.callback_query(F.data.startswith("work_"))
async def handle_work_location(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–π —Ä–∞–±–æ—Ç"""
    try:
        location = callback.data.split("_")[1]

        location_names = {
            "breach": "‚ö†Ô∏è –ë–†–ï–®–¨",
            "expedition": "üèï –í–´–õ–ê–ó–ö–ê",
            "city": "üè¢ –ì–û–†–û–î",
            "farm": "üè° –§–ï–†–ú–ê",
            "forest": "üå≤ –õ–ï–°",
            "sea": "üåä –ú–û–†–ï"
        }

        location_name = location_names.get(location, "–ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –õ–û–ö–ê–¶–ò–Ø")

        await callback.message.edit_text(
            f"{location_name}\n\n{SECTION_UNDER_DEVELOPMENT}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_work")]
            ])
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_work")
async def back_to_work(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        client = await get_supabase_client()
        user_data = await client.execute_query(
            table="users",
            operation="select",
            columns=["energy"],
            filters={"user_id": user_id},
            single=True
        )

        energy = user_data.get('energy', 0) if user_data else 0

        work_stats = await get_work_stats(user_id)
        work_stats['energy'] = energy

        work_text = WORK_MENU.format(**work_stats)

        await callback.message.edit_text(
            work_text,
            reply_markup=get_work_keyboard()
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ä–∞–±–æ—Ç—ã: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
