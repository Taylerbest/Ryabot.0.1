# interfaces/telegram_bot/handlers/tutorial.py
"""
–ü–æ–ª–Ω—ã–π —Ç—É—Ç–æ—Ä–∏–∞–ª —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –Ω–æ–≤–æ–º—É –ø–ª–∞–Ω—É
"""

import logging
import asyncio
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

# Core imports
from core.use_cases.user.create_user import CreateUserUseCase, GetUserProfileUseCase, UpdateUserResourcesUseCase
from adapters.database.supabase.client import get_supabase_client
from adapters.database.supabase.repositories.user_repository import SupabaseUserRepository
from core.domain.entities import TutorialStep, CharacterPreset

# Config
from config.texts import *
from config.game_stats import game_stats

# Services
from services.blockchain_service import blockchain_service
from services.tutorial_service import tutorial_service

router = Router()
logger = logging.getLogger(__name__)

async def get_user_use_cases():
    """–ü–æ–ª—É—á–∏—Ç—å use cases"""
    client = await get_supabase_client()
    user_repo = SupabaseUserRepository(client)

    return {
        'create_user': CreateUserUseCase(user_repo),
        'get_profile': GetUserProfileUseCase(user_repo),
        'update_resources': UpdateUserResourcesUseCase(user_repo)
    }

def get_character_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    keyboard = []
    for i in range(1, 11, 2):  # 5 —Å—Ç—Ä–æ–∫ –ø–æ 2 –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        row = [
            InlineKeyboardButton(
                text=f"{i}. {CHARACTER_NAMES[i][:15]}...",
                callback_data=f"char_{i}"
            )
        ]
        if i + 1 <= 10:
            row.append(
                InlineKeyboardButton(
                    text=f"{i+1}. {CHARACTER_NAMES[i+1][:15]}...",
                    callback_data=f"char_{i+1}"
                )
            )
        keyboard.append(row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_tutorial_keyboard(step: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""
    if step == "character_selected":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=BTN_TUTORIAL_START, callback_data="tutorial_shipwreck")]
        ])
    elif step == "shipwreck":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=BTN_CONTINUE, callback_data="tutorial_tavern")]
        ])
    elif step == "tavern":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíç –ü–æ–π—Ç–∏ –≤ –ª–æ–º–±–∞—Ä–¥", callback_data="tutorial_pawnshop")]
        ])
    elif step == "pawnshop":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–∞—Ç—å –∑–∞ 500 üíµ", callback_data="tutorial_sell_shard")]
        ])
    elif step == "pawnshop_sold":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèõÔ∏è –ò–¥—Ç–∏ –≤ —Ä–∞—Ç—É—à—É", callback_data="tutorial_townhall")]
        ])
    elif step == "townhall_register":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞ 10 üíµ", callback_data="tutorial_register")]
        ])
    elif step == "townhall_registered":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìú –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è", callback_data="tutorial_employer_license")]
        ])
    elif step == "employer_license":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å –∑–∞ 100 üíµ", callback_data="tutorial_buy_employer_license")]
        ])
    elif step == "license_bought":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéì –ò–¥—Ç–∏ –≤ –∞–∫–∞–¥–µ–º–∏—é", callback_data="tutorial_academy")]
        ])
    elif step == "academy_hire":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë∑ –ù–∞–Ω—è—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –∑–∞ 30 üíµ", callback_data="tutorial_hire_worker")]
        ])
    elif step == "worker_hired":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíº –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É", callback_data="tutorial_first_work")]
        ])
    elif step == "first_work":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåä –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="tutorial_do_work")]
        ])
    elif step == "work_completed":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ü–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç —É –∂–∏—Ç–µ–ª—è", callback_data="tutorial_citizen")]
        ])
    elif step == "citizen_quest":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéì –û–±—É—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", callback_data="tutorial_train")]
        ])
    elif step == "train_specialist":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë®‚Äçüåæ –û–±—É—á–∏—Ç—å —Ñ–µ—Ä–º–µ—Ä–∞", callback_data="tutorial_train_farmer")],
            [InlineKeyboardButton(text="üèóÔ∏è –û–±—É—á–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—è", callback_data="tutorial_train_builder")]
        ])
    elif step == "specialist_trained":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèõÔ∏è –ö—É–ø–∏—Ç—å —Ñ–µ—Ä–º–µ—Ä—Å–∫—É—é –ª–∏—Ü–µ–Ω–∑–∏—é", callback_data="tutorial_farm_license")]
        ])
    # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤...
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=BTN_CONTINUE, callback_data="tutorial_continue")]
        ])

# === –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê ===

@router.callback_query(F.data == "start_character_creation")
async def start_character_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    try:
        await callback.message.edit_text(
            CHARACTER_CREATION_TITLE,
            reply_markup=get_character_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", show_alert=True)

@router.callback_query(F.data.startswith("char_"))
async def select_character(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    try:
        char_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ë–î
        client = await get_supabase_client()
        await client.execute_query(
            table="users",
            operation="update",
            data={
                "character_preset": char_id,
                "tutorial_step": TutorialStep.SHIPWRECK.value
            },
            filters={"user_id": user_id}
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        text = CHARACTER_SELECTED.format(
            name=CHARACTER_NAMES[char_id],
            description=CHARACTER_DESCRIPTIONS[char_id]
        )

        await callback.message.edit_text(
            text,
            reply_markup=get_tutorial_keyboard("character_selected")
        )
        await callback.answer(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {CHARACTER_NAMES[char_id]} –≤—ã–±—Ä–∞–Ω!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", show_alert=True)

# === –¢–£–¢–û–†–ò–ê–õ ===

@router.callback_query(F.data == "tutorial_shipwreck")
async def tutorial_shipwreck(callback: CallbackQuery):
    """–ö–æ—Ä–∞–±–ª–µ–∫—Ä—É—à–µ–Ω–∏–µ"""
    try:
        await callback.message.edit_text(
            TUTORIAL_SHIPWRECK,
            reply_markup=get_tutorial_keyboard("shipwreck")
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –∫–æ—Ä–∞–±–ª–µ–∫—Ä—É—à–µ–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "tutorial_tavern")
async def tutorial_tavern(callback: CallbackQuery):
    """–ü–æ—Å–µ—â–µ–Ω–∏–µ —Ç–∞–≤–µ—Ä–Ω—ã"""
    try:
        user_id = callback.from_user.id

        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
        await tutorial_service.update_tutorial_step(user_id, TutorialStep.TAVERN_VISIT)

        await callback.message.edit_text(
            TUTORIAL_TAVERN,
            reply_markup=get_tutorial_keyboard("tavern")
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ —Ç–∞–≤–µ—Ä–Ω—ã: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "tutorial_pawnshop")
async def tutorial_pawnshop(callback: CallbackQuery):
    """–ü–æ—Å–µ—â–µ–Ω–∏–µ –ª–æ–º–±–∞—Ä–¥–∞"""
    try:
        user_id = callback.from_user.id

        await tutorial_service.update_tutorial_step(user_id, TutorialStep.PAWN_SHOP)

        await callback.message.edit_text(
            TUTORIAL_PAWNSHOP,
            reply_markup=get_tutorial_keyboard("pawnshop")
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –ª–æ–º–±–∞—Ä–¥–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "tutorial_sell_shard")
async def tutorial_sell_shard(callback: CallbackQuery):
    """–ü—Ä–æ–¥–∞–∂–∞ –∑–æ–ª–æ—Ç–æ–≥–æ –æ—Å–∫–æ–ª–∫–∞"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã: —É–±–∏—Ä–∞–µ–º –æ—Å–∫–æ–ª–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–±–∞–∫—Å—ã
        use_cases = await get_user_use_cases()
        await use_cases['update_resources'].execute(user_id, {
            "ryabucks": 500,
            "golden_shards": 0
        })

        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –±–ª–æ–∫—á–µ–π–Ω
        await blockchain_service.log_action(
            "SHARD_SOLD", user_id, username,
            {"shard_type": "golden", "price": 500, "currency": "ryabucks"},
            significance=1  # –í–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        )

        await tutorial_service.update_tutorial_step(user_id, TutorialStep.TOWN_HALL_REGISTER)

        await callback.message.edit_text(
            TUTORIAL_PAWNSHOP_SOLD,
            reply_markup=get_tutorial_keyboard("pawnshop_sold")
        )
        await callback.answer("üí∞ –û—Å–∫–æ–ª–æ–∫ –ø—Ä–æ–¥–∞–Ω –∑–∞ 500 —Ä—è–±–∞–∫—Å–æ–≤!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –æ—Å–∫–æ–ª–∫–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏", show_alert=True)

@router.callback_query(F.data == "tutorial_townhall")
async def tutorial_townhall(callback: CallbackQuery):
    """–†–∞—Ç—É—à–∞ - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
    try:
        user_id = callback.from_user.id

        await callback.message.edit_text(
            TUTORIAL_TOWNHALL_REGISTER,
            reply_markup=get_tutorial_keyboard("townhall_register")
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Ç—É—à–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "tutorial_register")
async def tutorial_register(callback: CallbackQuery):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"

        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        if profile['ryabucks'] < 10:
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤!", show_alert=True)
            return

        await use_cases['update_resources'].execute(user_id, {
            "ryabucks": profile['ryabucks'] - 10
        })

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–ª–æ–∫—á–µ–π–Ω
        await blockchain_service.log_action(
            "CITIZEN_REGISTERED", user_id, username,
            {"fee_paid": 10, "status": "citizen"},
            significance=2  # –≠–ø–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ - –Ω–æ–≤—ã–π –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!
        )

        await tutorial_service.update_tutorial_step(user_id, TutorialStep.EMPLOYER_LICENSE)

        text = TUTORIAL_TOWNHALL_REGISTERED.format(username=username)
        await callback.message.edit_text(
            text,
            reply_markup=get_tutorial_keyboard("townhall_registered")
        )
        await callback.answer("üéâ –í—ã –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –æ—Å—Ç—Ä–æ–≤–∞!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data == "tutorial_employer_license")
async def tutorial_employer_license(callback: CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è"""
    try:
        await callback.message.edit_text(
            TUTORIAL_EMPLOYER_LICENSE,
            reply_markup=get_tutorial_keyboard("employer_license")
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "tutorial_buy_employer_license")
async def tutorial_buy_employer_license(callback: CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"

        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ –≤—ã–¥–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        if profile['ryabucks'] < 100:
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤!", show_alert=True)
            return

        await use_cases['update_resources'].execute(user_id, {
            "ryabucks": profile['ryabucks'] - 100
        })

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –≤ –ë–î
        client = await get_supabase_client()
        await client.execute_query(
            table="users",
            operation="update",
            data={"has_employer_license": True},
            filters={"user_id": user_id}
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –ª–∏—Ü–µ–Ω–∑–∏–∏
        await blockchain_service.log_action(
            "LICENSE_PURCHASED", user_id, username,
            {"license_type": "employer", "level": 1, "price": 100},
            significance=1
        )

        await tutorial_service.update_tutorial_step(user_id, TutorialStep.ACADEMY_HIRE)

        remaining = profile['ryabucks'] - 100
        text = TUTORIAL_LICENSE_BOUGHT.format(remaining=remaining)

        await callback.message.edit_text(
            text,
            reply_markup=get_tutorial_keyboard("license_bought")
        )
        await callback.answer("üìú –õ–∏—Ü–µ–Ω–∑–∏—è –ø–æ–ª—É—á–µ–Ω–∞!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏", show_alert=True)

@router.callback_query(F.data == "tutorial_academy")
async def tutorial_academy(callback: CallbackQuery):
    """–ê–∫–∞–¥–µ–º–∏—è - –Ω–∞–π–º —Ä–∞–±–æ—á–µ–≥–æ"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä—è–±–∞–∫—Å—ã
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        text = TUTORIAL_ACADEMY_HIRE.format(ryabucks=profile['ryabucks'])

        await callback.message.edit_text(
            text,
            reply_markup=get_tutorial_keyboard("academy_hire")
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫–∞–¥–µ–º–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "tutorial_hire_worker")
async def tutorial_hire_worker(callback: CallbackQuery):
    """–ù–∞–π–º –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"

        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        if profile['ryabucks'] < 30:
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—è–±–∞–∫—Å–æ–≤!", show_alert=True)
            return

        await use_cases['update_resources'].execute(user_id, {
            "ryabucks": profile['ryabucks'] - 30
        })

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–µ–≥–æ –≤ –ë–î
        client = await get_supabase_client()
        await client.execute_query(
            table="specialists",
            operation="insert",
            data={
                "user_id": user_id,
                "specialist_type": "worker",
                "level": 1,
                "experience": 0,
                "hired_at": datetime.now().isoformat()
            }
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–º
        await blockchain_service.log_action(
            "WORKER_HIRED", user_id, username,
            {"worker_type": "laborer", "cost": 30, "name": "–ò–≤–∞–Ω"},
            significance=1
        )

        await tutorial_service.update_tutorial_step(user_id, TutorialStep.WORK_TASK)

        await callback.message.edit_text(
            TUTORIAL_WORKER_HIRED,
            reply_markup=get_tutorial_keyboard("worker_hired")
        )
        await callback.answer("üë∑ –†–∞–±–æ—á–∏–π –ò–≤–∞–Ω –Ω–∞–Ω—è—Ç!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–µ–≥–æ: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–π–º–∞", show_alert=True)

@router.callback_query(F.data == "tutorial_first_work")
async def tutorial_first_work(callback: CallbackQuery):
    """–ü–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞"""
    try:
        await callback.message.edit_text(
            TUTORIAL_FIRST_WORK,
            reply_markup=get_tutorial_keyboard("first_work")
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–π —Ä–∞–±–æ—Ç—ã: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "tutorial_do_work")
async def tutorial_do_work(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ä–∞–±–æ—Ç—ã"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        if profile['energy'] < 5:
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –ù—É–∂–Ω–æ 5.", show_alert=True)
            return

        # –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–∞–±–æ—Ç—É
        await use_cases['update_resources'].execute(user_id, {
            "ryabucks": profile['ryabucks'] + 50,
            "energy": profile['energy'] - 5,
            "experience": profile['experience'] + 25
        })

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        await blockchain_service.log_action(
            "WORK_COMPLETED", user_id, username,
            {"task": "sea_unload", "reward_money": 50, "reward_exp": 25},
            significance=0
        )

        await tutorial_service.update_tutorial_step(user_id, TutorialStep.CITIZEN_QUEST)

        await callback.message.edit_text(
            TUTORIAL_WORK_COMPLETED,
            reply_markup=get_tutorial_keyboard("work_completed")
        )
        await callback.answer("‚úÖ –†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã", show_alert=True)

@router.callback_query(F.data == "tutorial_citizen")
async def tutorial_citizen(callback: CallbackQuery):
    """–ó–∞–¥–∞–Ω–∏–µ –∂–∏—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"

        # –î–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –∏ –∂–∏–¥–∫–∏–π –æ–ø—ã—Ç
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        await use_cases['update_resources'].execute(user_id, {
            "experience": profile['experience'] + 50,
            "liquid_experience": profile['liquid_experience'] + 10
        })

        await tutorial_service.update_tutorial_step(user_id, TutorialStep.TRAIN_SPECIALIST)

        await callback.message.edit_text(
            TUTORIAL_CITIZEN_QUEST,
            reply_markup=get_tutorial_keyboard("citizen_quest")
        )
        await callback.answer("üìä –û–ø—ã—Ç –ø–æ–ª—É—á–µ–Ω!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–¥–∞–Ω–∏—è –∂–∏—Ç–µ–ª—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "tutorial_train")
async def tutorial_train_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è
        await callback.message.edit_text(
            TUTORIAL_TRAIN_SPECIALIST,
            reply_markup=get_tutorial_keyboard("train_specialist")
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "tutorial_train_farmer")
async def tutorial_train_farmer(callback: CallbackQuery):
    """–û–±—É—á–µ–Ω–∏–µ —Ñ–µ—Ä–º–µ—Ä–∞"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        if profile['liquid_experience'] < 25 or profile['ryabucks'] < 50:
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!", show_alert=True)
            return

        await use_cases['update_resources'].execute(user_id, {
            "liquid_experience": profile['liquid_experience'] - 25,
            "ryabucks": profile['ryabucks'] - 50
        })

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ –ë–î
        client = await get_supabase_client()
        await client.execute_query(
            table="specialists",
            operation="update",
            data={"specialist_type": "farmer"},
            filters={"user_id": user_id, "specialist_type": "worker"}
        )

        # –õ–æ–≥–∏—Ä—É–µ–º
        await blockchain_service.log_action(
            "SPECIALIST_TRAINED", user_id, username,
            {"specialty": "farmer", "cost_exp": 25, "cost_money": 50},
            significance=1
        )

        await tutorial_service.update_tutorial_step(user_id, TutorialStep.FARM_LICENSE)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        text = TUTORIAL_SPECIALIST_TRAINED.format(
            specialty=SPECIALTY_FARMER,
            specialty_abilities=SPECIALTY_ABILITIES["farmer"]
        )

        await callback.message.edit_text(
            text,
            reply_markup=get_tutorial_keyboard("specialist_trained")
        )
        await callback.answer("üéì –§–µ—Ä–º–µ—Ä –æ–±—É—á–µ–Ω!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è —Ñ–µ—Ä–º–µ—Ä–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "tutorial_train_builder")
async def tutorial_train_builder(callback: CallbackQuery):
    """–û–±—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"

        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ–µ—Ä–º–µ—Ä—É, –Ω–æ —Å —Ç–∏–ø–æ–º builder
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        if profile['liquid_experience'] < 25 or profile['ryabucks'] < 50:
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!", show_alert=True)
            return

        await use_cases['update_resources'].execute(user_id, {
            "liquid_experience": profile['liquid_experience'] - 25,
            "ryabucks": profile['ryabucks'] - 50
        })

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        client = await get_supabase_client()
        await client.execute_query(
            table="specialists",
            operation="update",
            data={"specialist_type": "builder"},
            filters={"user_id": user_id, "specialist_type": "worker"}
        )

        # –õ–æ–≥–∏—Ä—É–µ–º
        await blockchain_service.log_action(
            "SPECIALIST_TRAINED", user_id, username,
            {"specialty": "builder", "cost_exp": 25, "cost_money": 50},
            significance=1
        )

        await tutorial_service.update_tutorial_step(user_id, TutorialStep.FARM_LICENSE)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        text = TUTORIAL_SPECIALIST_TRAINED.format(
            specialty=SPECIALTY_BUILDER,
            specialty_abilities=SPECIALTY_ABILITIES["builder"]
        )

        await callback.message.edit_text(
            text,
            reply_markup=get_tutorial_keyboard("specialist_trained")
        )
        await callback.answer("üéì –°—Ç—Ä–æ–∏—Ç–µ–ª—å –æ–±—É—á–µ–Ω!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è", show_alert=True)

# === –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –¢–£–¢–û–†–ò–ê–õ–ê ===

# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...
# –≠—Ç–æ –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å

@router.callback_query(F.data == "tutorial_continue")
async def tutorial_continue(callback: CallbackQuery):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    try:
        await callback.answer("üöß –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)