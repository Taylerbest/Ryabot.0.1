# interfaces/telegram_bot/handlers/academy.py
"""
Handler –¥–ª—è –ê–∫–∞–¥–µ–º–∏–∏ - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config.texts import *
from services.quest_service import quest_service
from services.blockchain_service import blockchain_service
from adapters.database.supabase.client import get_supabase_client

router = Router()
logger = logging.getLogger(__name__)


def get_academy_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–∫–∞–¥–µ–º–∏–∏"""
    keyboard = [
        [InlineKeyboardButton(text=BTN_LABOR_EXCHANGE, callback_data="academy_hire")],
        [InlineKeyboardButton(text=BTN_EXPERT_COURSES, callback_data="academy_train")],
        [InlineKeyboardButton(text=BTN_TRAINING_CLASS, callback_data="academy_class")],
        [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_town")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_hire_keyboard(can_hire=True, worker_count=0):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–∏—Ö"""
    if can_hire:
        cost = 30 + (worker_count * 10)  # –¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        keyboard = [
            [InlineKeyboardButton(
                text=f"üë∑ –ù–∞–Ω—è—Ç—å —Ä–∞–±–æ—á–µ–≥–æ ({cost} üíµ)",
                callback_data=f"hire_worker_{cost}"
            )],
            [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_academy")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(text="‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="hire_unavailable")],
            [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_academy")]
        ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_training_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(text="üë®‚Äçüåæ –û–±—É—á–∏—Ç—å —Ñ–µ—Ä–º–µ—Ä–∞ (25üß™ + 50üíµ)", callback_data="train_farmer")],
        [InlineKeyboardButton(text="üèóÔ∏è –û–±—É—á–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—è (25üß™ + 50üíµ)", callback_data="train_builder")],
        [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_academy")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def show_academy_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–∫–∞–¥–µ–º–∏–∏"""
    try:
        user_id = callback.from_user.id



        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∞–¥–µ–º–∏–∏
        client = await get_supabase_client()
        specialists = await client.execute_query(
            table="specialists",
            operation="select",
            columns=["specialist_type"],
            filters={"user_id": user_id}
        )

        specialist_count = len(specialists) if specialists else 0

        academy_text = f"""
üéì *–ê–ö–ê–î–ï–ú–ò–Ø –û–°–¢–†–û–í–ê*

–¶–µ–Ω—Ç—Ä –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–∞–π–º–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–Ω–∏–º–∞—Ç—å —Ä–∞–±–æ—á–∏—Ö –∏ –æ–±—É—á–∞—Ç—å –∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º.

üë• *–í–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:* {specialist_count}
üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:* –§–µ—Ä–º–µ—Ä, –°—Ç—Ä–æ–∏—Ç–µ–ª—å

üí° *–°–æ–≤–µ—Ç:* –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –æ–±—ã—á–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö!

üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """.strip()

        await callback.message.edit_text(
            academy_text,
            reply_markup=get_academy_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫–∞–¥–µ–º–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∞–¥–µ–º–∏–∏", show_alert=True)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–ö–ê–î–ï–ú–ò–ò ===

@router.callback_query(F.data == "academy_hire")
async def academy_hire(callback: CallbackQuery):
    """–ë–∏—Ä–∂–∞ —Ç—Ä—É–¥–∞ - –Ω–∞–π–º —Ä–∞–±–æ—á–∏—Ö"""
    try:
        user_id = callback.from_user.id



        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from interfaces.telegram_bot.handlers.start import get_user_use_cases
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö
        client = await get_supabase_client()
        workers = await client.execute_query(
            table="specialists",
            operation="select",
            columns=["id"],
            filters={"user_id": user_id}
        )

        worker_count = len(workers) if workers else 0
        hire_cost = 30 + (worker_count * 10)
        can_hire = profile['ryabucks'] >= hire_cost

        hire_text = f"""
üíº *–ë–ò–†–ñ–ê –¢–†–£–î–ê*

–ù–∞–π–º–∏—Ç–µ —Ä–∞–±–æ—á–∏—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ.

üë• *–í–∞—à–∏ —Ä–∞–±–æ—á–∏–µ:* {worker_count}
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–π–º–∞:* {hire_cost} —Ä—è–±–∞–∫—Å–æ–≤
üíµ *–í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞:* {profile['ryabucks']} —Ä—è–±–∞–∫—Å–æ–≤

{"‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–Ω—è—Ç—å —Ä–∞–±–æ—á–µ–≥–æ!" if can_hire else "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–∞–π–º–∞"}
        """.strip()

        await callback.message.edit_text(
            hire_text,
            reply_markup=get_hire_keyboard(can_hire, worker_count)
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∏—Ä–∂–∏ —Ç—Ä—É–¥–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("hire_worker_"))
async def hire_worker(callback: CallbackQuery):
    """–ù–∞–Ω—è—Ç—å —Ä–∞–±–æ—á–µ–≥–æ"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        cost = int(callback.data.split("_")[-1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞–π–º–∞
        if not await quest_service.is_quest_available(user_id, "hire_worker"):
            await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        from interfaces.telegram_bot.handlers.start import get_user_use_cases
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        if profile['ryabucks'] < cost:
            await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {cost} —Ä—è–±–∞–∫—Å–æ–≤", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–µ–≥–æ
        client = await get_supabase_client()
        worker_data = {
            "user_id": user_id,
            "specialist_type": "worker",
            "level": 1,
            "experience": 0,
            "status": "idle",
            "hp": 25,
            "stamina": 25
        }

        await client.execute_query(
            table="specialists",
            operation="insert",
            data=worker_data,
            single=True
        )

        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        await use_cases['update_resources'].execute(user_id, {
            "ryabucks": profile['ryabucks'] - cost
        })

        # –õ–æ–≥–∏—Ä—É–µ–º
        await blockchain_service.log_action(
            "WORKER_HIRED", user_id, username,
            {"name": "–†–∞–±–æ—á–∏–π", "cost": cost},
            significance=1
        )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        await quest_service.complete_quest(user_id, "hire_worker")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.edit_text(
            f"""
‚úÖ *–†–ê–ë–û–ß–ò–ô –ù–ê–ù–Ø–¢!*

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–Ω—è–ª–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ!

üë∑ *–ò–º—è:* –†–∞–±–æ—á–∏–π #{user_id % 1000}
üí∞ *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:* {cost} —Ä—è–±–∞–∫—Å–æ–≤
üí™ *–°—Ç–∞—Ç—É—Å:* –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ

üéØ *–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–±–æ—á–µ–≥–æ –Ω–∞ –ø–µ—Ä–≤—É—é —Ä–∞–±–æ—Ç—É!
–ò–¥–∏—Ç–µ –≤ üíº –†—è–±–æ—Ç–∞ ‚Üí üåä –ú–æ—Ä–µ ‚Üí "–†–∞–∑–≥—Ä—É–∑–∏—Ç—å —É–ª–æ–≤"
            """.strip(),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéâ –û—Ç–ª–∏—á–Ω–æ!", callback_data="back_to_academy")]
            ])
        )

        await callback.answer("‚úÖ –†–∞–±–æ—á–∏–π –Ω–∞–Ω—è—Ç!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–µ–≥–æ: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–π–º–∞", show_alert=True)


@router.callback_query(F.data == "academy_train")
async def academy_train(callback: CallbackQuery):
    """–ö—É—Ä—Å—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ - –æ–±—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"""
    try:
        user_id = callback.from_user.id


        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        from interfaces.telegram_bot.handlers.start import get_user_use_cases
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—á–∏—Ö
        client = await get_supabase_client()
        workers = await client.execute_query(
            table="specialists",
            operation="select",
            columns=["id", "specialist_type"],
            filters={"user_id": user_id, "specialist_type": "worker"}
        )

        if not workers:
            await callback.message.edit_text(
                f"""
üéì *–ö–£–†–°–´ –≠–ö–°–ü–ï–†–¢–û–í*

‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!

–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–º–∏—Ç–µ —Ä–∞–±–æ—á–µ–≥–æ –≤ üíº –ë–∏—Ä–∂–µ —Ç—Ä—É–¥–∞.
                """.strip(),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_academy")]
                ])
            )
            await callback.answer()
            return

        train_text = f"""
üéì *–ö–£–†–°–´ –≠–ö–°–ü–ï–†–¢–û–í*

–û–±—É—á–∏—Ç–µ –≤–∞—à–∏—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

üë∑ *–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:* {len(workers)} —Ä–∞–±–æ—á–∏—Ö

üí∞ *–í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:*
üíµ {profile['ryabucks']} —Ä—è–±–∞–∫—Å–æ–≤
üß™ {profile['liquid_experience']} –∂–∏–¥–∫–æ–≥–æ –æ–ø—ã—Ç–∞

üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:*
        """.strip()

        await callback.message.edit_text(
            train_text,
            reply_markup=get_training_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫—É—Ä—Å–æ–≤: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("train_"))
async def train_specialist(callback: CallbackQuery):
    """–û–±—É—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"

        specialty = callback.data.split("_")[1]  # farmer –∏–ª–∏ builder

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
        if not await quest_service.is_quest_available(user_id, "train_specialist"):
            await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        from interfaces.telegram_bot.handlers.start import get_user_use_cases
        use_cases = await get_user_use_cases()
        profile = await use_cases['get_profile'].execute(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if profile['liquid_experience'] < 25 or profile['ryabucks'] < 50:
            await callback.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ 25 –∂–∏–¥–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –∏ 50 —Ä—è–±–∞–∫—Å–æ–≤",
                show_alert=True
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        client = await get_supabase_client()
        await client.execute_query(
            table="specialists",
            operation="update",
            data={"specialist_type": specialty},
            filters={"user_id": user_id, "specialist_type": "worker"}
        )

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await use_cases['update_resources'].execute(user_id, {
            "liquid_experience": profile['liquid_experience'] - 25,
            "ryabucks": profile['ryabucks'] - 50
        })

        # –õ–æ–≥–∏—Ä—É–µ–º
        await blockchain_service.log_action(
            "SPECIALIST_TRAINED", user_id, username,
            {"specialty": specialty, "cost_exp": 25, "cost_money": 50},
            significance=1
        )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        await quest_service.complete_quest(user_id, "train_specialist")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        specialty_name = SPECIALTY_FARMER if specialty == "farmer" else SPECIALTY_BUILDER
        abilities = SPECIALTY_ABILITIES[specialty]

        await callback.message.edit_text(
            f"""
‚úÖ *–°–ü–ï–¶–ò–ê–õ–ò–°–¢ –û–ë–£–ß–ï–ù!*

üéì –í–∞—à —Ä–∞–±–æ—á–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–∏–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏—é {specialty_name}!

üí™ *–ù–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:*
{abilities}

üéØ *–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:* –ö—É–ø–∏—Ç–µ —Ñ–µ—Ä–º–µ—Ä—Å–∫—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –≤ –†–∞—Ç—É—à–µ!
–ò–¥–∏—Ç–µ –≤ üèòÔ∏è –ì–æ—Ä–æ–¥ ‚Üí üèõÔ∏è –†–∞—Ç—É—à–∞ ‚Üí –õ–∏—Ü–µ–Ω–∑–∏–∏
            """.strip(),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéâ –û—Ç–ª–∏—á–Ω–æ!", callback_data="back_to_academy")]
            ])
        )

        await callback.answer("üéì –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ–±—É—á–µ–Ω!", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "academy_class")
async def academy_class(callback: CallbackQuery):
    """–ö–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.message.edit_text(
        f"üìö *–ö–õ–ê–°–° –û–ë–£–ß–ï–ù–ò–Ø*\n\n{SECTION_UNDER_DEVELOPMENT}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_academy")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "hire_unavailable")
async def hire_unavailable(callback: CallbackQuery):
    """–ù–∞–π–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–∞–π–º–∞ —Ä–∞–±–æ—á–µ–≥–æ", show_alert=True)


@router.callback_query(F.data == "back_to_academy")
async def back_to_academy(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–∫–∞–¥–µ–º–∏—é"""
    await show_academy_menu(callback)