# interfaces/telegram_bot/handlers/farm.py
"""
Handler –º–µ–Ω—é —Ñ–µ—Ä–º—ã
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config.texts import *
from adapters.database.supabase.client import get_supabase_client

router = Router()
logger = logging.getLogger(__name__)


def get_farm_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–µ—Ä–º—ã - –¢–û–ß–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø"""
    keyboard = [
        [InlineKeyboardButton(text=BTN_FARM_HENHOUSE, callback_data="farm_henhouse"),
         InlineKeyboardButton(text=BTN_FARM_COWSHED, callback_data="farm_cowshed")],
        [InlineKeyboardButton(text=BTN_FARM_SHEEPFOLD, callback_data="farm_sheepfold"),
         InlineKeyboardButton(text=BTN_FARM_PIGSTY, callback_data="farm_pigsty")],
        [InlineKeyboardButton(text=BTN_FARM_APIARY, callback_data="farm_apiary"),
         InlineKeyboardButton(text=BTN_FARM_GARDEN, callback_data="farm_garden")],
        [InlineKeyboardButton(text=BTN_FARM_FORESTRY, callback_data="farm_forestry"),
         InlineKeyboardButton(text=BTN_FARM_FISHPOND, callback_data="farm_fishpond")],
        [InlineKeyboardButton(text=BTN_FARM_MINE, callback_data="farm_mine"),
         InlineKeyboardButton(text=BTN_FARM_VILLAGE, callback_data="farm_village")],
        [InlineKeyboardButton(text=BTN_FARM_QUANTUMLAB, callback_data="farm_quantumlab"),
         InlineKeyboardButton(text=BTN_FARM_STABLE, callback_data="farm_stable")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_farm_data(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–µ—Ä–º—ã"""
    try:
        # TODO: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        return {
            "farmer_id": f"L{user_id}",
            "total_area": 0,
            "lab_pool": 5250000,
            "farmer_rating": 0
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–µ—Ä–º—ã: {e}")
        return {
            "farmer_id": f"L{user_id}",
            "total_area": 0,
            "lab_pool": 5250000,
            "farmer_rating": 0
        }


async def show_farm_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–µ—Ä–º—ã"""
    try:
        user_id = message.from_user.id

        farm_data = await get_farm_data(user_id)
        farm_text = FARM_MENU.format(**farm_data)

        await message.answer(
            farm_text,
            reply_markup=get_farm_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é —Ñ–µ—Ä–º—ã: {e}")
        await message.answer(ERROR_GENERAL)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–°–¢–†–û–ï–ö –§–ï–†–ú–´ ===

@router.callback_query(F.data.startswith("farm_"))
async def handle_farm_building(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫ —Ñ–µ—Ä–º—ã"""
    try:
        building = callback.data.split("_")[1]

        building_names = {
            "henhouse": "üêî –ö–£–†–Ø–¢–ù–ò–ö",
            "cowshed": "üêÑ –ö–û–†–û–í–ù–ò–ö",
            "sheepfold": "üêë –û–í–ß–ê–†–ù–Ø",
            "pigsty": "üêñ –°–í–ò–ù–ê–†–ù–ò–ö",
            "apiary": "üêù –ü–ê–°–ï–ö–ê",
            "garden": "ü™¥ –û–ì–û–†–û–î",
            "forestry": "üå≥ –õ–ï–°–•–û–ó",
            "fishpond": "üåä –†–´–ë–ù–ò–ö",
            "mine": "ü™® –†–£–î–ù–ò–ö",
            "village": "üèò –î–ï–†–ï–í–ù–Ø",
            "quantumlab": "‚öõÔ∏è –ö–í–ê–ù–¢–õ–ê–ë",
            "stable": "üêé –ö–û–ù–Æ–®–ù–Ø"
        }

        building_name = building_names.get(building, "–ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –ü–û–°–¢–†–û–ô–ö–ê")

        await callback.message.edit_text(
            f"{building_name}\n\n{SECTION_UNDER_DEVELOPMENT}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="back_to_farm")]
            ])
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —Ñ–µ—Ä–º—ã: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_farm")
async def back_to_farm(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ñ–µ—Ä–º—ã"""
    try:
        user_id = callback.from_user.id

        farm_data = await get_farm_data(user_id)
        farm_text = FARM_MENU.format(**farm_data)

        await callback.message.edit_text(
            farm_text,
            reply_markup=get_farm_keyboard()
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ñ–µ—Ä–º—É: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
